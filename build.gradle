buildscript {
  repositories {
    maven { url uri('file:/F:/.m2/repository') }
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.3.2'
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.21-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '0.13.2'
  }
}

repositories {
  maven { url uri('file:/F:/.m2/repository') }
  mavenLocal()
  mavenCentral()
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    fileTree(dir: 'tools/lib').include("*.jar")
  )
}

defaultTasks 'allspecs'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'
apply plugin: 'groovy'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

// ======================================================================

task allspecs() {
  // dependencies are added by the specs
}

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

// ======================================================================
// overview

task overview(dependsOn: [ "xproc_schemas", "spec_schemas",
                           "overview:specification", "overview_assets",
                           "overview_src" ],
              type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "overview/build/source.xml")
  output("result", "build/dist/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "overview"

task overview_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/"
}

task overview_src(dependsOn: ["overview:source"], type: Copy) {
  from "overview/build/"
  into "build/dist/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ================================================================================

task xproc(dependsOn: [ "xproc_schemas", "spec_schemas",
                        "xproc:specification", "xproc_assets", "xproc_src",
                        "xproc_ancillary", "xproc_library"],
             type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "xproc/build/source.xml")
  output("result", "build/dist/xproc/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "xproc"
overview.dependsOn "xproc"

task xproc_ancillary(dependsOn: [ "xproc10_rng", "xproc30_rnc", "xproc_rng" ], type: Copy) {
  from "build/"
  into "build/dist/xproc/"
  include "xproc*.rnc"
  include "xproc*.rng"
}
xproc_ancillary.doFirst {
  mkdir("build/dist/xproc")
}

task xproc_library(type: XMLCalabashTask,
                   dependsOn: [ "steps_xpl", "step_validation_xpl",
                                "step_exec_xpl", "step_xquery_xpl",
                                "step_xsl_formatter_xpl"]) {
  // N.B. Because Travis jobs cannot see the filesystem, we have
  // to list the dependencies twice. :-(

  String steps = ""
  ["steps", "validation", "exec", "xquery", "xsl-formatter"].each { s->
    steps = steps + " ../../build/dist/" + s + "/steps.xpl"
  }

  inputs.files(fileTree(dir: 'build').include("**/steps.xpl"))
  inputs.file "tools/xpl/make-library.xpl"
  inputs.file "tools/xsl/make-library.xsl"
  input("source", "build/core30.rng")
  output("result", "build/dist/xproc/library.xpl")
  param("libraries", steps)
  pipeline "tools/xpl/make-library.xpl"
}
xproc_library.doFirst {
  println "Dir: " + System.getProperty("user.dir")

  String steps = ""
  ["steps", "validation", "exec", "xquery", "xsl-formatter"].each { s->
    steps = steps + " ../../build/dist/" + s + "/steps.xpl"
  }

  println "Steps: " + steps

  mkdir("build/dist/xproc")
}

task xproc_assets(dependsOn: [ "xproc_web_assets" ], type: Copy) {
  from "xproc/build/graphics"
  into "build/dist/xproc/graphics/"
}

task xproc_web_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/xproc/"
}

task xproc_src(dependsOn: ["xproc:source"], type: Copy) {
  from "xproc/build/"
  into "build/dist/xproc/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// steps-intro

task steps_intro(dependsOn: [ "xproc_schemas", "spec_schemas",
                              "steps-intro:specification", "steps_intro_assets",
                              "steps_intro_src" ],
                 type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "steps-intro/build/source.xml")
  output("result", "build/dist/steps-intro/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "steps_intro"
overview.dependsOn "steps_intro"

task steps_intro_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/steps-intro/"
}

task steps_intro_src(dependsOn: ["steps-intro:source"], type: Copy) {
  from "steps-intro/build/"
  into "build/dist/steps-intro/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// steps

task steps(dependsOn: [ "xproc", "xproc_schemas", "spec_schemas",
                        "steps:specification", "steps_assets", "steps_src",
                        "steps_xpl" ],
           type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "steps/build/source.xml")
  output("result", "build/dist/steps/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "steps"
overview.dependsOn "steps"

task steps_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/steps/"
}

task steps_src(dependsOn: ["steps:source"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task steps_xpl(dependsOn: ["steps:library"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-validation

task step_validation(type: DocBookTask,
                     dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                                  "step-validation:specification",
                                  "step_validation_assets", "step_validation_src",
                                  "step_validation_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-validation/build/source.xml")
  output("result", "build/dist/validation/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "step_validation"
overview.dependsOn "step_validation"

task step_validation_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/validation/"
}

task step_validation_src(dependsOn: ["step-validation:source"], type: Copy) {
  from "step-validation/build/"
  into "build/dist/validation/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_validation_xpl(dependsOn: ["step-validation:library"], type: Copy) {
  from "step-validation/build/"
  into "build/dist/validation/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-exec

task step_exec(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-exec:specification",
                            "step_exec_assets",
                            "step_exec_src", "step_exec_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-exec/build/source.xml")
  output("result", "build/dist/exec/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "step_exec"
overview.dependsOn "step_exec"

task step_exec_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/exec/"
}

task step_exec_src(dependsOn: ["step-exec:source"], type: Copy) {
  from "step-exec/build/"
  into "build/dist/exec/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_exec_xpl(dependsOn: ["step-exec:library"], type: Copy) {
  from "step-exec/build/"
  into "build/dist/exec/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-xquery

task step_xquery(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-xquery:specification",
                            "step_xquery_assets",
                            "step_xquery_src", "step_xquery_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-xquery/build/source.xml")
  output("result", "build/dist/xquery/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "step_xquery"
overview.dependsOn "step_xquery"

task step_xquery_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/xquery/"
}

task step_xquery_src(dependsOn: ["step-xquery:source"], type: Copy) {
  from "step-xquery/build/"
  into "build/dist/xquery/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_xquery_xpl(dependsOn: ["step-xquery:library"], type: Copy) {
  from "step-xquery/build/"
  into "build/dist/xquery/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-xsl-formatter

task step_xsl_formatter(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-xsl-formatter:specification",
                            "step_xsl_formatter_assets",
                            "step_xsl_formatter_src", "step_xsl_formatter_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-xsl-formatter/build/source.xml")
  output("result", "build/dist/xsl-formatter/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "step_xsl_formatter"
overview.dependsOn "step_xsl_formatter"

task step_xsl_formatter_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/xsl-formatter/"
}

task step_xsl_formatter_src(dependsOn: ["step-xsl-formatter:source"], type: Copy) {
  from "step-xsl-formatter/build/"
  into "build/dist/xsl-formatter/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_xsl_formatter_xpl(dependsOn: ["step-xsl-formatter:library"], type: Copy) {
  from "step-xsl-formatter/build/"
  into "build/dist/xsl-formatter/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// Specification schemas

task spec_schemas(dependsOn: [ "spec_rng", "spec_sch" ]) {
  // nop
}

task spec_rng(type: JavaExec) {
  inputs.files fileTree(dir: "schema/")
  outputs.file "build/schema/dbspec.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/dbspec.rnc", "build/schema/dbspec.rng"]
}
spec_rng.doFirst {
  mkdir("build/schema")
}

task spec_sch(type: Copy) {
  from('schema') {
    include "docbook.sch"
  }
  into "build/schema"
}
spec_sch.doFirst {
  mkdir("build/schema")
}

// ======================================================================
// XProc schemas

task core_rng(type: JavaExec) {
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["src/main/schema/core30.rnc", "build/core30.rng"]
}
core_rng.doFirst {
  mkdir("build")
}

task xproc30_rng(type: XMLCalabashTask,
               dependsOn: [ "core_rng",
                            "steps:rng", "step-validation:rng",
                            "step-exec:rng", "step-xquery:rng",
                            "step-xsl-formatter:rng" ]) {
  // This is bogus; I'm having trouble getting the filesystem read to
  // happen at the right time:
  // https://discuss.gradle.org/t/controlling-order-of-execution-of-statements-wrt-execution-of-a-task/26291
  String files = ""
  ["step-exec", "step-xsl-formatter", "steps",
   "step-validation", "step-xquery"].each { s ->
    files = files + " ../../" + s + "/build/steps.rng"
  }

  print "Files:" + files

  inputs.file "build/core30.rng"
  inputs.file "tools/xpl/make-rng.xpl"
  inputs.file "tools/xsl/make-rng.xsl"
  outputs.file "build/xproc30.rng"
  input("source", "build/core30.rng")
  output("result", "build/xproc30.rng")
  param("libraries", files)
  pipeline "tools/xpl/make-rng.xpl"
}

task xproc30_rnc(dependsOn: [ "xproc30_rng" ], type: JavaExec) {
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc30.rng", "build/xproc30.rnc"]
}
xproc30_rnc.doFirst {
  mkdir("build")
}

task xproc10_rnc(type: Copy) {
  from "src/main/schema/"
  into "build/"
  include "xproc10.rnc"
}
xproc10_rnc.doFirst {
  mkdir("build")
}

task xproc_rnc(type: Copy) {
  from "src/main/schema/"
  into "build/"
  include "xproc.rnc"
}
xproc_rnc.doFirst {
  mkdir("build")
}

task xproc10_rng(dependsOn: [ "xproc10_rnc" ], type: JavaExec) {
  inputs.file "build/xproc10.rnc"
  outputs.file "build/xproc10.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc10.rnc", "build/xproc10.rng"]
}

task xproc_rng(dependsOn: [ "xproc_rnc" ], type: JavaExec) {
  inputs.file "build/xproc.rnc"
  outputs.file "build/xproc.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc.rnc", "build/xproc.rng"]
}

task xproc_schemas(dependsOn: [ "xproc30_rnc", "xproc30_rng", "xproc10_rng", "xproc_rng" ]) {
  // nop
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}

