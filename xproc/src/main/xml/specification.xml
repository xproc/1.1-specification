<?xml-model href="../../schema/dbspec.rng"
  type="application/xml"
  schematypens="http://relaxng.org/ns/structure/1.0" ?>
<specification xmlns="http://docbook.org/ns/docbook"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"pipeine
               xmlns:xi="http://www.w3.org/2001/XInclude"
               xml:id='xproc'
               class="ed"
               version="5.0-extension w3c-xproc">
<info>
<title>XProc 3.0: An XML Pipeline Language</title>
<!-- defaults to date formatted <pubdate>2014-12-18</pubdate> -->
<copyright><year>2018</year><holder>@@FIXME:</holder></copyright>

<bibliorelation type="isformatof" xlink:href="specification.xml">XML</bibliorelation>
<authorgroup>
  <author>
    <personname>Achim Berndzen</personname>
  </author>
  <author>
    <personname>Gerrit Imsieke</personname>
  </author>
  <author>
    <personname>Erik Siegel</personname>
  </author>
  <author>
    <personname>Norman Walsh</personname>
  </author>
</authorgroup>
<abstract>
<para>This specification describes the syntax and semantics of
<citetitle>XProc 3.0: An XML Pipeline Language</citetitle>, a language for
describing operations to be performed on documents.</para>

<para>An XML Pipeline specifies a sequence of operations to be
performed on documents. Pipelines generally accept
documents as input and produce documents as output.
Pipelines are made up of simple steps which
perform atomic operations on documents and constructs similar to
conditionals, iteration, and exception handlers which control which
steps are executed.</para>
</abstract>

<legalnotice role="status">

<para><emphasis>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document.</emphasis></para>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C.</para>
</legalnotice>
</info>

<section xml:id="introduction">
<title>Introduction</title>

<para>An XML Pipeline specifies a sequence of operations to be
performed on a collection of input documents. Pipelines take documents
as their input and produce documents as their output.</para>

<para>A <glossterm>pipeline</glossterm> consists of steps. Like
pipelines, steps take documents as their inputs and
produce documents as their outputs. The inputs of a step
come from the web, from the pipeline document, from the inputs to the
pipeline itself, or from the outputs of other steps in the pipeline.
The outputs from a step are consumed by other steps, are outputs of
the pipeline as a whole, or are discarded.</para>

<para>There are three kinds of steps: atomic steps, compound steps,
and multi-container steps. Atomic steps carry out single operations
and have no substructure as far as the pipeline is concerned. Compound
steps and multi-container steps control the execution of other steps,
which they include in the form of one or more subpipelines.</para>

<para><biblioref linkend="std-components"/>
defines a standard library of steps. Pipeline implementations
<rfc2119>may</rfc2119> support additional types of steps as well.
</para>

<para><xref linkend="fig-xival"/> is a graphical representation of a
simple pipeline that performs XInclude processing and validation on a
document.</para>

    <figure xml:id="fig-xival">
      <title>A simple, linear XInclude/Validate pipeline</title>
      <mediaobject>
        <alt>A simple, linear XInclude/Validate pipeline</alt>
        <imageobject>
          <imagedata fileref="graphics/sch-xinclude-validate-pipeline.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This is a pipeline that consists of two atomic steps, XInclude and Validate with XML
      Schema. The pipeline itself has two inputs, “source” (a source document) and “schemas” (a
      sequence of W3C XML Schemas). The XInclude step reads the pipeline input “source” and produces
      a result document. The Validate with XML Schema step reads the pipeline input “schemas” and
      the result of the XInclude step and produces its own result document. The result of the
      validation, “result”, is the result of the pipeline. (For consistency across the step
      vocabulary, the standard input is usually named “source” and the standard output is
      usually named “result”.) </para>
    <para>The pipeline document determines how the steps are connected together inside the pipeline,
      that is, how the output of one step becomes the input of another.</para>
    <para>The pipeline document for this pipeline is shown in <xref linkend="ex1"/>.</para>
    <example xml:id="ex1">
      <title>A simple, linear XInclude/Validate pipeline</title>
      <programlisting language="xml"><xi:include href="../../../build/examples/fig1.txt" parse="text"/></programlisting>
    </example>

<para>The example in <xref linkend="ex1"/> is very verbose. It makes
all of the connections seen in the figure explicit. In practice,
pipelines do not have to be this verbose. By default, Where inputs and
outputs are connected between sequential sibling steps, they do not
have to be made explicit.</para>

<para>The same pipeline, using XProc defaults, is shown in <xref
linkend="ex1-abbr"/>.</para>

<example xml:id="ex1-abbr">
  <title>A simple, linear XInclude/Validate pipeline (simplified)</title>
  <programlisting language="xml"><xi:include href="../../../build/examples/fig1-abbr.txt" parse="text"/></programlisting>
</example>

<para><xref linkend="fig-style-proc"/> is a more complex example: it
performs schema validation with an appropriate schema and then styles
the validated document.</para>

<figure xml:id="fig-style-proc">
  <title>A validate and transform pipeline</title>
  <mediaobject>
    <alt>A validate and transform pipeline</alt>
    <imageobject>
      <imagedata fileref="graphics/sch-transform.png"/>
    </imageobject>
  </mediaobject>
</figure>

<para>The heart of this example is the conditional. The “choose” step
evaluates an XPath expression over a test document. Based on the
result of that expression, one or another branch is run. In this
example, each branch consists of a single validate step.</para>

<example xml:id="ex2">
  <title>A validate and transform pipeline</title>
  <programlisting language="xml"><xi:include href="../../../build/examples/fig2.txt" parse="text"/></programlisting>
</example>

<para>This example, like the preceding, relies on XProc defaults for
simplicity. It is always valid to write the fully explicit form if you
prefer. This example also takes advantage of using the <tag class="attribute">href</tag>
attribute directly on <tag>p:with-input</tag> as a shortcut for the
<tag>p:document</tag> connection.</para>

    <para>The media type for pipeline documents is <literal>application/xml</literal>. Often,
      pipeline documents are identified by the extension <filename class="extension"
      >.xpl</filename>.</para>
    <para>In this specification the words <rfc2119>must</rfc2119>, <rfc2119>must not</rfc2119>,
        <rfc2119>should</rfc2119>, <rfc2119>should not</rfc2119>, <rfc2119>may</rfc2119> and
        <rfc2119>recommended</rfc2119> are to be interpreted as described in <biblioref
        linkend="rfc2119"/>.</para>
  </section>

  <section xml:id="pipeline-concepts">
    <title>Pipeline Concepts</title>
    <para><termdef xml:id="dt-pipeline">A <firstterm>pipeline</firstterm> is a set of connected
        steps, with outputs of one step flowing into inputs of another.</termdef> A pipeline is
      itself a <glossterm>step</glossterm> and must satisfy the constraints on steps. Connections
      between steps occur where the input of one step is connected to the output of another. </para>
    <para>The result of evaluating a pipeline (or <glossterm>subpipeline</glossterm>) is the result
      of evaluating the steps that it contains, in an order consistent with the connections between
      them. A pipeline must behave as if it evaluated each step each time it is encountered. Unless
      otherwise indicated, implementations <rfc2119>must not</rfc2119> assume that steps are

functional (that is, that their outputs depend only on their
<link linkend="input-output" >inputs</link> and
<glossterm baseform="option">options</glossterm>) or side-effect
free.</para>

    <para>The pattern of connections between steps will not always completely determine their order
      of evaluation. <impl>The evaluation order of steps not connected to one another is
          <glossterm>implementation-dependent</glossterm></impl>.</para>
    <section xml:id="step-concept">
      <title>Steps</title>
      <para><termdef xml:id="dt-step">A <firstterm>step</firstterm> is the basic computational unit
          of a pipeline.</termdef> A typical step has zero or more inputs, from which it receives
        documents to process, zero or more outputs, to which it sends document results, and
        can have options.</para>
      <para>There are three kinds of steps: <glossterm baseform="atomic step">atomic</glossterm>,
          <glossterm baseform="compound step">compound</glossterm>, and <glossterm
          baseform="multi-container step">multi-container</glossterm>.</para>

<para><termdef xml:id="dt-atomic-step">An <firstterm>atomic
step</firstterm> is a step that performs a unit of processing
on its input,
such as XInclude or transformation, and has no internal
<glossterm>subpipeline</glossterm>. </termdef> Atomic steps carry out
fundamental operations and can perform arbitrary amounts of
computation, but they are indivisible. An XSLT step, for example,
performs XSLT processing; a Validate with XML Schema step validates
one input with respect to some set of XML Schemas, etc.</para>

      <para>There are many <emphasis>types</emphasis> of atomic steps. The standard library of
        atomic steps is described in <biblioref linkend="std-components"/>, but implementations
          <rfc2119>may</rfc2119> provide others as well. <impl>It is
            <glossterm>implementation-defined</glossterm> what additional step types, if any, are
          provided. </impl> Each use, or instance, of an atomic step invokes the processing defined
        by that type of step. A pipeline may contain instances of many types of steps and many
        instances of the same type of step.</para>
      <para>Compound steps, on the other hand, control and organize the flow of documents through a
        pipeline, reconstructing familiar programming language functionality such as conditionals,
        iterators and exception handling. They contain other steps, whose evaluation they
        control.</para>
      <para><termdef xml:id="dt-compound-step">A <firstterm>compound step</firstterm> is a step that
          contains a <glossterm>subpipeline</glossterm>.</termdef> That is, a compound step differs
        from an atomic step in that its semantics are at least partially determined by the steps
        that it contains.</para>
      <para>Finally, there are two “multi-container steps”: <tag>p:choose</tag> and
        <tag>p:try</tag>. <termdef xml:id="dt-multi-container-step">A <firstterm>multi-container
            step</firstterm> is a step that contains several alternate <glossterm
            baseform="subpipeline">subpipelines</glossterm>. </termdef> Each subpipeline is
        identified by a non-step wrapper element: <tag>p:when</tag> and <tag>p:otherwise</tag> in
        the case of <tag>p:choose</tag>, <tag>p:group</tag> and <tag>p:catch</tag> in the case of
          <tag>p:try</tag>. </para>
      <para>The output of a multi-container step is the output of exactly one of its subpipelines.
        In this sense, a multi-container step functions like a <glossterm>compound step</glossterm>.
        However, evaluating a multi-container step may involve evaluating, or partially evaluating,
        more than one of its subpipelines. It's possible for steps in a partially evaluated pipeline
        to have side effects that are visible outside the processor, even if the final output of the
        multi-container step is the result of some other subpipeline. For example, a web server
        might record that some interaction was performed, or a file on the local file system might
        have been modified.</para>
      <para><termdef xml:id="dt-container">A compound step or multi-container step is a
            <firstterm>container</firstterm> for the steps directly within it or within non-step
          wrappers directly within it.</termdef>
        <termdef xml:id="dt-contained-steps">The steps that occur directly within, or within
          non-step wrappers directly within, a step are called that step's <firstterm>contained
            steps</firstterm>. In other words, “container” and “contained steps” are inverse
          relationships.</termdef>
        <termdef xml:id="dt-ancestors">The <firstterm>ancestors</firstterm> of a step, if it has
          any, are its <glossterm>container</glossterm> and the ancestors of its
          container.</termdef>
      </para>
      <para><termdef xml:id="dt-subpipeline">Sibling steps (and the connections between them) form a
            <firstterm>subpipeline</firstterm>.</termdef>
        <termdef xml:id="dt-last-step">The <firstterm>last step</firstterm> in a subpipeline is its
          last step in document order.</termdef></para>

      <para xml:id="p.subpipeline"
        role="element-syntax element-syntax-language-construct hanging-indent">
        <code>subpipeline</code>&#xa0;=&#xa0;(<tag>p:variable</tag>|<tag>p:for-each</tag>|<tag>p:viewport</tag>|<tag>p:choose</tag>|<tag>p:if</tag>|<tag>p:group</tag>|<tag>p:try</tag>|<code
          xlink:href="#p.atomic">p:<replaceable>standard-step</replaceable></code>|<code
          xlink:href="#p.atomic"><replaceable>pfx:user-pipeline</replaceable></code>)+ </para>

      <note xml:id="note-udp">
        <para>When a user-defined pipeline is invoked, (identified
        with <code><replaceable>pfx:user-pipeline</replaceable></code>
        in the preceding syntax summary) it appears as an atomic step.
        A pipeline <emphasis>declaration</emphasis> may contain a
        subpipeline, but the invocation of that pipeline is atomic and
        does not contain a subpipeline.</para>
      </note>
      <para>Steps have “ports” into which inputs and outputs are connected. Each step has a number
        of input ports and a number of output ports; a step can have zero input ports and/or zero
        output ports. (All steps have an implicit output port for reporting errors that
          <rfc2119>must not</rfc2119> be declared.) The names of all ports on each step must be
        unique on that step (you can't have two input ports named “source”, nor can you have an
        input port named “schema” and an output port named “schema”). </para>
      <para>A Step may have zero or more <link linkend="options">options</link>, all with unique
        names.</para>
      <para>All of the different instances of steps (atomic or compound) in a pipeline can be
        distinguished from one another by name. If the pipeline author does not provide a name for a
        step, a default name is <link linkend="step-names">manufactured automatically</link>.</para>
      <section xml:id="step-names">
        <title>Step names</title>
        <para>The <tag class="attribute">name</tag> attribute on any step can be used to give it a
          name. <assert xml:id="unique-names">The name <rfc2119>must</rfc2119> be unique within its scope, see <xref linkend="scoping"/>.</assert></para>
        <para>If the pipeline author does not provide an explicit name, the processor manufactures a
          default name. All default names are of the form
            “<literal>!1</literal><replaceable>.m</replaceable><replaceable>.n</replaceable>…” where
            “<replaceable>m</replaceable>” is the position (in the sense of counting sibling
          elements) of the step's highest ancestor element within the pipeline document or library
          which contains it, “<replaceable>n</replaceable>” is the position of the next-highest
          ancestor, and so on, including both steps and non-step wrappers. For example, consider the
          pipeline in <xref linkend="ex2"/>. The <tag>p:declare-step</tag> step has no name, so it gets
          the default name “<literal>!1</literal>”; the <tag>p:choose</tag> gets the name
            “<literal>!1.1</literal>”; the first <tag>p:when</tag> gets the name
            “<literal>!1.1.1</literal>”; the <tag>p:otherwise</tag> gets the name
            “<literal>!1.1.2</literal>”, etc. If the <tag>p:choose</tag> had a name, it would
          not have received a default name, but it would still have been counted and its first
            <tag>p:when</tag> would still have been “<literal>!1.1.1</literal>”.</para>
        <para>Providing every step in the pipeline with an interoperable name has several
          benefits:</para>
        <orderedlist>
          <listitem>
            <para>It allows implementers to refer to all steps in an interoperable fashion, for
              example, in error messages.</para>
          </listitem>
          <listitem>
            <para>Pragmatically, we say that <glossterm>readable ports</glossterm> are identified by
              a step name/port name pair. By manufacturing names for otherwise anonymous steps, we
              include implicit connections without changing our model.</para>
          </listitem>
        </orderedlist>
        <para>In a valid pipeline that runs successfully to completion, the manufactured names
          aren't visible (except perhaps in debugging or logging output).</para>
        <note xml:id="def-name-ncname">
          <para>The format for defaulted names does not conform to the requirements of an <link
              xlink:href="http://www.w3.org/TR/xml-names/#NT-NCName">NCName</link>. This is an
            explicit design decision; it prevents pipelines from using the defaulted names on
              <tag>p:pipe</tag> elements. If an explicit connection is required, the pipeline author
            must provide an explicit name for the step.</para>
        </note>
      </section>
    </section>
  </section>

<section xml:id="documents">
<title>Documents</title>

<para>An XProc pipeline processes documents.
<termdef xml:id="dt-document">A <firstterm>document</firstterm> is a
<glossterm>representation</glossterm> and its
<glossterm>document properties</glossterm>.</termdef>.
<termdef xml:id="dt-representation">A <firstterm>representation</firstterm>
is a data structure used by an XProc processor to refer to the actual
document content.</termdef></para>

<para>Documents have associated with them a set of properties. The properties
are key/value pairs. <termdef xml:id="dt-document-properties">The
<firstterm>document properties</firstterm> are exposed to the XProc
pipeline as a map (<code>map(xs:QName, item())</code>).</termdef></para>

<para>Several property keys are defined by this specification:</para>

<variablelist>
<varlistentry>
<term><code>content-type</code></term>
<listitem>
<para>The value of the “<code>content-type</code>”
key identifies the media type (<biblioref linkend="rfc2046"/>) of the
representation. The “<code>content-type</code>” <rfc2119>must</rfc2119>
always be present. The processor is responsible for assuring that the
<code>content-type</code> property matches the content type of each document
produced on every output port.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>base-uri</code></term>
<listitem>
<para>The value of the “<code>base-uri</code>” key identifies the
base URI of the document. If no such key is present, the document has
no base URI. The processor is responsible for assuring that the <code>base-uri</code>
property matches the base URI of each document produced on every output port.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Other property keys may also be present, including user
defined properties.</para>

<section xml:id="document-types">
<title>Document Types</title>

<para>From an XProc perspective, there are two kinds of documents: XML
documents and non-XML documents. Non-XML documents can be further subdivided
into text documents and binary documents. Text documents are called
out specially because they can be easily represented inline within a
pipeline.</para>

<section xml:id="xml-documents">
<title>XML Documents</title>

<para>Representations of XML documents are instances of
the <biblioref linkend="xpath-datamodel"/>. They are identified by
an XML media type. <termdef xml:id="dt-XML-media-type">The
“<literal>application/xml</literal>” and “<literal>text/xml</literal>
media types and all media types of the form
“<literal>application/<replaceable>something</replaceable>+xml</literal>”
are <firstterm baseform="XML media type">XML media types</firstterm>.
</termdef>
</para>

<para>In order to be consistent with the XPath data model, all general
and external parsed entities <rfc2119>must</rfc2119> be fully expanded
in XML documents; they <rfc2119>must not</rfc2119> contain any representation of
<biblioref linkend="xml-infoset-rec"/>
<literal role="infoset-property">unexpanded entity reference
information items</literal>.</para>

<para><impl>The level of support for typed values in XDM instances
in an XProc pipeline is <glossterm>implementation-defined</glossterm>.</impl>
</para>
</section>

<section xml:id="text-documents">
<title>Text Documents</title>

<para>Text documents are non-XML documents. A text document is represented by
a single text node wrapped in a document node as instances of the
<biblioref linkend="xpath-datamodel"/>.</para>

<para>Text documents are identified by a text media type.
<termdef xml:id="dt-text-media-type">Media types of the form
“<literal>text/<replaceable>something</replaceable></literal>”
are <firstterm baseform="text media type">text media types</firstterm> with the
exception of “<literal>text/xml</literal>” which is an XML media type.
</termdef>
</para>
</section>

<section xml:id="non-xml-documents">
<title>Non-XML Documents</title>

<para><impl>Representations of non-XML documents are
are <glossterm>implementation-dependent</glossterm>.</impl>
They are identified by media types that are not
<glossterm baseform="XML media type">XML media types</glossterm>.
</para>

<para>Implementors are free to optimize by storing them in convenient
formats, caching them on disk, etc.</para>

</section>
</section>

<section xml:id="media-type-match">
<title>Matching Media Types</title>

<para feature="media-type-match">When an input document arrives on a
port, it must be match at least one of the media types specified on
that input port. It matches if the port specifies no media types or if
the media type of the input document is compatible with at least one
of the specified media types. Two media types are compatible if:</para>

<orderedlist>
<listitem>
<para feature="xml-media-types-compatible">They are both <glossterm
baseform="XML-media-type">XML media types</glossterm>
(<code>application/xml</code> is compatible with <code>image/svg+xml</code>),
</para>
</listitem>
<listitem>
<para feature="text-media-types-compatible">they are both <glossterm
baseform="text-media-type">text media types</glossterm>
(<code>text/plain</code> is compatible with <code>text/csv</code>),
</para>
</listitem>
<listitem>
<para feature="other-media-types-equal">or they are equal when
compared with the Unicode codepoint collation
(<code>image/png</code> is compatible with <code>image/png</code>).</para>
</listitem>
<listitem>
<para feature="impl-media-type-equal"><impl>It is
<glossterm>implementation-defined</glossterm> what additional
content types are considered equal.</impl>
</para>
</listitem>
</orderedlist>

<para><error code="D0038">It is a <glossterm>dynamic error</glossterm>
if an input document arrives on a port and it does not match the
allowed media types.</error></para>

</section>

</section>

<section xml:id="input-output">
<title>Inputs and Outputs</title>

<para>Most steps have one or more inputs and one
or more outputs. <xref linkend="fig-atomic-step"/> illustrates
symbolically an <glossterm>atomic step</glossterm> with two inputs and
one output.</para>

      <figure xml:id="fig-atomic-step">
        <title>An atomic step</title>
        <mediaobject>
          <alt>An atomic step with two inputs and one output</alt>
          <imageobject>
            <imagedata fileref="graphics/atomic-step.png"/>
          </imageobject>
        </mediaobject>
      </figure>

<para>All atomic steps are defined by a <tag>p:declare-step</tag>. The
declaration of an atomic step type defines the input ports, output
ports, and options of all steps of that type. For example, every
<tag>p:validate-with-xml-schema</tag> step has two inputs, named
“<literal>source</literal>” and “<literal>schema</literal>”, one
output named “<literal>result</literal>”, and the same set of options.
</para>
      <para>Like atomic steps, top level, user-defined pipelines also have declarations. The
        situation is slightly more complicated for the other compound steps because they don't have
        separate declarations; each instance of the compound step serves as its own declaration. On
        these compound steps, the number and names of the outputs can be different on each instance
        of the step.</para>
      <para><xref linkend="fig-compound-step"/> illustrates symbolically a compound step with one
        subpipeline and one output. As you can see from the diagram, the output from the compound
        step comes from one of the outputs of the subpipeline within the step.</para>
      <figure xml:id="fig-compound-step">
        <title>A compound step</title>
        <mediaobject>
          <alt>A compound step with two inputs and one output</alt>
          <imageobject>
            <imagedata fileref="graphics/compound-step.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para><termdef xml:id="dt-declared-inputs">The input ports declared on a step are its
            <firstterm>declared inputs</firstterm>.</termdef>
        <termdef xml:id="dt-declared-outputs">The output ports declared on a step are its
            <firstterm>declared outputs</firstterm>.</termdef> When a step is used in a pipeline, it
        is connected to other steps through its inputs and outputs. </para>

         <para>When a step is used, all of the <glossterm>declared inputs</glossterm> of the step
               <rfc2119>must</rfc2119> be connected. Each connection binds the input to a data
            source that may be from a variety of sources (see <xref linkend="connections"/>). <error
               code="S0003">It is a <glossterm>static error</glossterm> if any declared input is not
               connected.</error></para>
         <para>The <glossterm>declared outputs</glossterm> of a step are only connected when they
            are used by another step or expression.  Usually, this connection is made in reverse
            where the use of the output describes the connection (see <xref linkend="connections"
            />).</para>

<para>The <glossterm>primary output port</glossterm> of a step
<rfc2119>must</rfc2119> be connected to some consumer. <error
code="S0005">It is a <glossterm>static error</glossterm> if the
primary output port of any step is not connected.</error> Other
outputs can remain unconnected. Any documents produced on an
unconnected output port are discarded.</para>

<para>Primary input and primary output ports may be implicitly
connected if no explicit connection is given, see <xref
linkend="primary-input-output"/>.</para>

<para>Output ports on compound steps have a dual nature: from the
perspective of the compound step's siblings, its outputs are just
ordinary outputs and can be connected the sames other
<glossterm>declared outputs</glossterm>. From the perspective of the
subpipeline inside the compound step, they are inputs into which
something may be connected to produce the output of the compound
step.</para>

<para>Within a compound step, the <glossterm>declared
outputs</glossterm> of the step can be connected to any of the various
available outputs of <glossterm baseform="contained steps">contained
steps</glossterm> as well as other data sources
(see <xref linkend="connections"/>). If a (non-primary)
output port of a compound step is left unconnected, it produces an
empty sequence of documents from the perspective of its
siblings.</para>

      <para>Each input and output on a step is declared to accept or produce either a single
        document or a sequence of documents. It <emphasis>is not</emphasis> an error to connect a
        port that is declared to produce a sequence of documents to a port that is declared to
        accept only a single document. It is, however, an error if the former step actually produces
        more than one document at run time.</para>
      <para>It is also not an error to connect a port that is declared to produce a single document
        to a port that is declared to accept a sequence. A single document is the same as a sequence
        of one document.</para>
      <para>An output port may have more than one connection: it may be connected to more than one
        input port, more than one of its container's output ports, or both. At runtime this will
        result in distinct copies of the output. </para>
      <para><termdef xml:id="dt-signature">The <firstterm>signature</firstterm> of a step is the set
          of inputs, outputs, and options that it is declared to accept.</termdef> The declaration
        for a step provides a fixed signature which all its instances share.</para>
      <para><termdef xml:id="dt-matches">A step <firstterm>matches</firstterm> its signature if and
          only if it specifies an input for each declared input, it specifies no inputs that are not
          declared, it specifies an option for each option that is declared to be required, and it
          specifies no options that are not declared.</termdef> In other words, every input and
        required option <rfc2119>must</rfc2119> be specified and only inputs and options that are
        declared <rfc2119>may</rfc2119> be specified. Options that aren't required do not have to be
        specified.</para>
      <para>Steps <rfc2119>may</rfc2119> also produce error, warning, and informative messages.
        These messages are captured and provided on the <port>error</port> port inside of a
          <tag>p:catch</tag>. <impl>Outside of a <link linkend="p.try">try/catch</link>, the
          disposition of error messages is <glossterm>implementation-dependent</glossterm></impl>. </para>

<para><impl>How inputs are connected to documents outside the pipeline
is <glossterm>implementation-defined</glossterm>.</impl></para>

<para><impl>How pipeline outputs are connected to documents outside
the pipeline is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para>Input ports <rfc2119>may</rfc2119> specify a content type, or list of
content types, that they accept. Input documents must
<link linkend="media-type-match">match</link> the specified content types.</para>

<section xml:id="external-docs">
        <title>External Documents</title>
        <para>It's common for some of the documents used in processing a pipeline to be read from
          URIs. Sometimes this occurs directly, for example with a <tag>p:document</tag> element.
          Sometimes it occurs indirectly, for example if an implementation allows the URI of a
          pipeline input to be specified on the command line or if an <tag>p:xslt</tag> step
          encounters an <tag>xsl:import</tag> in the stylesheet that it is processing. It's also
          common for some of the documents produced in processing a pipeline to be written to
          locations which have, or at least could have, a URI. </para>
        <para>The process of dereferencing a URI to retrieve a document is often more interesting
          than it seems at first. On the web, it may involve caches, proxies, and various forms of
          indirection. <impl>Resolving a URI locally may involve resolvers of various sorts and
            possibly appeal to <glossterm>implementation-dependent</glossterm> mechanisms such as
            catalog files.</impl></para>
        <para>In XProc, the situation is made even more interesting by the fact that many
          intermediate results produced by steps in the pipeline have base URIs. <impl>Whether (and
            when and how) or not the intermediate results that pass between steps are ever written
            to a filesystem is <glossterm>implementation-dependent</glossterm>.</impl></para>
        <para><impl>In Version 3.0 of XProc, how (or if) implementers provide local resolution
            mechanisms and how (or if) they provide access to intermediate results by URI is
              <glossterm>implementation-defined</glossterm>.</impl>
        </para>
        <para>Version 3.0 of XProc does not require implementations to guarantee that multiple
          attempts to dereference the same URI always produce consistent results.</para>
        <note xml:id="note-unsatisfying">
          <para>On the one hand, this is a somewhat unsatisfying state of affairs because it leaves
            room for interoperability problems. On the other, it is not expected to cause such
            problems very often in practice. </para>
          <para>If these problems arise in practice, implementers are encouraged to use the existing
            extension mechanisms to give users the control needed to circumvent them. Should such
            mechanisms become widespread, a standard mechanism could be added in some future version
            of the language.</para>
        </note>
      </section>
    </section>
    <section xml:id="primary-input-output">
      <title>Primary Inputs and Outputs</title>
      <para>As a convenience for pipeline authors, each step may have one input port designated as
        the primary input port and one output port designated as the primary output port.</para>
      <para><termdef xml:id="dt-primary-input-port">If a step has a document input port which is
          explicitly marked “<code>primary='true'</code>”, or if it has exactly one document input
          port and that port is <emphasis>not</emphasis> explicitly marked
            “<code>primary='false'</code>”, then that input port is the <firstterm>primary input
            port</firstterm> of the step.</termdef> If a step has a single input port and that port
        is explicitly marked “<code>primary='false'</code>”, or if a step has more than one input
        port and none is explicitly marked as the primary, then the primary input port of that step
        is undefined. A step can have at most one primary input port.</para>
      <para><termdef xml:id="dt-primary-output-port">If a step has a document output port which is
          explicitly marked “<code>primary='true'</code>”, or if it has exactly one document output
          port and that port is <emphasis>not</emphasis> explicitly marked
            “<code>primary='false'</code>”, then that output port is the <firstterm>primary output
            port</firstterm> of the step.</termdef> If a step has a single output port and that port
        is explicitly marked “<code>primary='false'</code>”, or if a step has more than one output
        port and none is explicitly marked as the primary, then the primary output port of that step
        is undefined. A step can have at most one primary output port.</para>
      <para>The special significance of primary input and output ports is that they are connected
        automatically by the processor if no explicit connection is given. Generally speaking, if
        two steps appear sequentially in a subpipeline, then the primary output of the first step
        will automatically be connected to the primary input of the second.</para>
      <para>Additionally, if a compound step has no declared outputs and the <glossterm>last
          step</glossterm> in its subpipeline has an unconnected primary output, then an implicit
        primary output port will be added to the compound step (and consequently the last step's
        primary output will be connected to it). This implicit output port has no name. It inherits
        the <tag class="attribute">sequence</tag> property of the port connected to it. This rule
        does not apply to <tag>p:declare-step</tag>; step declarations must provide explicit names
        for all of their outputs.</para>
    </section>
    <section xml:id="connections">
      <title>Connections</title>
      <para>Steps are connected together by their input ports and output ports. <error code="S0001"
          >It is a <glossterm>static error</glossterm> if there are any loops in the connections
          between steps: no step can be connected to itself nor can there be any sequence of
          connections through other steps that leads back to itself.</error></para>

         <para><termdef xml:id="dt-connection">A <firstterm>connection</firstterm> associates an
               input or output port with some data source.</termdef>  Such a connection represents a
            binding between the port's name and the data source as described by various locations,
            inline expressions, or readable ports.</para>
         <para>An input port can be connected to:</para>
         <itemizedlist>
            <listitem>
               <para>The output port of some other step.</para>
            </listitem>
            <listitem>
               <para>A fixed, inline document or sequence of documents.</para>
            </listitem>
            <listitem>
               <para>A document read from a URI.</para>
            </listitem>
            <listitem>
               <para>One of the inputs declared on one of its
                  <glossterm>ancestors</glossterm>.</para>
            </listitem>
            <listitem>
               <para>A special port provided by an ancestor compound step, for example,
                     “<port>current</port>” in a <tag>p:for-each</tag> or <tag>p:viewport</tag>.
               </para>
            </listitem>
         </itemizedlist>
         <para>When an input accepts a sequence of documents, the documents can come from any
            combination of these locations.</para>
         <para>In contrast, output ports are connected when they are referenced by another input
            port, <glossterm baseform="declared outputs">declared output</glossterm> or other
            expression and may be connected to:</para>

<itemizedlist>
<listitem>
  <para>The input port or input context of some other step.</para>
</listitem>
<listitem>
  <para>An option assigned with <tag>p:with-option</tag> or a
<tag>p:variable</tag> in a compound step.</para>
</listitem>
<listitem>
  <para>One of the outputs declared on its container. </para>
</listitem>
</itemizedlist>

         <para>As with an input, the output can be a sequence of documents constructed from any
            combination of the above.</para>
         <para>An output port may have multiple consumers and this results in multiple connections.
            A subset of these connections are the input port connections for various sibling or
            contained steps.</para>
         <para>Within the context of a <glossterm>compound step</glossterm>, the <glossterm>declared
               outputs</glossterm> of the compound step must describe their connections.  The set of
            possibilities for this connection is exactly the same set as for any other input port
            within the current <glossterm>environment</glossterm>.</para>


<section xml:id="depends">
<title>Additional dependent connections</title>

<para>The connections between input and output ports form the basis
of the pipeline graph. Any step that depends on the output of another step
is guaranteed to be run after the step on which it depends.</para>

<para>However, it is sometimes the case that one step depends on
another in ways that are not apparent in the input and output
connections. Consider, for example, a pipeline that interacts with two
different web services. It may very well be the case that one web
service has to run before the other, even though the latter does not
consume any output from the former.</para>

<para>In these cases, the pipeline author can add an explicit
dependency with the <tag class="attribute">depends</tag> attribute.
The <tag class="attribute">depends</tag> attribute is allowed on any
step element. The value of the attribute is a space separated list of step names.
<error code="S0073">It is a <glossterm>static error</glossterm> if any
specified name is not the name of an in-scope step.</error>
</para>

<para>The connections specified by the
<tag class="attribute">depends</tag> attribute taken together with
the input and output connections must not form a cycle in the graph.
</para>

</section>



      <section xml:id="namespace-fixup">
        <title>Namespace Fixup on XML Outputs</title>
        <para>XProc processors are expected, and sometimes required, to perform <glossterm>namespace
            fixup</glossterm> on XML outputs. Unless the semantics of a step explicitly says otherwise:</para>
        <itemizedlist>
          <listitem>
            <para>The in-scope namespaces associated with a node (even those that are inherited from
              namespace bindings that appear among its ancestors in the document in which it appears
              initially) are assumed to travel with that node.</para>
          </listitem>
          <listitem>
            <para>Changes to one part of a tree (wrapping or unwrapping a node or renaming an
              element, for example) do not change the in-scope namespaces associated with the
              descendants of the node so changed.</para>
          </listitem>
        </itemizedlist>
        <para>As a result, some steps can produce XML documents which have no direct serialization
          (because they include nodes with conflicting or missing namespace declarations, for
          example). <termdef xml:id="dt-namespace-fixup">To produce a serializable
              <glossterm>XML</glossterm> document, the XProc processor must sometimes add additional
            namespace nodes, perhaps even renaming prefixes, to satisfy the constraints of
              <glossterm>Namespaces in XML</glossterm>. This process is referred to as
              <firstterm>namespace fixup</firstterm>.</termdef>
        </para>
        <para>Implementors are encouraged to perform <glossterm>namespace fixup</glossterm> before
          passing documents between steps, but they are not required to do so. Conversely, an
          implementation which <emphasis>does</emphasis> serialize between steps and therefore must
          perform such fixups, or reject documents that cannot be serialized, is also
          conformant.</para>
        <para>Except where the semantics of a step explicitly require changes, processors are
          required to preserve the information in the documents and fragments they manipulate. In
          particular, the information corresponding to the <biblioref linkend="xml-infoset-rec"/>
          properties <literal role="infoset-property">attributes</literal>, <literal
            role="infoset-property">base URI</literal>, <literal role="infoset-property"
            >children</literal>, <literal role="infoset-property">local name</literal>, <literal
            role="infoset-property">namespace name</literal>, <literal role="infoset-property"
            >normalized value</literal>, <literal role="infoset-property">owner</literal>, and
            <literal role="infoset-property">parent</literal>
          <rfc2119>must</rfc2119> be preserved.</para>
        <para>The information corresponding to <literal role="infoset-property">prefix</literal>,
            <literal role="infoset-property">in-scope namespaces</literal>, <literal
            role="infoset-property">namespace attributes</literal>, and <literal
            role="infoset-property">attribute type</literal>
          <rfc2119>should</rfc2119> be preserved, with changes to the first three only as required
          for <glossterm>namespace fixup</glossterm>. In particular, processors are encouraged to
          take account of prefix information in creating new namespace bindings, to minimize
          negative impact on prefixed names in content.</para>
        <para><impl>Except for cases which are specifically called out in <biblioref
              linkend="std-components"/>, the extent to which namespace fixup, and other checks for
            outputs which cannot be serialized, are performed on intermediate outputs is
              <glossterm>implementation-defined</glossterm>.</impl></para>
        <para>Whenever an implementation serializes pipeline contents, for example for pipeline
          outputs, logging, or as part of steps such as <tag>p:store</tag> or
            <tag>p:http-request</tag>, it is a dynamic error if
          that serialization could not be done so as to produce a document which is both well-formed
          and namespace-well-formed, as specified in <glossterm>XML</glossterm> and
            <glossterm>Namespaces in XML</glossterm>, regardless of what serialization method, if
          any, is called for.</para>
      </section>
    </section>

<section xml:id="initiating">
<title>Initiating a pipeline</title>

<para>Initiating a pipeline necessarily involves two activities:
static analysis and dynamic evaluation.
<termdef xml:id="dt-static-analysis"><firstterm baseform="static analysis">Static
analysis</firstterm>
consists of
those tasks that can be performed by inspection of the pipeline
alone, including the binding of
<link linkend="statics">static options and variables</link>,
computation of serialization properties and document-properties,
<link linkend="use-when">evaluation of <code>use-when</code> expressions</link>,
and detecting static errors.</termdef>
<termdef xml:id="dt-dynamic-evaluation"><firstterm baseform="dynamic evaluation">Dynamic
evaluation</firstterm> consists of tasks which, in general,
cannot be performed out until a source document is available.</termdef></para>

<para><impl>There may be an <glossterm>implementation-defined</glossterm>
mechanism for providing default values for static
<tag>p:option</tag>s. If such a mechanism exists, the values provided
must match the sequence type declared for the option, if such a
declaration exists.</impl></para>

<section xml:id="static-expressions">
<title>Evaluating expressions during static analysis</title>

<para>Several kinds of expressions are evaluated during static analysis:</para>

<orderedlist>
<listitem>
<para>The <tag class="attribute">select</tag> expressions on static
options and variables.</para>
</listitem>
<listitem>
<para>
<link linkend="value-templates">Value templates</link> in the attributes
or descendants of <tag>p:input</tag> and <tag>p:output</tag>.
</para>
</listitem>
<listitem>
<para>Expressions in <tag class="attribute">use-when</tag> attributes used
for <link linkend="use-when">conditional element exclusion</link>.</para>
</listitem>
</orderedlist>

<para>For the purposes of evaluating a these expressions,
the context node, position, and size are all undefined. The
<glossterm>in-scope bindings</glossterm> are limited to the lexically preceding,
statically declared options and variables. There are no available collections
except the default collection on <tag>p:variable</tag>s which explicitly create
a collection.</para>

<para>The results of XProc extension functions may differ during static analysis,
as described in the description of each function.</para>

</section>

<section xml:id="dynamic-evaluation">
<title>Dynamic evaluation of the pipeline</title>

<para>FIXME: write an introduction.</para>

    <section xml:id="environment">
      <title>Environment</title>
      <para><termdef xml:id="dt-environment">The <firstterm>environment</firstterm> is a
          context-dependent collection of information available within subpipelines.</termdef> Most
        of the information in the environment is static and can be computed for each subpipeline
        before evaluation of the pipeline as a whole begins. The in-scope bindings have to be
        calculated as the pipeline is being evaluated.</para>
      <para>The environment consists of:</para>
      <orderedlist>
        <listitem>
          <para>A set of readable ports. <termdef xml:id="dt-readable-ports">The <firstterm>readable
                ports</firstterm> are a set of step name/port name pairs.</termdef> Inputs and
            outputs can only be connected to readable ports.</para>
        </listitem>
        <listitem>
          <para>A default readable port. <termdef xml:id="dt-default-readable-port">The
                <firstterm>default readable port</firstterm>, which may be undefined, is a specific
              step name/port name pair from the set of readable ports.</termdef></para>
        </listitem>
        <listitem>
          <para>A set of in-scope bindings. <termdef xml:id="dt-in-scope-bindings">The
                <firstterm>in-scope bindings</firstterm> are a set of name-value pairs, based on
                <glossterm>option</glossterm> and <glossterm>variable</glossterm>
              bindings.</termdef></para>
        </listitem>
      </orderedlist>
      <para><termdef xml:id="dt-empty-environment">The <firstterm>empty environment</firstterm>
          contains no readable ports, an undefined default readable port and no in-scope
          bindings.</termdef>
      </para>
      <para>Unless otherwise specified, the environment of a <glossterm baseform="contained steps"
          >contained step</glossterm> is its <glossterm>inherited environment</glossterm>. <termdef
          xml:id="dt-inherited-environment">The <firstterm>inherited environment</firstterm> of a
            <glossterm baseform="contained steps">contained step</glossterm> is an environment that
          is the same as the environment of its <glossterm>container</glossterm> with the <link
            linkend="dt-standard-modifications">standard modifications</link>. </termdef></para>
      <para>The <phrase xml:id="dt-standard-modifications">standard modifications</phrase> made to
        an inherited environment are:</para>
      <orderedlist>
        <listitem>
          <para>The declared inputs of the container are added to the <glossterm>readable
              ports</glossterm>.</para>
          <para>In other words, contained steps can see the inputs to their container.</para>
        </listitem>
        <listitem>
          <para>The union of all the declared outputs of all of the step's sibling steps are added
            to the <glossterm>readable ports</glossterm>.</para>
          <!--
          <para>The union of all the declared outputs of all of the containers's
              <glossterm>contained steps</glossterm> are added to the <glossterm>readable
              ports</glossterm>.</para>
              -->
          <para>In other words, sibling steps can see each other's outputs in addition to the
            outputs visible to their container.</para>
        </listitem>
        <listitem>
          <para>If there is a preceding sibling step element:</para>
          <itemizedlist>
            <listitem>
              <para>If that preceding sibling has a <glossterm>primary output port</glossterm>, then
                that output port becomes the <glossterm>default readable port</glossterm>.</para>
            </listitem>
            <listitem>
              <para>Otherwise, the <glossterm>default readable port</glossterm> is undefined.</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>If there <emphasis>is not</emphasis> a preceding sibling step element: </para>
          <itemizedlist>
            <listitem>
              <para>If the container has a <glossterm>primary input port</glossterm>, the
                  <glossterm>default readable port</glossterm> is that <glossterm>primary input
                  port</glossterm>.</para>
            </listitem>
            <listitem>
              <para>Otherwise, the default readable port is unchanged.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>

<para>A step with no parent inherits the <glossterm>empty
environment</glossterm>. </para>

<para>Variables and options are lexically scoped. The environment of a step
also includes the <glossterm>in-scope bindings</glossterm> for all of
the variables and options “visible” from its lexical position. Variables
and options can shadow each other, only the lexically most recent bindings
are visible.</para>

         <section xml:id="initial-environment">
            <title>Initial Environment</title>
            <para>When a pipeline is invoked by a processor, an initial environment is constructed.
                  <termdef xml:id="dt-initial-environment">An <firstterm>initial
                     environment</firstterm> is a <glossterm>connection</glossterm> for each of the
                     <glossterm>readable ports</glossterm> and a set of option bindings used to
                  construct the <glossterm>in-scope bindings</glossterm>.</termdef> This environment
               is used in place of the <glossterm>empty environment</glossterm> that might have
               otherwise been provided.</para>
            <para>An invoked pipeline's <glossterm>initial environment</glossterm> is different from
               the environment constructed for the sub-pipeline of a declared step.  The initial
               environment is constructed for the initial invocation of the pipeline by the
               processor by the outside application.  Steps that are subsequently invoked construct
               an environment as specified in <xref linkend="declare-pipelines"/>.</para>
            <para>When constructing an <glossterm>initial environment</glossterm>, an implementation
               is free to provide any set of mechanisms to construct connections for the input ports
               of the invoked step. These mechanisms are not limited to the variety of mechnisms
               described within this specification. Any extensions are implementation
               defined.</para>
            <para>The set of <glossterm>in-scope bindings</glossterm> are constructed from a set of
               option name/value pairs.  Each option value can be a simple string value, a specific
               data type instance (e.g. xs:dateTime), or a more complex value like a map item.  How
               these values are specified is implementation defined.</para>
         </section>

    </section>

    <section xml:id="xpath-context">
      <title>XPath in XProc</title>

<para>XProc uses XPath 3.1 as an expression language. XPath expressions
are evaluated by the XProc processor in several places: on compound
steps, to compute the default values of options and the values of
variables; on atomic steps, to compute the actual values of options.
</para>

      <para>XPath expressions are also passed to some steps. These expressions are evaluated by the
        implementations of the individual steps.</para>
      <para>This distinction can be seen in the following example:</para>
      <programlisting language="xml"><xi:include href="../../../build/examples/xpathcontext.txt" parse="text"/></programlisting>
      <para>The select expression on the variable “<varname>home</varname>” is evaluated by the
        XProc processor. The value of the variable is “<uri>http://example.com/docs</uri>”.</para>
      <para>The <option>href</option> option of the <tag>p:load</tag> step is evaluated by the XProc
        processor. The actual <literal>href</literal> option received by the step is simply the
        string literal “<uri>http://example.com/docs/document.xml</uri>”. (The select expression on
        the <literal>source</literal> input of the <tag>p:split-sequence</tag> step is also
        evaluated by the XProc processor.) </para>
      <para>The XPath expression “<literal>@role='chapter'</literal>” is passed literally to the
          <literal>test</literal> option on the <tag>p:split-sequence</tag> step. That's because the
        nature of the <tag>p:split-sequence</tag> is that <emphasis>it evaluates</emphasis> the
        expression. Only some options on some steps expect XPath expressions. </para>
      <para>The XProc processor evaluates all of the XPath expressions in <tag class="attribute"
          >select</tag> attributes on variables, options, and inputs, in <tag
          class="attribute">match</tag> attributes on <tag>p:viewport</tag>, and in <tag
          class="attribute">test</tag> attributes on <tag>p:when</tag> steps.</para>

        <section xml:id="xproc-xpath-context-31">
          <title>Processor XPath Context</title>
<para>When the XProc processor evaluates an XPath expression using
XPath, unless otherwise indicated by a particular step, it does so
with the following static context:</para>
          <variablelist>
            <varlistentry>
              <term>XPath 1.0 compatibility mode</term>
              <listitem>
                <para>False</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known namespaces</term>
              <listitem>
                <para>The namespace declarations in-scope for the containing element. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default element/type namespace</term>
              <listitem>
                <para>The null namespace.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default function namespace</term>
              <listitem>
                <para>The default function namespace is <literal>http://www.w3.org/2005/xpath-functions</literal>, as defined in
                  <biblioref linkend="xpath31-functions"/>. Function names that do
                  not contain a colon always refer to the default function namespace, any in-scope
                  binding for the default namespace <emphasis>does not</emphasis> apply. This
                  specification does not provide a mechanism to override the default function
                  namespace.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>In-scope schema definitions</term>
              <listitem>
                <para>A basic XPath 3.1 XProc processor includes the following named type
                  definitions in its in-scope schema definitions:</para>
                <itemizedlist>
                  <listitem>
                    <para>All the primitive atomic types defined in <biblioref linkend="xmlschema-2"
                      />, with the exception of <literal>xs:NOTATION</literal>. That is:
                        <literal>xs:string</literal>, <literal>xs:boolean</literal>,
                        <literal>xs:decimal</literal>, <literal>xs:double</literal>,
                        <literal>xs:float</literal>, <literal>xs:date</literal>,
                        <literal>xs:time</literal>, <literal>xs:dateTime</literal>,
                        <literal>xs:duration</literal>, <literal>xs:QName</literal>,
                        <literal>xs:anyURI</literal>, <literal>xs:gDay</literal>,
                        <literal>xs:gMonthDay</literal>, <literal>xs:gMonth</literal>,
                        <literal>xs:gYearMonth</literal>, <literal>xs:gYear</literal>,
                        <literal>xs:base64Binary</literal>, and <literal>xs:hexBinary</literal>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>The derived atomic type <literal>xs:integer</literal> defined in
                        <biblioref linkend="xmlschema-2"/>. </para>
                  </listitem>
                  <listitem>
                    <para>The types <literal>xs:anyType</literal>,
                        <literal>xs:anySimpleType</literal>,
                      <literal>xs:yearMonthDuration</literal>,
                      <literal>xs:dayTimeDuration</literal>, <literal>xs:anyAtomicType</literal>,
                        <literal>xs:untyped</literal>, and <literal>xs:untypedAtomic</literal>
                      defined in <biblioref linkend="xpath-datamodel"/>. </para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>In-scope variables</term>
              <listitem>
<para>Variables and options are lexically scoped. The union of the
options and the variables that
are “visible” from the step's lexical position are available
as variable bindings to the XPath processor.
Variables and options can shadow each other, only the lexically most
recent bindings are visible.</para>

              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Context item static type</term>
              <listitem>
                <para>Document.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Function signatures</term>
              <listitem>
                <para>The signatures of the <biblioref linkend="xpath31-functions"/> in namespaces <literal>http://www.w3.org/2005/xpath-functions</literal>,
                  <literal>http://www.w3.org/2005/xpath-functions/math</literal>, <literal>http://www.w3.org/2005/xpath-functions/map</literal> and
                  <literal>http://www.w3.org/2005/xpath-functions/array</literal>. Additionally the function signatures defined in <xref
                    linkend="xpath-extension-functions"/>. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known collations</term>
              <listitem>
                <para>Implementation-defined but <rfc2119>must</rfc2119> include the Unicode code
                  point collation. <impl>The version of Unicode supported is
                      <glossterm>implementation-defined</glossterm>, but it is recommended that the
                    most recent version of Unicode be used.</impl>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default collation</term>
              <listitem>
                <para>Unicode code point collation.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Static base URI</term>
              <listitem>
                <para>The base URI of the element on which the expression occurs.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known documents</term>
              <listitem>
                <para>None.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known collections</term>
              <listitem>
                <para>None.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known default collection type</term>
              <listitem>
                <para><literal>item()*</literal></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known decimal formats</term>
              <listitem>
                <para>None.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>And the following dynamic context:</para>
          <variablelist>
            <varlistentry>
              <term>context item</term>
              <listitem>
<para>The context item. The context item is either specified with a
<glossterm>connection</glossterm> or is taken from the
<glossterm>default readable port</glossterm>. <error code="D0008">It
is a <glossterm>dynamic error</glossterm> if a sequence of items
appears where an item to be used as the context item is
expected.</error>
</para>

<para>The context item used for an XML, text, or JSON document is
the XDM representation of that item.
<impl>The context item used for binary documents is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para>If there is no explicit connection and there is no default
readable port then the context node is undefined.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>context position and context size</term>
              <listitem>
                <para>The context position and context size are both “1”. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Variable values</term>
              <listitem>
                <para>The union of the in-scope options and variables are available as variable
                  bindings to the XPath processor. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Named functions</term>
              <listitem>
                <para>The <biblioref linkend="xpath31-functions"/> and the <xref
                    linkend="xpath-extension-functions"/>. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Current dateTime</term>
              <listitem>
                <para><impl>The point in time returned as the current dateTime is
                      <glossterm>implementation-defined</glossterm>.</impl>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Implicit timezone</term>
              <listitem>
                <para><impl>The implicit timezone is
                    <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default language</term>
              <listitem>
                <para><impl>The default language is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default calendar</term>
              <listitem>
                <para><impl>The default calendar is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default place</term>
              <listitem>
                <para><impl>The default place is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available documents</term>
              <listitem>
                <para><impl>The set of available documents (those that may be retrieved with a URI)
                    is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available text resources</term>
              <listitem>
                <para><impl>The set of available text resources (those that may be retrieved with a URI)
                is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available collections</term>
              <listitem>
                <para><impl>The set of available collections is
                      <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default collection</term>
              <listitem>
                <para>None. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available URI collections</term>
              <listitem>
                <para><impl>The set of available URI collections is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default URI collection</term>
              <listitem>
                <para><impl>The default URI collection is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Environment variables</term>
              <listitem>
                <para><impl>The list of available environment variables is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section xml:id="step-xpath-context-31">
          <title>Step XPath Context</title>
          <para>When a step evaluates an XPath expression using XPath 3.1, unless otherwise
            indicated by a particular step, it does so with the following static context:</para>
          <variablelist>
            <varlistentry>
              <term>XPath 1.0 compatibility mode</term>
              <listitem>
                <para>False</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known namespaces</term>
              <listitem>
                <para>The namespace declarations in-scope for the containing element.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default element/type namespace</term>
              <listitem>
                <para>The null namespace.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default function namespace</term>
              <listitem>
                <para>The default function namespace is <literal>http://www.w3.org/2005/xpath-functions</literal>, as defined in
                  <biblioref linkend="xpath31-functions"/>. Function names that do
                  not contain a colon always refer to the default function namespace, any in-scope
                  binding for the default namespace <emphasis>does not</emphasis> apply. This
                  specification does not provide a mechanism to override the default function
                  namespace.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>In-scope schema definitions</term>
              <listitem>
                <para>The same as the <xref linkend="xproc-xpath-context-31"/>. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>In-scope variables</term>
              <listitem>
                <para>None, unless otherwise specified by the step. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Context item static type</term>
              <listitem>
                <para>Document.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Function signatures</term>
              <listitem>
                <para>The signatures of the <biblioref linkend="xpath31-functions"/> in namespaces <literal>http://www.w3.org/2005/xpath-functions</literal>,
                  <literal>http://www.w3.org/2005/xpath-functions/math</literal>, <literal>http://www.w3.org/2005/xpath-functions/map</literal> and
                  <literal>http://www.w3.org/2005/xpath-functions/array</literal>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known collations</term>
              <listitem>
                <para>Implementation-defined but <rfc2119>must</rfc2119> include the Unicode code
                  point collation.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default collation</term>
              <listitem>
                <para>Unicode code point collation.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Static base URI</term>
              <listitem>
                <para>The base URI of the element on which the expression occurs.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known documents</term>
              <listitem>
                <para>None.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known collections</term>
              <listitem>
                <para>None.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known default collection type</term>
              <listitem>
                <para>item()*</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Statically known decimal formats</term>
              <listitem>
                <para>None.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>And the following initial dynamic context:</para>
          <variablelist>
            <varlistentry>
              <term>context item</term>
              <listitem>
                <para>The document node of the document that appears on the primary input of the
                  step, unless otherwise specified by the step.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>context position and context size</term>
              <listitem>
                <para>The context position and context size are both “1”, unless otherwise specified
                  by the step. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Variable values</term>
              <listitem>
                <para>None, unless otherwise specified by the step. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Named functions</term>
              <listitem>
                <para>The <biblioref linkend="xpath31-functions"/>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Current dateTime</term>
              <listitem>
                <para>An implementation-defined point in time. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Implicit timezone</term>
              <listitem>
                <para><impl>The implicit timezone is
                    <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default language</term>
              <listitem>
                <para><impl>The default language is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default calendar</term>
              <listitem>
                <para><impl>The default calendar is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default place</term>
              <listitem>
                <para><impl>The defualt place is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available documents</term>
              <listitem>
                <para><impl>The set of available documents (those that may be retrieved with a URI)
                    is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available text resources</term>
              <listitem>
                <para><impl>The set of available text resources (those that may be retrieved with a URI)
                  is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available collections</term>
              <listitem>
                <para>None. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default collection</term>
              <listitem>
                <para>None. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Available URI collections</term>
              <listitem>
                <para><impl>The set of available URI collections is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Default URI collection</term>
              <listitem>
                <para><impl>The default URI collection is <glossterm>implementation-dependent</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Environment variables</term>
              <listitem>
                <para><impl>The list of available environment variables is <glossterm>implementation-defined</glossterm>.</impl></para>
              </listitem>
            </varlistentry>
          </variablelist>
          <note xml:id="note-amendments">
            <para>Some steps may also provide for implementation-defined or implementation-dependent
              amendments to the contexts. Those amendments are in addition to any specified by
              XProc.</para>
          </note>
        </section>
    </section>

</section>
</section>

    <section xml:id="xpath-extension-functions">
      <title>XPath Extension Functions</title>

      <para>The XProc processor <rfc2119>must</rfc2119> support the
        additional functions described in this section in XPath expressions
        evaluated by the processor. These functions <rfc2119>must not</rfc2119> be supported
        in XPath expressions evaluated by a step.</para>

      <note role="editorial">
        <title>Editorial Note</title>
        <para>Explain the reasons for this restriction: Interoperability of processors, functions are mostly
        pointless in step context, step may defer XPath evalution to third party software (or web services).</para>
      </note>

      <section xml:id="f.system-property">
        <title>System Properties</title>
        <para>XPath expressions within a pipeline document can interrogate the processor for
          information about the current state of the pipeline. Various aspects of the processor are
          exposed through the <function>p:system-property</function> function in the pipeline
          namespace:</para>

<methodsynopsis>
<type>xs:string</type>
<methodname>p:system-property</methodname>
<methodparam><type>xs:string</type><parameter>property</parameter></methodparam>
</methodsynopsis>

<para>The <varname>$property</varname> string <rfc2119>must</rfc2119> have the form of an
<link xlink:href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</link>.
If it is a QName, it is expanded using the namespace declarations in
scope for the expression. <error code="D0015">It is a
<glossterm>dynamic error</glossterm> if a QName is specified and it cannot be
resolved with the in-scope namespace declarations.</error> The
<function>p:system-property</function> function returns the string
representing the value of the system property identified by the EQName.
If there is no such property, the empty string <rfc2119>must</rfc2119>
be returned.</para>

<para>Implementations <rfc2119>must</rfc2119> provide the following
system properties, which are all in the XProc namespace:</para>

        <variablelist>
          <varlistentry>
            <term><varname>p:episode</varname></term>
            <listitem>
              <para>Returns a string which <rfc2119>should</rfc2119> be unique for each invocation
                of the pipeline processor. In other words, if a processor is run several times in
                succession, or if several processors are running simultaneously, each invocation of
                each processor should get a distinct value from <varname>p:episode</varname>.</para>
              <para>The unique identifier must be a valid <link
                  xlink:href="http://www.w3.org/TR/xml/#NT-Name">XML name</link>. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:locale</varname></term>
            <listitem>
              <para>Returns a string which identifies the current environment (usually the OS)
                language. This is useful for, for example, message
                localization purposes. <impl>The exact format of the language string is
                    <glossterm>implementation-defined</glossterm> but <rfc2119>should</rfc2119> be
                  consistent with the <tag class="attribute">xml:lang</tag> attribute.</impl></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:product-name</varname></term>
            <listitem>
              <para>Returns a string containing the name of the implementation, as defined by the
                implementer. This should normally remain constant from one release of the product to
                the next. It should also be constant across platforms in cases where the same source
                code is used to produce compatible products for multiple execution platforms.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:product-version</varname></term>
            <listitem>
              <para>Returns a string identifying the version of the implementation, as defined by
                the implementer. This should normally vary from one release of the product to the
                next, and at the discretion of the implementer it may also vary across different
                execution platforms. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:vendor</varname></term>
            <listitem>
              <para>Returns a string which identifies the vendor of the processor.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:vendor-uri</varname></term>
            <listitem>
              <para>Returns a URI which identifies the vendor of the processor. Often, this is the
                URI of the vendor's web site.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:version</varname></term>
            <listitem>
              <para>Returns the version(s) of XProc implemented by the processor
                as a space-separated list. For example, a processor that
                supports XProc 1.0 would return “1.0”; a processor that supports
                XProc 1.0 and 3.0 would return “1.0 3.0”; a processor that
                supports only XProc 3.0 would return “3.0”.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:xpath-version</varname></term>
            <listitem>
              <para>Returns the version(s) of XPath implemented by the processor
                for evaluating XPath expressions on XProc elements. The result
                is a space-separated list of versions supported. For example, a
                processor that only supports XPath 3.1 would return “3.1”; a
                processor that supports XPath 3.0 and XPath 3.1 could return
                “3.0 3.1”.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><varname>p:psvi-supported</varname></term>
            <listitem>
              <para>Returns true if the implementation supports passing PSVI annotations between
                steps, false otherwise.</para>
            </listitem>
          </varlistentry>
        </variablelist>

<para>Implementations may support additional system properties but such properties
<rfc2119>must</rfc2119> be in a namespace and <rfc2119>must not</rfc2119> be
in the XProc namespace.</para>

<para><impl>The value of the <function>p:system-property</function> function during
static analysis is <glossterm>implementation-defined</glossterm>.</impl></para>

      </section>
      <section xml:id="f.step-available">
        <title>Step Available</title>
        <para>The <function>p:step-available</function> function reports whether or not a particular
          type of step is understood by the processor.</para>

<methodsynopsis>
<type>xs:boolean</type>
<methodname>p:step-available</methodname>
<methodparam><type>xs:string</type><parameter>step-name</parameter></methodparam>
</methodsynopsis>

<para>The <varname>$step-type</varname> string <rfc2119>must</rfc2119>
have the form of an
<link xlink:href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</link>.
If it is a QName, it is expanded using the namespace declarations in
scope for the expression. The
<function>p:step-available</function> function returns true if and
only if the processor knows how to evaluate steps of the specified
type.</para>

<para><impl>The value of the <function>p:step-available</function> function during
static analysis is <glossterm>implementation-dependent</glossterm>.</impl></para>
</section>

<section xml:id="f.iteration-position">
<title>Iteration Position</title>

<para>Both <tag>p:for-each</tag> and <tag>p:viewport</tag> process a
sequence of documents. The iteration position is the position of the
current document in that sequence: the first document has position 1, the
second 2, etc. The <function>p:iteration-position</function> function
returns the iteration position of the nearest
ancestor <tag>p:for-each</tag> or <tag>p:viewport</tag>.</para>

<methodsynopsis>
<type>xs:integer</type>
<methodname>p:iteration-position</methodname>
<void/>
</methodsynopsis>

<para>If there is no <tag>p:for-each</tag> or <tag>p:viewport</tag>
among the ancestors of the element on which the expression involving
<function>p:iteration-position</function> occurs, it returns 1.</para>

<para>The value of the <function>p:iteration-position</function> function during
static analysis is 1.</para>
</section>

<section xml:id="f.iteration-size">
<title>Iteration Size</title>

<para>Both <tag>p:for-each</tag> and <tag>p:viewport</tag> process a
sequence of documents. The iteration size is the total number of documents
in that sequence. The <function>p:iteration-size</function> function
returns the iteration size of the nearest
ancestor <tag>p:for-each</tag> or <tag>p:viewport</tag>.</para>

<methodsynopsis>
<type>xs:integer</type>
<methodname>p:iteration-size</methodname>
<void/>
</methodsynopsis>

<para>If there is no <tag>p:for-each</tag> or <tag>p:viewport</tag>
among the ancestors of the element on which the expression involving
<function>p:iteration-size</function> occurs, it returns 1.</para>

<para>The value of the <function>p:iteration-size</function> function during
static analysis is 1.</para>
</section>

<section xml:id="f.version-available">
<title>Version Available</title>

<para>Returns true if and only if the processor supports the version
specified.</para>

<methodsynopsis>
<type>xs:boolean</type>
<methodname>p:version-available</methodname>
<methodparam><type>xs:string</type><parameter>version</parameter></methodparam>
</methodsynopsis>

<para>A version 1.0 processor will return <literal>true()</literal> when
<code>p:version-available('1.0')</code> is evaluated.</para>

<para>The <function>p:version-available</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="f.xpath-version-available">
<title>XPath Version Available</title>

<para>Returns true if and only if the processor supports the XPath version
specified.</para>

<methodsynopsis>
<type>xs:boolean</type>
<methodname>p:xpath-version-available</methodname>
<methodparam><type>xs:string</type><parameter>version</parameter></methodparam>
</methodsynopsis>

<para>A processor that supports XPath 3.1 will return <literal>true()</literal> when
<code>p:xpath-version-available('3.1')</code> is evaluated.</para>

<para>The <function>p:xpath-version-available</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="f.make-map">
<title>Make Map</title>

<para>XProc uses maps to pass parameters to steps. Sometimes
it is convenient to represent these maps as XML documents. This function
reads such an XML document and produces a map.</para>

<methodsynopsis>
<type>map(xs:QName,item())</type>
<methodname>p:make-map</methodname>
<methodparam><type>item()</type><parameter>param-set</parameter></methodparam>
</methodsynopsis>

<para>The map returned contains (exclusively) the parameters that are
represented by the <parameter>param-set</parameter> item.</para>

<para>The <parameter>param-set</parameter> provided
<rfc2119>must</rfc2119> be a <tag>c:param-set</tag> element or a
document. If it is a document, <tag>c:param-set</tag>
<rfc2119>must</rfc2119> be the document element.
<error code="D0035">It is a <glossterm>dynamic error</glossterm>
if the element (or document element) passed to
<function>p:make-map</function> is not a <tag>c:param-set</tag>
element.</error></para>

<para>Only <tag>c:param</tag> children of the <tag>c:param-set</tag>
element are considered, all other nodes are ignored. The parameters
represented by those <tag>c:param</tag> children
are added to the map that is returned.
<error code="D0037">It is a <glossterm>dynamic error</glossterm>
if any of the <tag>c:param</tag> elements are invalid.</error>
</para>

<note xml:id="ednote-what-is-valid" role="editorial">
<title>Editorial Note</title>
<para>Must tie down what “valid” means wrt the c:param element.</para>
</note>

<para>The <function>p:make-map</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="f.document-properties">
<title>Document properties</title>

<para>This function retrieves the <glossterm>document properties</glossterm>
of a document as a map.</para>

<methodsynopsis>
<type>map(xs:QName,item()*)</type>
<methodname>p:document-properties</methodname>
<methodparam><type>item()</type><parameter>doc</parameter></methodparam>
</methodsynopsis>

<para>The map returned contains (exclusively) the document properties
associated with the <parameter>doc</parameter> specified. If the item
is not associated with a document, the resulting map will be empty.</para>

<para>The <function>p:document-properties</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="f.document-properties-document">
<title>Document properties document</title>

<para>This function retrieves the <glossterm>document properties</glossterm>
of a document as an XML document.</para>

<methodsynopsis>
<type>document-node()</type>
<methodname>p:document-properties-document</methodname>
<methodparam><type>item()</type><parameter>doc</parameter></methodparam>
</methodsynopsis>

<para>The document returned is a <code>p:document-properties</code>
document that contains (exclusively) the document properties
associated with the <parameter>doc</parameter> specified. Each key in the
properties becomes an element, each value becomes the content of that element.
For atomic values other than string, an
<tag class="attribute">xsi:type</tag> attribute is added to identify the
type of the value.</para>

<para>The <function>p:document-properties-document</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="f.document-property">
<title>Document property</title>

<para>This function retrieves a single value from the
<glossterm>document properties</glossterm> of a document.</para>

<methodsynopsis>
<type>item()</type>
<methodname>p:document-property</methodname>
<methodparam><type>document-node()</type><parameter>doc</parameter></methodparam>
<methodparam><type>xs:QName</type><parameter>key</parameter></methodparam>
</methodsynopsis>

<para>The item returned is the value of the “<code>$key</code>” property
in the document properties. An empty sequence is returned if no such key
exists.</para>

<para feature="document-properties-non-xml-document">The context node
for the <function>p:document-property</function> function must be an
XPath document node. In order to access the document properties of a
non-XML document, the processor is responsible for manufacturing an
empty document node for this purpose and for maintaining the
association between that empty document node and the corresponding
non-XML document.</para>

<para>The <function>p:document-property</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="f.force-qname-keys">
<title>Force QName keys</title>

<para>This function forces a <type>map(*)</type> into a
<type>map(xs:QName, item()*)</type>.</para>

<methodsynopsis>
  <type>map(xs:Qname, item()*)</type>
  <methodname>p:force-qname-keys</methodname>
  <methodparam>
    <type>map(*)</type>
    <parameter>map</parameter>
  </methodparam>
</methodsynopsis>

<para>The <function>p:force-qname-keys</function> takes as its input a
map of type <type>map(*)</type> (so any map) and forces this into a
map with <type>xs:Qname</type> keys. Every key/value entry in
<code>$map</code> is processed as follows:</para>

<itemizedlist>
  <listitem>
    <para>If the entry's key is of type <type>xs:QName</type>, the entry
    is copied to the function's result map, unchanged.</para>
  </listitem>
  <listitem>
    <para>If the entry's key is of type <type>xs:string</type> it is
    transformed into an <type>xs:Qname</type> using the <link
    xlink:href="https://www.w3.org/TR/xpath-31/#doc-xpath31-EQName"
    >XPath EQName production rules</link>. That is, it can be written
    as a local-name only, as a prefix plus local-name or as a URI plus
    local-name (using the <code>Q{}</code> syntax). An entry with this
    QName as key and the original entry's value is added to the
    function's result map.</para>
    <para>
      <error code="D0061">It is a <glossterm>dynamic error</glossterm>
      if a string key cannot be converted into a QName.</error>
    </para>
  </listitem>
  <listitem>
    <para>If the entry's key is of any other type, the entry is ignored
    and will <emphasis>not</emphasis> be copied to the function's
    result map.</para>
  </listitem>
</itemizedlist>

<note>
  <para>This function is <emphasis>forced</emphasis> on any step options that have a
  <type>map()</type> datatype with <type>xs:QName</type> keys
  (<code>as="map(xs:QName, ...)</code>). This allows
  passing maps with (easier to specify) <type>xs:string</type> type
  keys that are converted automatically into the required
  <type>xs:QName</type> keys. See also <xref linkend="p.option"/>.</para>
</note>

<para>The <function>p:force-qname-keys</function> function behaves
normally during static anlaysis.</para>
</section>

<section xml:id="other-xpath-extension-functions">
  <title>Other XPath Extension Functions</title>
  <para><impl>It is <glossterm>implementation-defined</glossterm> if the processor supports
  any other XPath extension functions.</impl> Additional extension functions, if any,
  <rfc2119>must not</rfc2119> use any of the XProc namespaces. </para>

<para><impl>The value of the any other XPath extension functions during
static analysis is <glossterm>implementation-defined</glossterm>.</impl></para>
</section>
</section>

    <section xml:id="psvi-support">
      <title>PSVIs in XProc</title>
      <para>XML documents flow between steps in an XProc pipeline. <xref
          linkend="infoset-conformance"/> identifies the properties of those documents that
          <rfc2119>must</rfc2119> be available. Implementations <rfc2119>may</rfc2119> also have the
        ability to pass PSVI annotations between steps.</para>
      <para><impl>Whether or not the pipeline processor supports passing PSVI annotations between
          steps is <glossterm>implementation-defined</glossterm>.</impl>
        <impl>The exact PSVI properties that are preserved when documents are passed between steps
          is <glossterm>implementation-defined</glossterm>.</impl></para>
      <para>A pipeline can use the <varname>p:psvi-supported</varname> system property to determine
        whether or not PSVI properties can be passed between steps.</para>
      <para>A pipeline can assert that PSVI support is required with the <tag class="attribute"
          >psvi-required</tag> attribute:</para>
      <itemizedlist>
        <listitem>
          <para>On a <tag>p:declare-step</tag>, <tag class="attribute"
              >psvi-required</tag> indicates whether or not the declared step requires PSVI support.
              <error code="D0022">It is a <glossterm>dynamic error</glossterm> if a processor that
              does not support PSVI annotations attempts to invoke a step which asserts that they
              are required.</error></para>
        </listitem>
        <listitem>
          <para>On a <tag>p:library</tag>, the <tag class="attribute">psvi-required</tag> attribute
            provides a default value for all of its <tag>p:declare-step</tag>
            <emphasis>children</emphasis> that do not specify a value themselves.</para>
        </listitem>
      </itemizedlist>
      <para>Many of the steps that an XProc pipeline can use are transformative in nature. The
          <tag>p:delete</tag> step, for example, can remove elements and attributes; the
          <tag>p:label-elements</tag> step can add attributes; etc. If PSVI annotations were always
        preserved, the use of such steps could result in documents that were inconsistent with their
        schema annotations.</para>
      <para>In order to avoid these inconsistencies, most steps <rfc2119>must not</rfc2119> produce
        PSVI annotated results even when PSVI passing is supported.</para>
      <para>If PSVI passing is supported, the following constraints apply:</para>
      <orderedlist>
        <listitem>
          <para>Implementations <rfc2119>must</rfc2119> faithfully transmit any PSVI properties
            produced on step outputs to the steps to which they are connected.</para>
        </listitem>
        <listitem>
          <para>When only a subset of the input is processed by a step (because a <tag
              class="attribute">select</tag> expression appears on an input port or a <tag
              class="attribute">match</tag> expression is used to process only part of the input),
            any PSVI annotations that appear on the selected input <rfc2119>must</rfc2119> be
            preserved in the resulting documents passed to the step.</para>
          <para>Note that ID/IDREF constraints, and any other whole-document constraints, may not be
            satisfied within the selected portion, irrespective of what its PSVI properties
            claim.</para>
        </listitem>
        <listitem>
          <para>If an output of a compound step is connected to an output which includes PSVI
            properties, those properties <rfc2119>must</rfc2119> be preserved on the output of the
            compound step, <emphasis>except</emphasis> for the output of <tag>p:viewport</tag> which
              <rfc2119>must not</rfc2119> contain any PSVI properties.</para>
        </listitem>
        <listitem>
          <para>If an implementation supports XPath 2.0 or later, the data model constructed with which to
            evaluate XPath expressions and match patterns <rfc2119>should</rfc2119> take advantage
            of as much PSVI information as possible. </para>
        </listitem>
        <listitem>
          <para>Except as specified above, or in the descriptions of individual steps,
            implementations <rfc2119>must not</rfc2119> include PSVI properties in the outputs of
            steps defined by this specification. <impl>It is
                <glossterm>implementation-defined</glossterm> what PSVI properties, if any, are
              produced by extension steps.</impl></para>
          <para>The exceptions in the standard XProc steps are the
              <tag>p:validate-with-xml-schema</tag>, <tag>p:validate-with-relax-ng</tag>, and
              <tag>p:validate-with-schematron</tag> steps, <tag>p:xslt</tag> (when XSLT 2.0 is
            used), <tag>p:xquery</tag>, <tag>p:identity</tag>, and <tag>p:split-sequence</tag>.
          </para>
        </listitem>
      </orderedlist>
      <note xml:id="note-psvi">
        <para>A processor that supports passing PSVI properties between steps is always free to do
          so. Even if <code>psvi-required="false"</code> is explicitly specified, it is not an error
          for a step to produce a result that includes additional PSVI properties, provide it does
          not violate the constraints above.</para>
      </note>
    </section>

<section xml:id="value-templates">
<title>Value Templates</title>

<para>An attribute or text node in a pipeline may, in particular
circumstances, contain embedded expressions enclosed between curly
brackets. Attributes and text nodes that use (or are permitted to use)
this mechanism are referred to respectively as <glossterm
baseform="attribute value template">attribute value
templates</glossterm> and <glossterm baseform="text value
template">text value templates.</glossterm>.</para>

<para><termdef xml:id="dt-value-template">Collectively,
attribute value templates and text value templates are referred to as
<firstterm baseform="value template">value templates</firstterm>.</termdef>
</para>

<para>A value template is a string that contains zero or more
expressions delimited by curly brackets. Outside an expression, a
doubled left or right curly brackets (“<literal>{{</literal>” or
“<literal>}}</literal>”) represents a literal, single bracket and does
not start or end an expression. Once an expression begins, it extends
to the first unmatched right curly bracket that is not within a string
literal or comment.</para>

<para>Value templates are not recursive. Curly brackets inside an
expression are part of that expression and are not recognized as
nested value templates.</para>

<para>
<error code="S0066">It is a <glossterm>static error</glossterm> if
an expression does not have a closing right curly bracket or if an
unescaped right curly bracket occurs outside of an expression.
</error>
</para>

<para>It is a static error if the string contained between matching curly
brackets in a value template, when interpreted as an XPath expression,
contains errors. The error is signaled using the appropriate
XPath error code.</para>

<para>
<error code="D0050">It is a <glossterm>dynamic error</glossterm> if the
XPath expression in an AVT or TVT can not be evaluated.</error>
</para>

<para>
<error code="D0051">It is a <glossterm>dynamic error</glossterm> if the XPath
expression in an AVT or TVT evaluates to something to other than a sequence
containing atomic values or nodes.</error> Function, array and map items are
explicitly excluded here because they do not have a string representation.
</para>

<section xml:id="attribute-value-templates">
<title>Attribute Value Templates</title>

<para><termdef xml:id="dt-attribute-value-template">In an attribute
that is designated as an <firstterm>attribute value
template</firstterm>, an expression can be used by surrounding the
expression with curly brackets (<code>{}</code>), following the
general rules for <glossterm baseform="value template">value
templates</glossterm></termdef>.</para>

<para>Curly brackets are not treated specially in an attribute value
in an XProc pipeline unless the attribute is specifically designated
as one that permits an attribute value template. Option shortcuts
permit attribute value templates.
<impl>Whether or not an extension attribute permits attribute value
templates is <glossterm>implementation-defined</glossterm>.</impl>
In an element
syntax summary, the value of an attribute that allows attribute value
templates is surrounded by
curly brackets.</para>

<para>An attribute value template can be seen as an alternating
sequence of zero or more “fixed” (non-expression) parts and expression
parts. Each expression is evaluated with an undefined context
node.</para>

<para>The result of the attribute value template is the concatentation
of the fixed parts and the string-value of the result of evaluating
each expression part.</para>

<note xml:id="note-dynerr">
<para>This process can generate dynamic errors, for example if the
sequence contains an element with a complex content type (which cannot
be atomized).</para>
</note>

<para>The string value of the attribute is the result of the attribute
value template as an <type>xs:untypedAtomic</type>.</para>
</section>

<section xml:id="text-value-templates">
<title>Text Value Templates</title>

<para>This section describes how text nodes are processed when they
are designated text value templates. Text nodes that are descendants
of a <tag>p:inline</tag> and text nodes that are descendants of an
element node in an implicit inline may be text value templates. No
other text node is a text value template.</para>

<para>Whether or not a text node that may be a text value template is
designated one is determined by the <code>expand-text</code> attribute,
see <xref linkend="expand-text-attribute"/>.</para>

<para><termdef xml:id="dt-text-value-template">In a text node that is
designated as a <firstterm>text value template</firstterm>,
expressions can be used by surrounding each expression with curly
brackets (<code>{}</code>), following the
general rules for <glossterm baseform="value template">value
templates</glossterm>.</termdef>
</para>

<para>A text value template can be seen as an alternating sequence of
zero or more “fixed” (non-expression) parts and expression parts. Each
expression is evaluated with an undefined context node.</para>

<para>This produces a sequence of strings (the fixed parts) and items
(the results of evaluating each expression). Any items that are
non-string atomic values are converted to strings by taking their
string value. Strings are converted into text nodes.</para>

<para>The result of the text value template is this sequence of nodes.</para>

<note xml:id="unlike-xslt-tvts">
<para>Unlike XSLT, in XProc, text value templates are not atomized
and converted to single text nodes. It is possible to insert nodes with
text value templates in XProc, for example, if the XPath
expressions refer to variables that have node content.</para>
</note>

<para>If a node to be inserted with a text value template is a document
node, all the children of the document node are inserted.</para>

<para>How the nodes are inserted depends on the content type of the
<tag>p:inline</tag>.</para>

<orderedlist>
<listitem>
<para>If the content type is an <glossterm>XML media type</glossterm>,
the nodes are added to the XML document where they occur. This is analagous
to the way element constructors work in <biblioref linkend="xquery10"/>.
</para>
<para>If the node is an attribute
it is added to an element parent if and only if the attribute either has
no siblings in the XDM sequence or has only attributes as preceding siblings.
<error code="D0052">It is a <glossterm>dynamic error</glossterm> if the XPath
expression in a TVT evaluates to an attribute and either the parent is not an
element or the attribute has a preceding sibling that it not an attribute.</error>
</para>
</listitem>
<listitem>
<para>If the content type is not an <glossterm>XML media
type</glossterm>, each text value template is replaced by the
concatentation of the serialization of the nodes that result from
evaluating the template.</para>
<para>This serialization is performed with the following serialization parameters:</para>

<itemizedlist>
<listitem>
<para><option>byte-order-mark</option>: false</para>
</listitem>
<listitem>
<para><option>cdata-section-elements</option>: ()</para>
</listitem>
<listitem>
<para><option>doctype-public</option>: ()</para>
</listitem>
<listitem>
<para><option>doctype-system</option>: ()</para>
</listitem>
<listitem>
<para><option>encoding</option>: “utf-8”</para>
</listitem>
<listitem>
<para><option>escape-uri-attributes</option>: false</para>
</listitem>
<listitem>
<para><option>include-content-type</option>: false</para>
</listitem>
<listitem>
<para><option>indent</option>: false</para>
</listitem>
<listitem>
<para><option>media-type</option>: “application/xml”</para>
</listitem>
<listitem>
<para><option>method</option>: “xml”</para>
</listitem>
<listitem>
<para><option>normalization-form</option>: ()</para>
</listitem>
<listitem>
<para><option>omit-xml-declaration</option>: true</para>
</listitem>
<listitem>
<para><option>standalone</option>: false</para>
</listitem>
<listitem>
<para><option>undeclare-prefixes</option>: false</para>
</listitem>
<listitem>
<para><option>use-character-maps</option>: ()</para>
</listitem>
<listitem>
<para><option>version</option>: 1.0</para>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>

<para>Interpretation of the character content of the <tag>p:inline</tag>
according to the media type occurs after text value templates have been
replaced.</para>

<section xml:id="expand-text-attribute">
<title>The [p:]expand-text attribute</title>

<para>The <code>expand-text</code> attribute controls
whether or not its descendant text nodes are designated as text value
templates. On elements in the XProc namespace, the attribute is
named <tag class="attribute">expand-text</tag>. On elements that are
not in the XProc namespace, the attribute is named
<tag class="attribute">p:expand-text</tag>.</para>

<para>If the <code>expand-text</code> attribute appears on more than one
element among the ancestors of a text node, only the value on the nearest
ancestor is considered. (An <code>expand-text</code> attribute on an element overrides
the value on all of its ancestors.)</para>

<para>If the nearest <code>expand-text</code> attribute has the value
“<code>false</code>”, then the text nodes are not text value
templates. If it has the value “<code>true</code>”, or if no
<code>expand-text</code> attribute is present among the text node’s
ancestors, then the text nodes are text value templates.</para>

<!--feature="p-inline-no-nesting"-->
<para>If a <tag>p:inline</tag> occurs as a descendant of another
<tag>p:inline</tag>, any <tag class="attribute">expand-text</tag>
within the inner <tag>p:inline</tag> is treated like an ordinary
attribute; that is, neither will its value influence text expansion
nor will it be removed from the descendant.</para>

<!-- feature="no-p-expand-text-on-p"-->
<para><error code="S0084">It is a <glossterm>static error</glossterm> if the
<tag class="attribute">p:expand-text</tag> attribute appears on any element
in the XProc namespace.</error>
</para>
</section>

<simplesect>
<title>Examples</title>

<para>Consider the following examples. In each case:</para>

<itemizedlist>
<listitem>
<para>The variable <code>$name</code>
is bound to the following XML element:</para>

<programlisting language="xml"
><![CDATA[  <name><given>Mary</given> <surname>Smith</surname></name>]]></programlisting>
</listitem>
<listitem>
<para>The result of evaluating the text value template
“<code>{$name/node()}</code>” is a sequence of three nodes, the given
name element, a text node containing a single space, and the surname
element.</para>
</listitem>
</itemizedlist>

<para>If the media type is an XML media type:</para>

<programlisting
><![CDATA[  <p:inline content-type="application/xml">
    <attribution>{$name/node()}</attribution>
  </p:inline>]]></programlisting>

<para>the result is that sequence of nodes:</para>

<programlisting
><![CDATA[  <attribution><given>Mary</given> <surname>Smith</surname></attribution>]]></programlisting>

<para>If the media type is not an XML media type:</para>

<programlisting
><![CDATA[  <p:inline content-type="application/json">
    {{ "name": "{$name/node()}" }}
  </p:inline>]]></programlisting>

<para>the result is the concatentation of the serialization of the nodes:</para>

<programlisting
><![CDATA[  { "name": "<given>Mary</given> <surname>Smith</surname>" }]]></programlisting>

<para>If the string value is desired, instead of escaped markup, write the
expression such that it returns the string values:</para>

<programlisting
><![CDATA[  <p:inline content-type="application/json">
    {{ "name": "{$name/node()/string()}" }}
  </p:inline>]]></programlisting>

<para>To produce:</para>

<programlisting
><![CDATA[  { "name": "Mary Smith" }]]></programlisting>

</simplesect>
</section>
</section>

<section xml:id="options">
<title>Options</title>

<para>Some steps accept options. Options are name/value pairs. The value
of an option is the default value specified in its declaration, or
a value provided by the caller of the step (overriding the default).
If it has neither a default value nor a provided value, its value is
the empty sequence.</para>

<para><termdef xml:id="dt-option">An <firstterm>option</firstterm> is
a name/value pair. The name <rfc2119>must</rfc2119> be an <link
xlink:href="http://www.w3.org/TR/REC-xml-names/#dt-expname">expanded
name</link>. The value may be any XPath data model value.</termdef>
Option names are always expressed as literal values, pipelines cannot
construct option names dynamically. </para>

<para><impl>How outside values are specified for pipeline options on
the pipeline initially invoked by the processor is
<glossterm>implementation-defined</glossterm>.</impl> In other words,
the command line options, APIs, or other mechanisms available to
specify such options values are outside the scope of this
specification.</para>

<para>Some steps require a set of name/value pairs for the operations
they perform. For example, an XSLT stylesheet might have required
parameters or an XQuery query might have external variables.
In the XProc Step Library, the standard way to pass such values to
the step is to use an option named “<literal>parameters</literal>”
whose value is a map.</para>
</section>

<section xml:id="variables">
<title>Variables</title>

<para>Variables are name/value pairs. Pipeline authors can create
variables to hold computed values.</para>

<para><termdef xml:id="dt-variable">A <firstterm>variable</firstterm>
is a name/value pair. The name <rfc2119>must</rfc2119> be an <link
xlink:href="http://www.w3.org/TR/REC-xml-names/#dt-expname">expanded
name</link>. The value may be any XPath data model value.</termdef>
</para>

<para>The names of variables and options are not distinct and are lexically
scoped. <termdef xml:id="dt-shadow">We say that a variable
<firstterm baseform="shadow">shadows</firstterm> another variable
(or option) if it has the same name and appears later in the same lexical
scope.</termdef></para>

<para>Consider this pipeline:</para>

<programlisting language="xml"><xi:include href="../../../build/examples/shadow.txt" parse="text"/></programlisting>

<para>If no overriding value is provided for <varname>$bname</varname> at runtime,
the pipeline will produce three messages: “NAME1=1”, “NAME2=2”, and “NAME3=7”.
(If an overriding value is provided at runtime, “NAME1” will have that value,
“NAME2” will have one more than that value, and “NAME3” will have the value 7.
</para>
</section>

    <section xml:id="security-considerations">
      <title>Security Considerations</title>
      <para>An XProc pipeline may attempt to access arbitrary network resources: steps such as
          <tag>p:load</tag> and <tag>p:http-request</tag> can attempt to read from an arbitrary URI;
        steps such as <tag>p:store</tag> can attempt to write to an arbitrary location;
          <tag>p:exec</tag> can attempt to execute an arbitrary program. Note, also, that some
        steps, such as <tag>p:xslt</tag> and <tag>p:xquery</tag>, include extension mechanisms which
        may attempt to execute arbitrary code. </para>
      <para>In some environments, it may be inappropriate to provide the XProc pipeline with access
        to these resources. In a server environment, for example, it may be impractical to allow
        pipelines to store data. In environments where the pipeline cannot be trusted, allowing the
        pipeline to access arbitrary resources or execute arbitrary code may be a security
        risk.</para>
      <para><error code="D0021">It is a <glossterm>dynamic error</glossterm> for a pipeline to
          attempt to access a resource for which it has insufficient privileges or perform a step
          which is forbidden.</error>
        <impl>Which steps are forbidden, what privileges are needed to access resources, and under
          what circumstances these security constraints apply is
            <glossterm>implementation-dependent</glossterm>.</impl>
      </para>
      <para>Steps in a pipeline may call themselves recursively which could result in pipelines
        which will never terminate.</para>
      <para>A conformant XProc processor may limit the resources available to any or all steps in a
        pipeline. A conformant implementation may raise dynamic errors, or take any other corrective
        action, for any security problems that it detects.</para>
    </section>

<section xml:id="versioning-considerations">
<title>Versioning Considerations</title>

<para>A pipeline author <rfc2119>may</rfc2119> identify the version of XProc
for which a particular pipeline was authored by setting the
<tag class="attribute">version</tag> attribute. The
<tag class="attribute">version</tag> attribute can be specified on
<tag>p:declare-step</tag> or <tag>p:library</tag>.
If specified, the value of
the <tag class="attribute">version</tag> attribute <rfc2119>must</rfc2119> be a
<type>xs:decimal</type>. <error code="S0063">It is a
<glossterm>static error</glossterm> if the value of the
<tag class="attribute">version</tag> attribute is not a
<type>xs:decimal</type>.</error></para>

<para>The version of XProc defined
by this specification is “<literal>3.0</literal>”.</para>

<para>A pipeline author <rfc2119>must</rfc2119> identify the version of XProc
on the document element of a pipeline document.
<error code="S0062">It is a <glossterm>static error</glossterm> if a
required
<tag class="attribute">version</tag> attribute
is not present.</error></para>

<para>The version identified applies
to the element on which the
<tag class="attribute">version</tag> attribute appears and all of its descendants,
unless or until another version is explicitly identified.</para>

<para>When a processor encounters an explicit version (other than a
version which it implements), it proceeds in backwards- or
forwards-compatible mode. </para>

<section xml:id="vers-backcomp">
<title>Backwards-compatible Mode</title>
<para>If the processor encounters a request for a previous version of
XProc (e.g., if a "3.0" processor encounters an explicit request for
the "1.0" language), it <rfc2119>must</rfc2119> process the pipeline
as if it was a processor for the requested version: it
<rfc2119>must</rfc2119> enforce the semantics
of the requested version, it <rfc2119>must</rfc2119> report steps not
known in that version as errors, etc.
<error code="S0060">It
is a <glossterm>static error</glossterm> if the processor encounters
an explicit request for a previous version of the language and it is
unable to process the pipeline using those semantics.</error></para>
</section>

<section xml:id="vers-forwcomp">
<title>Forwards-compatible Mode</title>

<para>If the processor encounters an explicit version which it does
not recognize, it processes the pipeline in forwards-compatible mode.
Forwards-compatible mode relaxes several static errors, turning them
into dynamic errors so that a pipeline author can write a pipeline
which conditionally uses new language features.</para>

<para>In forwards-compatible mode:</para>
<orderedlist>
<listitem>
<para>On any element in the XProc namespace, unrecognized attributes
(other than extension attributes) are ignored.</para>
</listitem>
<listitem>
<para>On any step in the XProc namespace, unknown options are ignored.
</para>
</listitem>
<listitem>
<para>If a step in the XProc namespace includes an unknown input port
with an explicit connection, the connection is treated normally for
the purpose of computing the dependencies in the pipeline but it is
otherwise ignored. Unknown input ports <rfc2119>must not</rfc2119>
be treated as
<glossterm baseform="primary input port">primary input ports</glossterm>;
it will always be an error if they are used but not explicitly
connected.
</para>
</listitem>
<listitem>
<para>If a step in the pipeline includes an explicit connection to an
unknown output port on a step in the XProc namespace, the connection
is treated normally for the purpose of computing the dependencies in
the pipeline. An empty sequence of documents <rfc2119>must</rfc2119>
appear on that connection.
</para>
</listitem>
</orderedlist>

<para>As a consequence of the rules above, future specifications
<rfc2119>must not</rfc2119> change the semantics of existing step
types without changing their names. Although they may add new input
and output ports, such changes should be done with care; they
<rfc2119>should</rfc2119>
in some sense be limited to ancillary inputs and outputs and they
<rfc2119>must not</rfc2119> be
<glossterm baseform="primary input port">primary input ports</glossterm>.
</para>

<section xml:id="vers-forwcomp-ex">
<title>Examples</title>

<para>In forwards-compatible mode, it is not a static error to
encounter the following step:</para>

<programlisting language="xml"><![CDATA[<p:string-replace match="div/@class" replace="newclass">
  <p:with-input port="ancillary">
    <p:document href="doc.xml"/>
  </p:with-input>
</p:string-replace>]]></programlisting>

<para>The processor will simply ignore the “<port>ancillary</port>” port.
</para>

          <para>Suppose that XProc version 3.0 changes the definition of the <tag>p:xslt</tag> step
            so that it has an additional output port, <code>messages</code>. Then consider the
            following pipeline: </para>
          <programlisting language="xml"><![CDATA[<p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                version="99.0">
<p:input port="source"/>
<p:output port="result"/>

  <p:xslt name="style">
    <p:with-input port="stylesheet">
      <p:document href="style.xsl"/>
    </p:with-input>
  </p:xslt>

  <p:sink/>

  <p:count>
    <p:with-input port="source">
      <p:pipe step="style" port="messages"/>
    </p:with-input>
  </p:count>
</p:declare-step>]]></programlisting>

<para>When run by a "99.0" or later processor, it will count the
documents that appear on the <code>messages</code> port. When run by a
“1.0” processor in forwards-compatible mode, the binding to the
“<port>messages</port>” port is not a static error.
Dynamically, the "1.0" processor will always produce
a count of zero, because an empty sequence of documents will always
appear on the <code>messages</code> port.</para>

        </section>
      </section>
    </section>

  <section xml:id="syntax">
    <title>Syntax Overview</title>
    <para>This section describes the normative XML syntax of XProc. This syntax is sufficient to
      represent all the aspects of a pipeline, as set out in the preceding sections. <termdef
        xml:id="dt-XML">XProc is intended to work equally well with <biblioref linkend="xml10"/> and
          <biblioref linkend="xml11"/>. Unless otherwise noted, the term
        “<firstterm>XML</firstterm>” refers equally to both versions.</termdef>
      <termdef xml:id="dt-Namespaces-in-XML">Unless otherwise noted, the term <firstterm>Namespaces
          in XML</firstterm> refers equally to <biblioref linkend="xmlns10"/> and <biblioref
          linkend="xmlns11"/>.</termdef>
      <impl>Support for pipeline documents written in XML 1.1 and pipeline inputs and outputs that
        use XML 1.1 is <glossterm>implementation-defined</glossterm>.</impl>
    </para>
    <para>Elements in a pipeline document represent the pipeline, the steps it contains, the
      connections between those steps, the steps and connections contained within them, and so on.
      Each step is represented by an element; a combination of elements and attributes specify how
      the inputs and outputs of each step are connected and how options are
      passed.</para>
    <para>Conceptually, we can speak of steps as objects that have inputs and outputs, that are
      connected together and which may contain additional steps. Syntactically, we need a mechanism
      for specifying these relationships.</para>
    <para><glossterm baseform="container">Containment</glossterm> is represented naturally using
      nesting of XML elements. If a particular element identifies a <glossterm>compound
        step</glossterm> then the step elements that are its immediate children form its
        <glossterm>subpipeline</glossterm>.</para>
    <para>The connections between steps are expressed using names and references to those
      names.</para>
    <para>Six kinds of things are named in XProc:</para>
    <orderedlist spacing="compact">
      <listitem>
        <simpara>Step types,</simpara>
      </listitem>
      <listitem>
        <simpara>Steps,</simpara>
      </listitem>
      <listitem>
        <simpara>Input ports),</simpara>
      </listitem>
      <listitem>
        <simpara>Output ports,</simpara>
      </listitem>
      <listitem>
        <simpara>Options and variables</simpara>
      </listitem>
    </orderedlist>
    <section xml:id="namespaces">
      <title>XProc Namespaces</title>
      <para>There are three namespaces associated with XProc:</para>
      <variablelist>
        <varlistentry>
          <term><uri type="xmlnamespace">http://www.w3.org/ns/xproc</uri></term>
          <listitem>
            <para>The namespace of the XProc XML vocabulary described by this specification; by
              convention, the namespace prefix “<literal>p:</literal>” is used for this
              namespace.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><uri type="xmlnamespace">http://www.w3.org/ns/xproc-step</uri></term>
          <listitem>
            <para>The namespace used for documents that are inputs to and outputs from several
              standard and optional steps described in this specification. Some steps, such as
                <tag>p:http-request</tag> and <tag>p:store</tag>, have defined input or output
              vocabularies. We use this namespace for all of those documents. The conventional
              prefix “<literal>c:</literal>” is used for this namespace.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><uri type="xmlnamespace">http://www.w3.org/ns/xproc-error</uri></term>
          <listitem>
            <para>The namespace used for errors. The conventional prefix “<literal>err:</literal>”
              is used for this namespace. </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>This specification also makes use of the prefix “<literal>xs:</literal>” to refer to the
          <biblioref linkend="xmlschema-1"/> namespace <uri type="xmlnamespace"
          >http://www.w3.org/2001/XMLSchema</uri>. </para>
    </section>
    <section xml:id="scoping">
      <title>Scoping of Names</title>

<para>Names are used to identify step types, steps, ports, options and
variables. Step types, options, and variables are named with EQNames.
Steps and ports are named with NCNames. The scope of a name is a
measure of where it is available in a pipeline. <termdef
xml:id="dt-visible">If two names are in the same scope, we say that
they are <firstterm>visible</firstterm> to each other.
</termdef></para>
      <para>The scope of the names of the step types is the pipeline in which they are declared,
        including any declarations imported from libraries via <tag>p:import</tag>. Nested pipelines
        inherit the step types in scope for their parent.</para>
      <para>In other words, the step types that are in scope in a <tag>p:declare-step</tag> are:</para>
      <itemizedlist>
        <listitem>
          <para>The standard, built-in types (<tag>p:declare-step</tag>, <tag>p:choose</tag>, etc.).
          </para>
        </listitem>
        <listitem>
          <para>Any implementation-provided types. </para>
        </listitem>
        <listitem>
          <para>Any step types declared in the <tag>p:declare-step</tag> children of the pipeline element. </para>
        </listitem>
        <listitem>
          <para>The types of any <tag>p:declare-step</tag>s that are
            imported. </para>
        </listitem>
        <listitem>
          <para>Any types that are in the scope of any <tag>p:library</tag> that is imported.
          </para>
        </listitem>
        <listitem>
          <para>Any step types that are in scope for the pipeline's parent
              <tag>p:declare-step</tag>, if it has one. </para>
        </listitem>
        <listitem>
          <para>The type of the pipeline itself, if it has one. </para>
        </listitem>
      </itemizedlist>
      <para>The step types that are in scope in a <tag>p:library</tag> are:</para>
      <itemizedlist>
        <listitem>
          <para>The standard, built-in types (<tag>p:declare-step</tag>, <tag>p:choose</tag>, etc.).
          </para>
        </listitem>
        <listitem>
          <para>Any implementation-provided types. </para>
        </listitem>
        <listitem>
          <para>Any step types declared in the library (the
              <tag>p:declare-step</tag> children of the <tag>p:library</tag> element). </para>
        </listitem>
        <listitem>
          <para>The types of <tag>p:declare-step</tag>s that are imported
            into the library. </para>
        </listitem>
        <listitem>
          <para>Any types that are in the scope of any <tag>p:library</tag> that is imported.
          </para>
        </listitem>
      </itemizedlist>
      <para><error code="S0036">All the step types in a pipeline or library <rfc2119>must</rfc2119>
          have unique names: it is a <glossterm>static error</glossterm> if any step type name is
          built-in and/or declared or defined more than once in the same scope.</error></para>

<para>The scope of the names of the steps themselves is determined by
the <glossterm>environment</glossterm> of each step. In general, the
name of a step, the names of its sibling steps, the names of any steps
that it contains directly, the names of its ancestors, and the names
of the siblings of its ancestors are all in a common scope. <error
code="S0002">All steps in the same scope <rfc2119>must</rfc2119> have
unique names: it is a <glossterm>static error</glossterm> if two steps
with the same name appear in the same scope.</error></para>

<para>The scope of an input or output port name is the step on which
it is defined. The names of all the ports on any step
<rfc2119>must</rfc2119> be unique.</para>

<para>Taken together, these uniqueness constraints guarantee that the
combination of a step name and a port name uniquely identifies exactly
one port on exactly one in-scope step.</para>

<para>The scope of option and variable names is determined by where
they are declared. When an option is declared with <tag>p:option</tag>
(or a variable with <tag>p:variable</tag>), unless otherwise
specified, its scope consists of the sibling elements that follow its
declaration and the descendants of those siblings.
</para>
</section>
    <section xml:id="xml-base-attribute">
      <title>Base URIs and xml:base</title>

<para>If a relative URI appears in an option of type <type>xs:anyURI</type>,
the base URI against which it <rfc2119>must</rfc2119> be made absolute is the base
URI of the <tag>p:option</tag> element. If the option value is
specified using a <link linkend="option-shortcut">syntactic
shortcut</link>, the base URI of the step element on which the shortcut
attribute appears <rfc2119>must</rfc2119> be used. In general,
whenever a relative URI appears in an <type>xs:anyURI</type>,
its base URI is the base URI of the nearest ancestor element.</para>

<para>The pipeline author can control the base URIs of elements within
the pipeline document with the <tag class="attribute">xml:base</tag>
attribute. The <tag class="attribute">xml:base</tag> attribute
<rfc2119>may</rfc2119> appear on any element in a pipeline and has the
semantics outlined in <biblioref linkend="xml-base"/>.</para>

</section>
    <section xml:id="xml-id-attribute">
      <title>Unique identifiers</title>
      <para>A pipeline author can provide a globally unique identifier for any element in a pipeline
        with the <tag class="attribute">xml:id</tag> attribute.</para>
      <para>The <tag class="attribute">xml:id</tag> attribute <rfc2119>may</rfc2119> appear on any
        element in a pipeline and has the semantics outlined in <biblioref linkend="xml-id"
        />.</para>
    </section>

<section xml:id="syntax-docs-ports">
<title>Associating Documents with Ports</title>

<para> A document or a sequence of documents can be connected to a
port in four ways: <glossterm>by source</glossterm>, <glossterm>by
URI</glossterm>, by providing an <glossterm>inline
document</glossterm>, or by making it
<glossterm baseform="empty-sequence">explicitly empty</glossterm>.
Each of these mechanisms is allowed on the <tag>p:with-input</tag> and
<tag>p:output</tag> elements. Specification <glossterm>by
URI</glossterm>, by providing an <glossterm>inline document</glossterm>, or by making it
  <glossterm baseform="empty-sequence">explicitly empty</glossterm> is allowed on <tag>p:input</tag>.</para>
<variablelist>
<varlistentry>
<term>Specified by URI</term>
<listitem>
<para><termdef xml:id="dt-by-URI">A document is specified
<firstterm>by URI</firstterm> if it is referenced with a
URI.</termdef> The <tag class="attribute">href</tag> attribute on the
<tag>p:document</tag> element is used to refer to
documents by URI.</para>
            <para>In this example, the input to the <tag>p:identity</tag> step named
                “<literal>otherstep</literal>” comes from “<uri>http://example.com/input.xml</uri>”. </para>
            <programlisting language="xml"><xi:include href="../../../build/examples/identity.txt" parse="text"/></programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Specified by source</term>
          <listitem>
            <para><termdef xml:id="dt-by-source">A document is specified <firstterm>by
                  source</firstterm> if it references a specific port on another step.</termdef> The
                <tag class="attribute">step</tag> and <tag class="attribute">port</tag> attributes
              on the <tag>p:pipe</tag> element are used for this purpose. </para>
            <para>In this example, the “<literal>source</literal>” input to the
                <tag>p:xinclude</tag> step named “<literal>expand</literal>” comes from the
                “<literal>result</literal>” port of the step named
              “<literal>otherstep</literal>”.</para>
            <programlisting language="xml"><xi:include href="../../../build/examples/xinclude.txt" parse="text"/></programlisting>
            <para>See the description of <tag>p:pipe</tag> for a complete description of the ports
              that can be connected.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Specified inline</term>
          <listitem>
            <para><termdef xml:id="dt-inline-document">An <firstterm>inline document</firstterm> is
                specified directly in the body of the element to which it connects.</termdef> The
              content of the <tag>p:inline</tag> element is used for this purpose. </para>
            <para>In this example, the “<literal>stylesheet</literal>” input to the XSLT step named
                “<literal>xform</literal>” comes from the content of the <tag>p:with-input</tag> element
              itself.</para>
            <programlisting language="xml"><xi:include href="../../../build/examples/xslt.txt" parse="text"/></programlisting>
            <para>Inline documents are considered “quoted”. The pipeline processor passes them
              literally to the port, even if they contain elements from the XProc namespace or other
              namespaces that would have other semantics outside of the <tag>p:inline</tag>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Specified explicitly empty</term>
          <listitem>
            <para><termdef xml:id="dt-empty-sequence">An <firstterm>empty sequence</firstterm> of
                documents is specified with the <tag>p:empty</tag> element.</termdef>
            </para>
            <para>In this example, the “<literal>source</literal>” input to the XSLT 2.0 step named
                “<literal>generate</literal>” is explicitly empty:</para>
            <programlisting language="xml"><xi:include href="../../../build/examples/xslt-empty.txt" parse="text"/></programlisting>
            <para>If you omit the connection on a primary input port, a connection to the
                <glossterm>default readable port</glossterm> will be assumed. Making the connection
              explicitly empty guarantees that the connection will be to an empty sequence of
              documents.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Note that a <tag>p:input</tag>, <tag>p:with-input</tag>, or <tag>p:output</tag> element may contain more than one
          <tag>p:pipe</tag>, <tag>p:document</tag>, or <tag>p:inline</tag>
        element. If more than one <glossterm>connection</glossterm> is provided, then the specified
        sequence of documents is made available on that port in the same order as the
        connections.</para>
    </section>
    <section xml:id="documentation">
      <title>Documentation</title>
      <para>Pipeline authors may add documentation to their pipeline documents with the
          <tag>p:documentation</tag> element. Except when it appears as a descendant of
          <tag>p:inline</tag>, the <tag>p:documentation</tag> element is completely ignored by
        pipeline processors, it exists simply for documentation purposes. If a
          <tag>p:documentation</tag> is provided as a descendant of <tag>p:inline</tag>, it has no
        special semantics, it is treated literally as part of the document to be provided on that
        port. The <tag>p:documentation</tag> element has no special semantics when it appears in
        documents that flow through the pipeline.</para>
      <para>Pipeline processors that inspect the contents of <tag>p:documentation</tag> elements and
        behave differently on the basis of what they find are <emphasis>not conformant</emphasis>.
        Processor extensions <rfc2119>must</rfc2119> be specified with <tag>p:pipeinfo</tag>.</para>
    </section>
    <section xml:id="annotations">
      <title>Processor annotations</title>
      <para>Pipeline authors may add annotations to their pipeline documents with the
          <tag>p:pipeinfo</tag> element. <impl>The semantics of <tag>p:pipeinfo</tag> elements are
            <glossterm>implementation-defined</glossterm>.</impl> Processors
          <rfc2119>should</rfc2119> specify a way for their annotations to be identified, perhaps
        with <link linkend="extension-attributes">extension attributes</link>.</para>
      <para>Where <tag>p:documentation</tag> is intended for human consumption,
          <tag>p:pipeinfo</tag> elements are intended for processor consumption. A processor might,
        for example, use annotations to identify some particular aspect of an implementation, to
        request additional, perhaps non-standard features, to describe parallelism constraints,
        etc.</para>
      <para>When a <tag>p:pipeinfo</tag> appears as a descendant of <tag>p:inline</tag>, it has no
        special semantics; in that context it <rfc2119>must</rfc2119> be treated literally as part
        of the document to be provided on that port. The <tag>p:pipeinfo</tag> element has no
        special semantics when it appears in documents that flow through the pipeline. </para>
    </section>
    <section xml:id="extension-attributes">
      <title>Extension attributes</title>
      <para><termdef xml:id="dt-extension-attribute">An element from the XProc namespace
            <rfc2119>may</rfc2119> have any attribute not from the XProc namespace, provided that
          the expanded-QName of the attribute has a non-null namespace URI. Such an attribute is
          called an <firstterm>extension attribute</firstterm>.</termdef>
      </para>
      <para>The presence of an extension attribute must not cause the connections between steps to
        differ from the connections that would arise in the absence of the attribute. They must not
        cause the processor to fail to signal an error that would be signaled in the absence of the
        attribute.</para>
      <para>A processor which encounters an extension attribute that it does not implement
          <rfc2119>must</rfc2119> behave as if the attribute was not present.</para>
    </section>

<section xml:id="use-when">
<title>Conditional Element Exclusion</title>

<para>Any element in the XProc namespace may have a
<tag class="attribute">use-when</tag> attribute which
<rfc2119>must</rfc2119> contain an XPath expression that can be
evaluated statically. If the attribute is present and the effective boolean
value of the expression is false, then the element and all of its descendants
are effectively excluded from the pipeline document. If a node is effectively
excluded, the processor <rfc2119>must</rfc2119> behave as if the element
was not present in the document.</para>

<para xml:id="p.use-when">Elements that are not in the XProc namespace
<rfc2119>may</rfc2119> also have a <tag
class="attribute">use-when</tag> attribute, but the attribute must be
in the XProc namespace. The semantics of a <tag
class="attribute">p:use-when</tag> attribute on an element not in the
XProc namespace are the same as the semantics of a <tag
class="attribute">use-when</tag> attribute on an element in the XProc
namespace.</para>

<para>Conditional element exclusion occurs during
<link linkend="initiating">static analysis</link>
of the pipeline.</para>

<note xml:id="note-excl-use-when">
<para>The effective exclusion of <tag class="attribute">use-when</tag>
processing occurs after XML parsing and has no effect on well-formedness
or validation errors which will be reported in the usual way. Note also that
<tag class="attribute">use-when</tag> is not performed when it occurs on the
descendant of a <tag>p:inline</tag> element.</para>
</note>
</section>

<section xml:id="syntax-summaries"><title>Syntax Summaries</title>

<para>The description of each element in the pipeline namespace is
accompanied by a syntactic summary that provides a quick overview of
the element's syntax:</para>

      <e:rng-fragment name="SomeElement" role="nosummary">
        <grammar xmlns="http://relaxng.org/ns/structure/1.0">
          <define xmlns:sa="http://xproc.org/ns/syntax-annotations" name="SomeElement"
            sa:class="language-example">
            <element name="some-element">
              <attribute name="reqd-attribute">
                <data type="some-type"/>
              </attribute>
              <optional>
                <attribute name="some-attribute">
                  <data type="some-type"/>
                </attribute>
              </optional>
              <optional>
                <attribute name="avt-attribute" sa:avt="true">
                  <data type="some-type"/>
                </attribute>
              </optional>
              <zeroOrMore>
                <choice>
                  <ref name="Some"/>
                  <ref name="Elements"/>
                  <ref name="Allowed"/>
                </choice>
              </zeroOrMore>
              <optional>
                <ref name="OtherElements"/>
              </optional>
            </element>
          </define>
          <define name="Some"><element name="some"><empty/></element></define>
          <define name="Elements"><element name="elements"><empty/></element></define>
          <define name="Allowed"><element name="allowed"><empty/></element></define>
          <define name="OtherElements"><element name="other-elements"><empty/></element></define>
        </grammar>
      </e:rng-fragment>
      <para>The content model fragments in these tableaux are presented in a simple, compact
        notation. In brief:</para><itemizedlist>
        <listitem>
          <para>A name represent exactly one occurrence of an element with that name.</para>
        </listitem>
        <listitem>
          <para>Parentheses are used for grouping. </para>
        </listitem>
        <listitem>
          <para>Elements or groups separated by a comma (“,”) represent an ordered sequence: a
            followed by b followed by c: (a,b,c).</para>
        </listitem>
        <listitem>
          <para>Elements or groups separated by a vertical bar (“|”) represent a choice: a or b or
            c: (a | b | c).</para>
        </listitem>
        <listitem>
          <para>Elements or groups separated by an ampersand (“&amp;”) represent an unordered
            sequence: a and b and c, in any order: (a &amp; b &amp; c).</para>
        </listitem>
        <listitem>
          <para>An element or group followed by a question mark (“?”) is optional; it may or may not
            occur but if it occurs it can occur only once.</para>
        </listitem>
        <listitem>
          <para>An element or group followed by an asterisk (“*”) is optional and may be repeated;
            it may or may not occur and if it occurs it can occur any number of times. </para>
        </listitem>
        <listitem>
          <para>An element or group followed by a plus (“+”) is required and may be repeated; it
            must occur at least once, and it can occur any number of times. </para>
        </listitem>
        <listitem>
          <para>Required attributes are bold. Optional attributes are followed by a question mark.</para>
        </listitem>
        <listitem>
          <para>If an attribute value is an attribute value template, its type is shown
          in curly brackets: “<code>{ some-type }</code>”.</para>
        </listitem>

</itemizedlist>

<para xml:id="common-attr">For clarity of exposition,
some attributes and elements are elided from
the summaries:</para><itemizedlist>
<listitem>
  <para>An <tag class="attribute">xml:id</tag> attribute is allowed on any element. It has
  the semantics of <biblioref linkend="xml-id"/>.</para>
</listitem>
<listitem>
  <para>An <tag class="attribute">xml:base</tag> attribute is allowed on any element. It has
  the semantics of <biblioref linkend="xml-base"/>.</para>
</listitem>
<listitem>
  <para>A <tag class="attribute">use-when</tag> attribute is allowed on any element, see <xref linkend="use-when"/>.</para>
</listitem>
<listitem>
  <para>A <tag class="attribute">depends</tag> attribute is allowed on any step element, see <xref linkend="depends"/>.</para>
</listitem>
<listitem>
  <para>The <tag>p:documentation</tag> and <tag>p:pipeinfo</tag> elements are not shown, but
  they are allowed anywhere.</para>
</listitem>
<listitem>
  <para>Attributes that are <link linkend="option-shortcut">syntactic shortcuts for option
  values</link> are not shown.</para>
</listitem>
</itemizedlist>

<para>The types given for attributes should be understood as follows:</para>
<itemizedlist>
  <listitem>
    <para><type>ID</type>, <type>NCName</type>, <type>NMTOKEN</type>,
    <type>NMTOKENS</type>, <type>anyURI</type>, <type>boolean</type>,
    <type>integer</type>, <type>string</type>: As per <biblioref
    linkend="xmlschema-2"/> including whitespace normalization as
    appropriate.</para>
  </listitem>
  <listitem>
    <para><type>EQName</type>: With whitespace normalization as per
    <biblioref linkend="xmlschema-2"/> for QNames. Note, however, that
    QNames that have no prefix are always in no-namespace, irrespective of the
    default namespace.
    </para>
  </listitem>
  <listitem>
    <para><type>QNameList</type>: As a whitespace separated list of
    QNames, per the definition above.
    </para>
  </listitem>
  <listitem>
    <para><type>PrefixList</type>: As a list with <literal
    role="infoset-property">item type</literal> <type>NMTOKEN</type>,
    per <biblioref linkend="xmlschema-2"/>, including whitespace
    normalization.
    </para>
  </listitem>
  <listitem>
    <para><type>ExcludeInlinePrefixes</type>: As a <type>PrefixList</type>
    per the definition above, with the following extensions: the tokens
    <literal>#all</literal> and <literal>#default</literal> may appear.
    </para>
  </listitem>
  <listitem>
    <para><type>XPathExpression</type>, <type>XSLTSelectionPattern</type>:
    As a string per <biblioref linkend="xmlschema-2"/>, including
    whitespace normalization, and the further requirement to be a
    conformant Expression per <biblioref linkend="xpath31"/> or selection
    pattern per <biblioref linkend="xslt30"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>MediaTypes</type>:
    As a whitespace separated list of media types as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
</itemizedlist>
</section>

    <section xml:id="common-errors">
      <title>Common errors</title>
      <para>A number of errors apply generally:</para>
      <itemizedlist>
        <listitem>
          <para><error code="S0059">It is a <glossterm>static error</glossterm> if the pipeline
              element is not <tag>p:declare-step</tag> or
                <tag>p:library</tag>.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="S0008">It is a <glossterm>static error</glossterm> if any element in
              the XProc namespace has attributes not defined by this specification unless they are
                <glossterm baseform="extension
attribute">extension attributes</glossterm>.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="S0038">It is a <glossterm>static error</glossterm> if any required
              attribute is not provided.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="S0077">It is a <glossterm>static error</glossterm> if the value on an
            attribute of an XProc element does not satisfy the type required for that attribute.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="D0028">It is a <glossterm>dynamic error</glossterm> if any attribute
              value does not satisfy the type required for that attribute.</error></para>
        </listitem>
        <listitem>
          <para><error code="S0044">It is a <glossterm>static error</glossterm> if any element in
              the XProc namespace or any step has element children other than those specified for it
              by this specification. In particular, the presence of atomic steps for which there is
              no visible declaration may raise this error. </error></para>
        </listitem>
        <listitem>
          <para><error code="S0037">It is a <glossterm>static error</glossterm> if any user extension 
            step or any element in the XProc namespace other than <tag>p:inline</tag> directly contains 
            text nodes that do not consist entirely of whitespace.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="D0019">It is a <glossterm>dynamic error</glossterm> if any option value
              does not satisfy the type required for that option.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="S0015">It is a <glossterm>static error</glossterm> if a compound step
              has no <glossterm>contained steps</glossterm>.</error>
          </para>
        </listitem>
        <listitem>
          <para><error code="D0012">It is a <glossterm>dynamic error</glossterm> if any attempt is
              made to dereference a URI where the scheme of the URI reference is not
              supported.</error> Implementations are encouraged to support as many schemes as is
            practical and, in particular, they <rfc2119>should</rfc2119> support both the
              <literal>file:</literal> and <literal>http(s):</literal> schemes. <impl>The set of URI
              schemes actually supported is <glossterm>implementation-defined</glossterm>.</impl>
          </para>
        </listitem>
        <listitem>
          <para><error code="D0030">It is a <glossterm>dynamic error</glossterm> if a step is unable
              or incapable of performing its function.</error> This is a general error code for
            “step failed” (e.g., if the input isn't of the expected type or if attempting to process
            the input causes the implementation to abort). Users and implementers who create
            extension steps are encouraged to use this code for general failures.</para>
        </listitem>
        <listitem>
          <para>In most steps which use a select expression or match pattern, any kind of node can
            be identified by the expression or pattern. However, some expressions and patterns on
            some steps are only applicable to some kinds of nodes (e.g., it doesn't make sense to
            speak of adding attributes to a comment!). </para>
          <para><error code="C0023">It is a <glossterm>dynamic error</glossterm> if a select
              expression or match pattern returns a node type that is not allowed by the
              step.</error>
          </para>
        </listitem>
      </itemizedlist>
      <para>If an XProc processor can determine statically that a dynamic error will
          <emphasis>always</emphasis> occur, it <rfc2119>may</rfc2119> report that error statically
        provided that the error <emphasis>does not</emphasis> occur among the descendants of a
          <tag>p:try</tag>. Dynamic errors inside a <tag>p:try</tag>
        <rfc2119>must not</rfc2119> be reported statically. They must be raised dynamically so that
          <tag>p:catch</tag> processing can be performed on them. </para>
    </section>
  </section>
  <section xml:id="steps">
    <title>Steps</title>
    <para>This section describes the core language steps of XProc; the full
vocabulary of standard, atomic steps is described in
<biblioref linkend="std-components"/>.</para>

<para>The following dynamic errors are described in the atomic step vocabulary.
They are repeated here so that the list of dynamic errors is wholly contained
within this specification.</para>

<note xml:id="ednote-dup-derrs" role="editorial">
<title>Editorial Note</title>
<para>This is not the right long term solution.</para>
</note>

<itemizedlist>
<listitem>
<para><error code="D0014">It is a
<glossterm>dynamic error</glossterm> for any unqualified attribute
names other than “<literal>name</literal>”,
“<literal>namespace</literal>”, or “<literal>value</literal>” to
appear on a <code>c:param</code> element.</error></para>
</listitem>
<listitem>
<para><error code="D0025" >It is a <glossterm>dynamic
error</glossterm> if the <tag class="attribute" >namespace</tag>
attribute is specified on <code>c:param</code>,
the <tag class="attribute">name</tag> contains
a colon, and the specified namespace is not the same as the in-scope
namespace binding for the specified prefix.</error></para>
</listitem>
<listitem>
<para><error code="D0018">It is a
<glossterm>dynamic error</glossterm> if the <code>c:parameter-set</code>
parameter list contains
any elements other than <tag>c:param</tag>.</error></para>
</listitem>
<listitem>
<para><error code="D0034">On steps which allow independent specification
of a namespace and a name, it is a
<glossterm>dynamic error</glossterm> to specify a new namespace or
prefix if the lexical value of the specified name contains a
colon.</error></para>
</listitem>
</itemizedlist>

<section xml:id="pipelines">
<title>Pipelines</title>

<para>The document element of a pipeline document is
<tag>p:declare-step</tag> which declares a pipeline that can be
evaluated by an XProc processor.</para>

<para>It encapsulates the behavior of a
<glossterm>subpipeline</glossterm>. Its children declare inputs,
outputs, and options that the pipeline exposes and identify the steps
in its subpipeline.
</para>

<para>Viewed from the outside, a <tag>p:declare-step</tag> is a black
box which performs some calculation on its inputs and produces its
outputs. From the pipeline author's perspective, the computation
performed by the pipeline is described in terms of
<glossterm>contained steps</glossterm> which read the pipeline's
inputs and produce the pipeline's outputs.</para>

<para>A <tag>p:declare-step</tag> element can also be nested inside
other <tag>p:declare-step</tag> or <tag>p:library</tag> elements in
which case it simply declares a pipeline that will be run
elsewhere.</para>

<para>For more details, see <xref linkend="p.declare-step"/>.</para>

<section xml:id="example-pipeline"
         role="tocsuppress">
<title>Example</title>
<para>A pipeline might accept a document as input; perform XInclude, validation, and
transformation; and produce the transformed document as its output.</para>
<example xml:id="ex.p.pipeline">
  <title>A Sample Pipeline Document</title>
  <programlisting language="xml"><xi:include href="../../../build/examples/pipeline.txt" parse="text"/></programlisting>
</example>
</section>
</section>

<section xml:id="p.for-each">
<title>p:for-each</title>

<para>A for-each is specified by the <tag>p:for-each</tag> element. It
is a <glossterm>compound step</glossterm> that processes a sequence of
documents, applying its <glossterm>subpipeline</glossterm> to each
document in turn.</para>

<e:rng-pattern name="ForEach"/>

<para>When a pipeline needs to process a sequence of documents using a
subpipeline that only processes a single document, the
<tag>p:for-each</tag> construct can be used as a wrapper around that
subpipeline. The <tag>p:for-each</tag> will apply that subpipeline to
each document in the sequence in turn.</para>
<para>The result of the <tag>p:for-each</tag> is a
        sequence of documents produced by processing each individual document in the input sequence.
        If the <tag>p:for-each</tag> has one or more output ports, what appears on each of those
        ports is the sequence of documents that is the concatenation of the sequence produced by
        each iteration of the loop on the port to which it is connected. If the iteration source for
        a <tag>p:for-each</tag> is an empty sequence, then the subpipeline is never run and an empty
        sequence is produced on all of the outputs. </para>

<para>The <tag>p:for-each</tag> has a single anonymous input: its
<glossterm>connection</glossterm> is provided by the
<tag>p:with-input</tag>. If no iteration sequence is explicitly provided,
then the iteration source is read from the <glossterm>default readable
port</glossterm>.</para>

<para>The processor provides each document, one at a time, to the
          <glossterm>subpipeline</glossterm> represented by the children of the
          <tag>p:for-each</tag> on a port named <port>current</port>.</para>
<para>For each declared
        output, the processor collects all the documents that are produced for that output from all
        the iterations, in order, into a sequence. The result of the <tag>p:for-each</tag> on that
        output is that sequence of documents.</para>
      <!--
<para>The <glossterm>environment</glossterm> of a <tag>p:for-each</tag> is its
inherited environment
with the <link linkend="dt-standard-modifications">standard modifications</link>.</para>
-->
      <para>The environment inherited by the <glossterm>contained steps</glossterm> of a
          <tag>p:for-each</tag> is the <glossterm>inherited environment</glossterm> with these
        modifications:</para><itemizedlist>
        <listitem>
          <para>The port named “<port>current</port>” on the <tag>p:for-each</tag> is added to the
              <glossterm>readable ports</glossterm>.</para>
        </listitem>
        <listitem>
          <para>The port named “<port>current</port>” on the <tag>p:for-each</tag> is made the
              <glossterm>default readable port</glossterm>.</para>
        </listitem>
      </itemizedlist><para>If the <tag>p:for-each</tag> has a <glossterm>primary output
          port</glossterm> (explicit or <link linkend="primary-input-output">supplied by
          default</link>) and that port has no <glossterm>connection</glossterm>, then it is
        connected to the <glossterm>primary output port</glossterm> of the <glossterm>last
          step</glossterm> in the <glossterm>subpipeline</glossterm>. <error code="S0006">It is a
            <glossterm>static error</glossterm> if the primary output port has no explicit
          connection and the <glossterm>last step</glossterm> in the subpipeline does not have a
          primary output port.</error></para>
<para>Note that outputs declared for a
          <tag>p:for-each</tag> serve a dual role. Inside the <tag>p:for-each</tag>, they are used
        to read results from the subpipeline. Outside the <tag>p:for-each</tag>, they provide the
        aggregated results.</para>
<para>The <tag class="attribute">sequence</tag> attribute on a
          <tag>p:output</tag> inside a <tag>p:for-each</tag> only applies inside the step. From the
        outside, all of the outputs produce sequences.</para><section
        xml:id="for-each-xpath-context">
        <title>XPath Context</title>
        <para>Within a <tag>p:for-each</tag>, the <function>p:iteration-position</function> and
            <function>p:iteration-size</function> are taken from the sequence of documents that will
          be processed by the <tag>p:for-each</tag>. The total number of documents is the
            <function>p:iteration-size</function>; the ordinal value of the current document (the
          document appearing on the <port>current</port> port) is the
            <function>p:iteration-position</function>.</para>
        <note xml:id="impl1">
          <title>Note to implementers</title>
          <para>In the case where no XPath expression that must be evaluated by the processor makes
            any reference to <function>p:iteration-size</function>, its value does not actually have
            to be calculated (and the entire input sequence does not, therefore, need to be buffered
            so that its size can be calculated before processing begins).</para>
        </note>
      </section><section xml:id="example-for-each" role="tocsuppress">
        <title>Example</title>
        <para>A <tag>p:for-each</tag> might accept a sequence of chapters as its input, process each
          chapter in turn with XSLT, a step that accepts only a single input document, and produce a
          sequence of formatted chapters as its output.</para>
        <example xml:id="ex.p.for-each">
          <title>A Sample For-Each</title>
          <programlisting language="xml"><xi:include href="../../../build/examples/for-each.txt" parse="text"/></programlisting>
        </example>
        <para>The <code>//chapter</code> elements of the document are selected. Each chapter is
          transformed into HTML and XSL Formatting Objects using an XSLT step. The resulting HTML
          and FO documents are aggregated together and appear on the <literal>html-results</literal>
          and <literal>fo-results</literal> ports, respectively, of the <literal>chapters</literal>
          step itself.</para>
      </section></section>

<section xml:id="p.viewport">
<title>p:viewport</title>

<para>A viewport is specified by the <tag>p:viewport</tag> element. It
is a <glossterm>compound step</glossterm> that processes a single XML
document, applying its <glossterm>subpipeline</glossterm> to one or
more subtrees of the document. </para>

<e:rng-pattern name="Viewport"/>

<para>The result of the <tag>p:viewport</tag> is a copy of the
original document where the selected subtrees have been replaced by
the results of applying the subpipeline to them.</para>

<para>The <tag>p:viewport</tag> has a single anonymous input: its
<glossterm>connection</glossterm> is provided by the
<tag>p:with-input</tag>. If no document is explicitly provided,
then the viewport source is read from the <glossterm>default readable
port</glossterm>. If the <tag>p:viewport</tag> input is a sequence,
each document in the sequence is processed in turn producing a sequence
on the output.</para>

<para>The <tag class="attribute">match</tag> attribute specifies
        an XSLT match pattern. Each matching node in the source document is wrapped in a document
        node, as necessary, and provided, one at a time, to the viewport's
          <glossterm>subpipeline</glossterm> on a port named <port>current</port>. The base URI of
        the resulting document that is passed to the subpipeline is the base URI of the matched
        element or document. <error code="D0010">It is a <glossterm>dynamic error</glossterm> if the
            <tag class="attribute">match</tag> expression on <tag>p:viewport</tag> does not match an
          element or document.</error>
      </para>
<para>After a match is found, the entire subtree rooted at that match is processed as a
        unit. No further attempts are made to match nodes among the descendants of any matched
        node.</para>
<para>The environment inherited by the <glossterm>contained steps</glossterm> of
        a <tag>p:viewport</tag> is the <glossterm>inherited environment</glossterm> with these
        modifications:</para><itemizedlist>
        <listitem>
          <para>The port named “<port>current</port>” on the <tag>p:viewport</tag> is added to the
              <glossterm>readable ports</glossterm>.</para>
        </listitem>
        <listitem>
          <para>The port named “<port>current</port>” on the <tag>p:viewport</tag> is made the
              <glossterm>default readable port</glossterm>.</para>
        </listitem>
      </itemizedlist><para>The <tag>p:viewport</tag> must contain a single, <glossterm>primary
          output port</glossterm> declared explicitly or <link linkend="primary-input-output"
          >supplied by default</link>. If that port has no <glossterm>connection</glossterm>, then
        it is connected to the <glossterm>primary output port</glossterm> of the <glossterm>last
          step</glossterm> in the <glossterm>subpipeline</glossterm>. <error code="S0006">It is a
            <glossterm>static error</glossterm> if the primary output port is unconnected and the
            <glossterm>last step</glossterm> in the subpipeline does not have a primary output
          port.</error></para>
<para>What appears on the output from the <tag>p:viewport</tag> will
        be a copy of the input document where each matching node is replaced by the result of
        applying the subpipeline to the subtree rooted at that node. In other words, if the match
        pattern matches a particular element then that element is wrapped in a document node and
        provided on the <port>current</port> port, the subpipeline in the <tag>p:viewport</tag> is
        evaluated, and the result that appears on the <port>output</port> port replaces the matched
        element. </para>
<para>If no documents appear on the <port>output</port> port, the matched
        element will effectively be deleted. If exactly one document appears, the contents of that
        document will replace the matched element. If a sequence of documents appears, then the
        contents of each document in that sequence (in the order it appears in the sequence) will
        replace the matched element.</para>
<para>The output of the <tag>p:viewport</tag> itself is a
        single document that appears on a port named “<literal>result</literal>”. Note that the
        semantics of <tag>p:viewport</tag> are special. The <port>output</port> port in the
          <tag>p:viewport</tag> is used only to access the results of the subpipeline. The output of
        the step itself appears on a port with the fixed name “<literal>result</literal>” that is
        never explicitly declared.</para><section xml:id="viewport-xpath-context">
        <title>XPath Context</title>
        <para>Within a <tag>p:viewport</tag>, the <function>p:iteration-position</function> and
            <function>p:iteration-size</function> are taken from the sequence of documents that will
          be processed by the <tag>p:viewport</tag>. The total number of documents is the
            <function>p:iteration-size</function>; the ordinal value of the current document (the
          document appearing on the <port>current</port> port) is the
            <function>p:iteration-position</function>.</para>
        <note xml:id="impl2">
          <title>Note to implementers</title>
          <para>In the case where no XPath expression that must be evaluated by the processor makes
            any reference to <function>p:iteration-size</function>, its value does not actually have
            to be calculated (and the entire input sequence does not, therefore, need to be buffered
            so that its size can be calculated before processing begins).</para>
        </note>
      </section><section xml:id="example-viewport" role="tocsuppress">
        <title>Example</title>
        <para>A <tag>p:viewport</tag> might accept an XHTML document as its input, add an
            <tag>hr</tag> element at the beginning of all <tag>div</tag> elements that have the
          class value “chapter”, and return an XHTML document that is the same as the original
          except for that change.</para>
        <example xml:id="ex.p.viewport">
          <title>A Sample Viewport</title>
          <programlisting language="xml"><xi:include href="../../../build/examples/viewport.txt" parse="text"/></programlisting>
        </example>
        <para>The nodes which match <code>h:div[@class='chapter']</code> in the input document are
          selected. An <code>hr</code> is inserted as the first child of each <code>h:div</code> and
          the resulting version replaces the original <code>h:div</code>. The result of the whole
          step is a copy of the input document with a horizontal rule as the first child of each
          selected <code>h:div</code>.</para>
      </section></section>

<section xml:id="p.choose">
<title>p:choose</title>

<para>A choose is specified by the <tag>p:choose</tag> element. It is
a <glossterm>multi-container step</glossterm> that selects exactly one
of a list of alternative <glossterm baseform="subpipeline"
>subpipelines</glossterm> based on the evaluation of XPath
expressions.</para>

      <e:rng-pattern name="Choose"/>

<para>A <tag>p:choose</tag> contains an arbitrary number of
alternative <glossterm
baseform="subpipeline">subpipelines</glossterm>, exactly one of which
will be evaluated. <error code="S0074">It is a <glossterm>static
error</glossterm> if a <tag>p:choose</tag> has neither a
<tag>p:when</tag> nor a <tag>p:otherwise</tag>.</error></para>

<para>The list of alternative subpipelines consists of zero or more
subpipelines guarded by an XPath expression, followed optionally by a
single default subpipeline.</para>

<para>The <tag>p:choose</tag> considers each subpipeline in turn and
selects the first (and only the first) subpipeline for which the guard
expression evaluates to true in its context. If there are no
subpipelines for which the expression evaluates to true, the default
subpipeline, if it was specified, is selected.</para>

<para>After a <glossterm>subpipeline</glossterm> is selected, it is
evaluated as if only it had been present.</para>

<para>The outputs of the <tag>p:choose</tag> are taken from the
outputs of the selected <glossterm>subpipeline</glossterm>. The
outputs <emphasis>available</emphasis> from the <tag>p:choose</tag>
are union of all of the outputs declared in any of its alternative
subpipelines.</para>

<para>Consider a <tag>p:choose</tag> that has two alternative
subpipelines where one declares output ports “A” and “B” and the other
declares output ports “B” and “C”. The outputs available from the
<tag>p:choose</tag> are “A”, “B”, and “C”. No documents appear on any
outputs not declared in the subpipline actually selected.</para>

<para>In order to maintain consistency with respect to the
<glossterm>default readable port</glossterm>, if any subpipeline has a
<glossterm>primary output port</glossterm>, even implicitly, then
<emphasis>every</emphasis> subpipline must have exactly the same
primary output port. In some cases, this may require making the implicit
primary output explicit in order to assure that it has the same name.
</para>

<para>As a convenience to authors, it is not an error if some
subpipelines declare outputs that can produce sequences and some do
not. Each output of the <tag>p:choose</tag> is declared to produce a
sequence if that output is declared to produce a sequence in any of
its subpipelines.</para>

<para><error code="D0004">It is a <glossterm>dynamic
error</glossterm> if no <glossterm>subpipeline</glossterm> is selected
by the <tag>p:choose</tag> and no default is provided.</error></para>

<para>The <tag>p:choose</tag> can specify the context node against
which the XPath expressions that occur on each branch are evaluated.
The context node is specified as a <glossterm>connection</glossterm>
in the <tag>p:with-input</tag>. If no explicit connection is provided,
the <glossterm>default readable port</glossterm> is used. If the
context node is connected to <tag>p:empty</tag>, or is unconnected and
the <glossterm>default readable port</glossterm> is undefined, the
context item is undefined. <error code="D0005">It is a
<glossterm>dynamic error</glossterm> if more than one document appears
on the connection for this input port.</error>
</para>

<para>Each conditional <glossterm>subpipeline</glossterm> is
represented by a <tag>p:when</tag> element. The default branch is
represented by a <tag>p:otherwise</tag> element.</para>

<section xml:id="p.when"><title>p:when</title><para>A
          when specifies one subpipeline guarded by a test expression. </para>
        <e:rng-pattern name="When"/>
        <para>Each <tag>p:when</tag> branch of the <tag>p:choose</tag> has a <tag class="attribute"
            >test</tag> attribute which <rfc2119>must</rfc2119> contain an XPath expression. That
          XPath expression's effective boolean value is the guard for the
            <glossterm>subpipeline</glossterm> contained within that
          <tag>p:when</tag>.</para>

<para>The <tag>p:when</tag> can specify a context node against which
its <tag class="attribute">test</tag> expression is to be evaluated.
That context node is specified as a <glossterm>connection</glossterm>
for the <tag>p:with-input</tag>. If no context is specified on the
<tag>p:when</tag>, the context of the <tag>p:choose</tag> is
used.</para>
<para><error code="D0005">If the <tag
class="attribute">collection</tag> attribute is not specified, or if
its value is false,
it is a <glossterm>dynamic error</glossterm> if
more than one document appears on the connection for the <tag>p:when</tag>
test expression.</error> If the collection attribute has the value true,
then the default collection will contain all of the documents that appeared
on that input and the context item will be undefined.
</para>
</section>

<section xml:id="p.otherwise"
><title>p:otherwise</title><para>An otherwise specifies the default
branch; the subpipeline selected if no test expression on any
preceding <tag>p:when</tag> evaluates to true.</para>

        <e:rng-pattern name="Otherwise"/>
      </section><section xml:id="example-choose" role="tocsuppress">
        <title>Example</title>
        <para>A <tag>p:choose</tag> might test the version attribute of the document element and
          validate with an appropriate schema.</para>
        <example xml:id="ex.p.choose">
          <title>A Sample Choose</title>
          <programlisting language="xml"><xi:include href="../../../build/examples/choose.txt" parse="text"/></programlisting>
        </example>
      </section></section>

<section xml:id="p.if">
<title>p:if</title>

<para>A <tag>p:if</tag> specifies a single subpipeline guarded by a test expression.</para>

<e:rng-pattern name="If"/>

<para>The <tag>p:if</tag> has a <tag class="attribute">test</tag>
attribute which <rfc2119>must</rfc2119> contain an XPath expression.
That XPath expression's effective boolean value is the guard for the
<glossterm>subpipeline</glossterm> contained within it.
</para>

<para>The <tag>p:if</tag> can specify a context node against which
its <tag class="attribute">test</tag> expression is to be evaluated.
That context node is specified as a <glossterm>connection</glossterm>
for the <tag>p:with-input</tag>. If no context is specified on the
<tag>p:if</tag>, the context comes from the
<glossterm>default readable port</glossterm>.</para>

<para><error code="D0005">If the <tag
class="attribute">collection</tag> attribute is not specified, or if
its value is false,
it is a <glossterm>dynamic error</glossterm> if
more than one document appears on the connection for the <tag>p:if</tag>
test expression.</error> If the collection attribute has the value true,
then the default collection will contain all of the documents that appeared
on that input and the context item will be undefined.
</para>

<para>If the effective boolean value of the test expression is true, then
the subpipline will be run. If it is not run, then none of the output ports
on the <tag>p:if</tag> will produce any documents.</para>
</section>

    <section xml:id="p.group"><title>p:group</title><para>A group is specified by the
          <tag>p:group</tag> element. In a <tag>p:try</tag>, it is a non-step wrapper, everywhere
        else, it is a <glossterm>compound step</glossterm>. A group encapsulates the behavior of its
          <glossterm>subpipeline</glossterm>.</para>
      <e:rng-pattern name="Group"/>
      <para>A <tag>p:group</tag> is a convenience wrapper for a collection of steps. </para><section
        xml:id="example-group" role="tocsuppress">
        <title>Example</title>
        <example xml:id="ex.p.group">
          <title>An Example Group</title>
          <programlisting language="xml"><xi:include href="../../../build/examples/group.txt" parse="text"/></programlisting>
        </example>
      </section></section>

<section xml:id="p.try">
<title>p:try</title>

<para>A try/catch is specified by the <tag>p:try</tag> element. It is
a <glossterm>multi-container step</glossterm> that isolates a
<glossterm>subpipeline</glossterm>, preventing any dynamic errors that
arise within it from being exposed to the rest of the pipeline.</para>

<e:rng-pattern name="Try"/>

<para>The <tag>p:group</tag> represents the initial subpipeline and
the recovery (or “catch”) pipelines are identified with
<tag>p:catch</tag> elements. The <tag>p:finally</tag> pipeline always
runs after the <tag>p:try</tag>.</para>

<para><error code="S0075">It is a <glossterm>static error</glossterm>
if a <tag>p:try</tag> does not have exactly one <tag>p:group</tag> and
at least one <tag>p:catch</tag> or exactly one <tag>p:finally</tag>.</error></para>

<para>The <tag>p:try</tag> step evaluates the initial subpipeline and,
if no errors occur, the outputs of that pipeline are the outputs of
the <tag>p:try</tag> step. However, if any errors occur, the
<tag>p:try</tag> abandons the first subpipeline, discarding any output
that it might have generated, and considers the recovery
subpipelines.</para>

<para>Each <tag>p:catch</tag> pipeline is considered in document
order. All except the last <rfc2119>must</rfc2119> have a
<tag class="attribute">code</tag> attribute. If any of the specified error
codes matches the error that was raised in the <tag>p:group</tag>, then
that <tag>p:catch</tag> is selected as the recovery pipeline.
If the last <tag>p:catch</tag> does not have a <tag class="attribute">code</tag>
attribute, it is selected if no preceding <tag>p:catch</tag> has a
matching error code.
If there is no matching <tag>p:catch</tag>, the <tag>p:try</tag> fails.
<error code="S0064">It is a <glossterm>static error</glossterm>
if the <tag class="attribute">code</tag> attribute is missing from
any but the last <tag>p:catch</tag> or if any error code is
repeated.</error></para>

<para>If the recovery subpipeline is evaluated, the outputs of the
recovery subpipeline are the outputs of the <tag>p:try</tag> step. If
the recovery subpipeline is evaluated and a step within that
subpipeline fails, the <tag>p:try</tag> fails.
Irrespective of whether the initial subpipeline succeeds or fails,
if any recovery pipelines are selected, and whether they succeed or fail,
the <tag>p:finally</tag> block is <emphasis>always</emphasis> run after
all other processing of the <tag>p:try</tag> has finished.</para>

<para>The outputs of the <tag>p:try</tag> are taken from the
outputs of the initial <glossterm>subpipeline</glossterm> or the recovery
subpipline if an error occurred in the initial subpipeline. The
outputs <emphasis>available</emphasis> from the <tag>p:try</tag>
are union of all of the outputs declared in any of its alternative
subpipelines.</para>

<para>Consider a <tag>p:try</tag> that has an initial
subpipeline that declares output ports “A” and “B” and a recovery
subpipeline that
declares output ports “B” and “C”. The outputs available from the
<tag>p:try</tag> are “A”, “B”, and “C”. No documents appear on any
outputs not declared in the subpipeline whose results are actually
returned.</para>

<para>In order to maintain consistency with respect to the
<glossterm>default readable port</glossterm>, if any subpipeline has a
<glossterm>primary output port</glossterm>, even implicitly, then
<emphasis>every</emphasis> subpipline must have exactly the same
primary output port. In some cases, this may require making the implicit
primary output explicit in order to assure that it has the same name.
</para>

<para>As a convenience to authors, it is not an error if an output
port can produce a sequence in the initial subpipeline but not in the
recovery subpipeline, or vice versa. Each output of the
<tag>p:try</tag> is declared to produce a sequence if that output is
declared to produce a sequence in either of its subpipelines.</para>

<para>A pipeline author can cause an error to occur with the
<tag>p:error</tag> step.</para>

<para>The recovery subpipeline of a <tag>p:try</tag> is identified
with a <tag xml:id="p.catch">p:catch</tag>:</para>

<e:rng-pattern name="Catch"/>

<para>The environment inherited by the <glossterm>contained
steps</glossterm> of the <tag>p:catch</tag> is the
<glossterm>inherited environment</glossterm> with this
modification:</para>

<itemizedlist>
<listitem>
<para>The port named “<port>error</port>” on the <tag>p:catch</tag> is
added to the <glossterm>readable ports</glossterm>.</para>
</listitem>
</itemizedlist>

<para>What appears on the <port>error</port> output port is an <link
linkend="err-vocab">error document</link>. The error document may
contain messages generated by steps that were part of the initial
subpipeline. Not all messages that appear are indicative of errors;
for example, it is common for all <tag>xsl:message</tag> output from
the XSLT component to appear on the <port>error</port> output port. It
is possible that the component which fails may not produce any
messages at all. It is also possible that the failure of one component
may cause others to fail so that there may be multiple failure
messages in the document.</para>

<para>Irrespective of which pipeline is evaluated, the last thing that
the <tag>p:try</tag> step does is evaluate the
<tag xml:id="p.finally">p:finally</tag>
pipeline. This happens <emphasis>even if</emphasis> the <tag>p:try</tag>
fails.</para>

<e:rng-pattern name="Finally"/>

<para>The <tag>p:finally</tag> has no inputs and no outputs. It exists
only to handle recovery and resource cleanup tasks. If cleanup tasks
require access to readable ports, put them in the <tag>p:catch</tag>
block of an enclosing <tag>p:try</tag>.</para>

<section xml:id="err-vocab">
<title>The Error Vocabulary</title>

<para>In general, it is very difficult to predict error behavior. Step
failure may be catastrophic (programmer error), or it may be the
result of user error, resource failures, etc. Steps may detect more
than one error, and the failure of one step may cause other steps to
fail as well.</para>

<para>The <tag>p:try</tag>/<tag>p:catch</tag> mechanism gives pipeline
authors the opportunity to process the errors that caused the
<tag>p:try</tag> to fail. In order to facilitate some modicum of
interoperability among processors, errors that are reported on the
<literal>error</literal> output port of a <tag>p:catch</tag>
<rfc2119>should</rfc2119> conform to the format described here.
</para>

<section xml:id="cv.errors">
<title>c:errors</title>

<para>The error vocabulary consists of a root element,
<tag>c:errors</tag> which contains zero or more <tag>c:error</tag>
elements.</para>

<e:rng-pattern name="Errors"/>

</section>

<section xml:id="cv.error">
<title>c:error</title>

<para>Each specific error is represented by an <tag>c:error</tag>
element:</para>

<e:rng-pattern name="Error"/>

<para>The <tag class="attribute">name</tag> and <tag
class="attribute">type</tag> attributes identify the name and type,
respectively, of the step which failed.</para>

<para>The <tag class="attribute">code</tag> is an EQName which
identifies the error. For steps which have defined error codes, this
is an opportunity for the step to identify the error in a
machine-processable fashion. Many steps omit this because they do not
include the concept of errors identified by EQNames.</para>

<para>If the error was caused by a specific document, or by the
location of some erroneous construction in a specific document, the
<tag class="attribute">href</tag>, <tag class="attribute" >line</tag>,
<tag class="attribute">column</tag>, and <tag class="attribute"
>offset</tag> attributes identify this location. Generally, the error
location is identified either with line and column numbers or with an
offset from the beginning of the document, but not usually
both.</para>

<para>The content of the <tag>c:error</tag> element is any well-formed
XML. Specific steps, or specific implementations, may provide more
detail about the format of the content of an error
message.</para>

</section>
<section xml:id="error-example">
<title>Error Example</title>

<para>Consider the following XSLT stylesheet:</para>

<programlisting language="xml"><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

<xsl:template match="/">
  <xsl:message terminate="yes">
    <xsl:text>This stylesheet is </xsl:text>
    <emph>pointless</emph>
    <xsl:text>.</xsl:text>
  </xsl:message>
</xsl:template>

</xsl:stylesheet>]]></programlisting>

<para>If it was used in a step named “xform” in a <tag>p:try</tag>,
the following error document might be produced:</para>

<programlisting language="xml"><![CDATA[<c:errors xmlns:c="http://www.w3.org/ns/xproc-step">
  <c:error name="xform" type="p:xslt"
             href="style.xsl" line="6">This stylesheet is <emph>pointless</emph>.</c:error>
</c:errors>]]></programlisting>

<para>It is not an error for steps to generate non-standard error
output as long as it is well-formed.</para>
</section>
</section>

<section xml:id="example-try" role="tocsuppress">
<title>Example</title>
<para>A pipeline might attempt to process a document by dispatching it
to some web service. If the web service succeeds, then those results
are passed to the rest of the pipeline. However, if the web service
cannot be contacted or reports an error, the <tag>p:catch</tag> step
can provide some sort of default for the rest of the pipeline.</para>

<example xml:id="ex.p.trycatch">
<title>An Example Try/Catch</title>
<programlisting language="xml"><xi:include href="../../../build/examples/trycatch.txt" parse="text"/></programlisting>
</example>
</section>
</section>

<section xml:id="p.atomic"><title>Atomic Steps</title><para>In addition to the six step types
        described in the preceding sections, XProc provides a standard library of atomic step types.
        The full vocabulary of standards steps is described in <biblioref linkend="std-components"
        />.</para>
<para>All of the standard, atomic steps are invoked in the same way:</para>
      <e:rng-pattern name="OtherAtomicStep"/>
      <para>Where “<replaceable>p:atomic-step</replaceable>” <rfc2119>must</rfc2119> be in the XProc
        namespace and <rfc2119>must</rfc2119> be declared in either the standard library for the
        XProc version supported by the processor or explicitly imported by the surrounding pipeline
        (see <xref linkend="versioning-considerations"/>). </para></section>
    <section xml:id="p.extension"><title>Extension Steps</title><para>Pipeline authors may also have
        access to additional steps not defined or described by this specification. Atomic extension
        steps are invoked just like standard steps:</para>
      <e:rng-pattern name="OtherAtomicStep"/>
      <para>Extension steps <rfc2119>must not</rfc2119> be in the XProc namespace and there
          <rfc2119>must</rfc2119> be a <glossterm>visible</glossterm> step declaration at the point
        of use (see <xref linkend="scoping"/>).</para>
<para>If the relevant step declaration has no
          <glossterm>subpipeline</glossterm>, then that step invokes the declared atomic step, which
        the processor must know how to perform. These steps are implementation-defined extensions.
        </para>
<para>If the relevant step declaration has a <glossterm>subpipeline</glossterm>, then
        that step runs the declared subpipeline. These steps are user- or implementation-defined
        extensions. Pipelines can refer to themselves (recursion is allowed), to pipelines defined
        in imported libraries, and to other pipelines in the same library if they are in a
        library.</para>
<para><error code="S0010">It is a <glossterm>static error</glossterm> if a
          pipeline contains a step whose specified inputs, outputs, and options do not <glossterm
            baseform="matches">match</glossterm> the <glossterm>signature</glossterm> for steps of
          that type.</error></para>
<para><error code="D0017">It is a <glossterm>dynamic
            error</glossterm> if the running pipeline attempts to invoke a step which the processor
          does not know how to perform.</error></para>
<para><impl>The presence of other <glossterm
            baseform="compound step">compound steps</glossterm> is
            <glossterm>implementation-defined</glossterm>; XProc provides no standard mechanism for
          defining them or describing what they can contain.</impl>
        <error code="S0048">It is a <glossterm>static error</glossterm> to use a declared step as a
            <glossterm>compound step</glossterm>.</error></para>

<section xml:id="option-shortcut">
<title>Syntactic Shortcut for Option Values</title>

<para>Namespace qualified attributes on a step are <glossterm
baseform="extension attribute" >extension attributes</glossterm>.
Attributes, other than <tag class="attribute" >name</tag>, that are
not namespace qualified are treated as a syntactic shortcut for
specifying the value of an option. In other words, the following two
steps are equivalent:</para>

<para>The first step uses the standard <tag>p:with-option</tag>
syntax:</para>

<programlisting language="xml"><![CDATA[<ex:stepType>
  <p:with-option name="option-name" select="'some value'"/>
</ex:stepType>]]></programlisting>

<para>The second step uses the syntactic shortcut:</para>

<programlisting language="xml"><![CDATA[<ex:stepType option-name="some value"/>]]></programlisting>

<para>There are some limitations to this shortcut
syntax:</para>

<orderedlist>
<listitem>
<para>It only applies to option names that are not in a
namespace.</para>
</listitem>
<listitem>
<para>It only applies to option names that are not otherwise used on
the step, such as “<literal>name</literal>”.</para>
</listitem>
</orderedlist>

<para>If the option value includes curly braces, it is treated as
an <glossterm>attribute value template</glossterm>. The context node for
attribute value templates in an option shortcut value comes from the
default readable port for the step on which they occur. If there is no
such port, the context node is undefined.</para>

<para><error code="S0027">It is a <glossterm>static error</glossterm> if an
option is specified with both the shortcut form and the long
form.</error>
<error code="S0031">It is a <glossterm>static error</glossterm> to use
an option on an <glossterm>atomic step</glossterm> that is not
declared on steps of that type.</error>
</para>

<para>The syntactic shortcuts apply equally to standard atomic steps
and extension atomic steps.</para>
</section>
</section>
</section>

<section xml:id="other-elements">
<title>Other pipeline elements</title>

<section xml:id="p.input">
<title>p:input</title>

<para>The declaration of an input identifies the name of the
port, whether or not the port accepts a sequence, whether or not the
port is a <glossterm>primary input port</glossterm>, what content types it
accepts, and may provide a connection to default inputs for the port.</para>

<para>An input <emphasis>declaration</emphasis> has the following
form:</para>

<e:rng-pattern name="Input"/>

<para>The attributes that can appear on <tag>p:input</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">port</tag></term>
<listitem>
<para>The <tag class="attribute">port</tag> attribute defines the name
of the port. <error code="S0011">It is a <glossterm>static
error</glossterm> to identify two ports with the same name on the same
step.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">sequence</tag></term>
<listitem>
<para>The <tag class="attribute" >sequence</tag> attribute determines
whether or not a sequence of documents is allowed on the port.
<error code="D0006">If <tag class="attribute">sequence</tag> is not
specified, or has the value false, then it is a <glossterm>dynamic
error</glossterm> unless exactly one document appears on the declared
port.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">primary</tag></term>
<listitem>
<para>The <tag class="attribute">primary</tag> attribute is used to
identify the <glossterm>primary input port</glossterm>. An input port
is a <glossterm>primary input port</glossterm> if
<tag class="attribute">primary</tag> is specified with the value
<literal>true</literal> or if the step has only a single input port
and <tag class="attribute">primary</tag> is not specified.
<error code="S0030">It is a <glossterm>static error</glossterm> to specify
that more than one input port is the primary.</error></para>
</listitem>
</varlistentry>

<varlistentry><term><tag class="attribute">select</tag></term>
<listitem>
<para>If a connection is provided in the declaration, then
<tag class="attribute">select</tag> may be used to select a portion of the
input identified by the <tag>p:empty</tag>, <tag>p:document</tag>,
or <tag>p:inline</tag> elements in the
<tag>p:input</tag>. This select expression <rfc2119>must</rfc2119> be an XPath
expression.
The selected nodes are returned as separate documents.
If such a document consists exclusively of text nodes, then it has a content
type of <literal>text/plain</literal>, otherwise it has a content type
of <literal>application/xml</literal>. <error code="D0016">It is a
<glossterm>dynamic error</glossterm> if the select expression on a p:input or
p:with-input returns anything other than document nodes, element nodes,
processing instruction nodes, comment nodes, text nodes or an empty sequence.</error></para>

<para>The
<tag class="attribute">select</tag> expression applies
<emphasis>only</emphasis> if the default connection is used. If an
explicit connection is provided by the caller, then the default select
expression is ignored.</para>
</listitem>
</varlistentry>

<varlistentry><term><tag class="attribute">content-types</tag></term>
<listitem>
<para>The <tag class="attribute">content-types</tag> attribute lists one
or more (space separated) content types that this input port will
accept. A content type must be of the form
“<literal><replaceable>type</replaceable>/<replaceable>subtype</replaceable>+<replaceable>ext</replaceable></literal>”
where any of <replaceable>type</replaceable>,
<replaceable>subtype</replaceable>, and <replaceable>ext</replaceable>
can be specified as “<literal>*</literal>” meaning “any”. The
“<literal>+<replaceable>ext</replaceable></literal>” is optional. Here
are some examples of content types for matching:</para>

<itemizedlist>
<listitem><simpara><literal>text/plain</literal>, plain text
documents</simpara>
</listitem>
<listitem><simpara><literal>text/*</literal>, any kind of text
document.</simpara>
</listitem>
<listitem><simpara><literal>*/*+xml</literal>, any XML content type.
</simpara>
</listitem>
<listitem><simpara><literal>*/*</literal>, any content type.
</simpara>
</listitem>
</itemizedlist>

<para>The media type of input documents must
<link linkend="media-type-match">match</link> the allowed content types.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">href</tag></term>
<listitem>
<para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">exclude-inline-prefixes</tag></term>
<listitem>
<para>The <tag class="attribute">exclude-inline-prefixes</tag> allows the pipeline
author to exclude some namespace declarations in inline content, see <tag>p:inline</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>On a <tag>p:declare-step</tag> for an atomic step, the
<tag>p:input</tag> can only declare the input port. <error
code="S0042">It is a <glossterm>static error</glossterm> to attempt to
provide a connection for an input port on the declaration of an atomic
step.</error></para>

<para xml:id="note-pipe-excl">The <tag>p:pipe</tag> element is
explicitly excluded from a declaration because it would make the
default value of an input dependent on the execution of some part of
the pipeline. If a runtime binding is provided for an input port, implementations
<rfc2119>must not</rfc2119> attempt to dereference the default
bindings.</para>

</section>
<section xml:id="p.with-input">
<title>p:with-input</title>

<para>An input <emphasis>connection</emphasis> has the following
form:</para>

<e:rng-pattern name="WithInput"/>

<para>The attributes that can appear on <tag>p:with-input</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">port</tag></term>
<listitem>
<para>If the <tag class="attribute">port</tag> is specified, then this
is a binding for the specified port. If no port is specified, then:</para>

<itemizedlist>
<listitem>
<para>In a <tag>p:viewport</tag> or <tag>p:for-each</tag>, it is a
binding for the step's single, anonymous input port.</para>
</listitem>
<listitem>
<para>In a <tag>p:choose</tag> or <tag>p:when</tag>, it is a
binding for the context item for the test expression(s).</para>
</listitem>
<listitem>
<para>Elsewhere, it is a binding for the primary input port of the
step in which it occurs.
<error code="S0065">It is a <glossterm>static error</glossterm> if there
is no primary input port.</error>
</para>
</listitem>
</itemizedlist>
<para><error code="S0086">It is a <glossterm>static error</glossterm>
to provide more than one p:with-input for the same port.</error>
</para>

<para>If no connection is provided for a <glossterm>primary input
port</glossterm>, the input will be connected to the
<glossterm>default readable port</glossterm>. <error code="S0032">It
is a <glossterm>static error</glossterm> if no connection is provided
and the <glossterm>default readable port</glossterm> is
undefined.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">select</tag></term>
<listitem>
<para>A <tag class="attribute">select</tag> expression
<rfc2119>may</rfc2119> also be provided with a connection.
The <tag class="attribute">select</tag> expression, if specified, applies the
specified XPath select expression to the document(s) that are read.</para>

<para>Each selected node is wrapped in a document (unless it is a document)
and provided to the input port. In other words,</para>

<programlisting language="xml"><xi:include href="../../../build/examples/input-doc.txt" parse="text"/></programlisting>

<para>provides a single document, but</para>

<programlisting language="xml"><xi:include href="../../../build/examples/input-select.txt" parse="text"/></programlisting>

<para>provides a sequence of zero or more documents, one for each
<code>html:div</code> in <uri>http://example.org/input.html</uri>.
(Note that in the case of nested <code>html:div</code> elements, this
will result in the same content being returned in several
documents.)</para>

<para>A select expression can equally be applied to input read from
another step. This input:</para><programlisting
language="xml"><xi:include href="../../../build/examples/input-port.txt"
parse="text"/></programlisting><para>provides a sequence of zero or
more documents, one for each <code>html:div</code> in the document (or
each of the documents) that is read from the <literal>result</literal>
port of the step named <literal>origin</literal>.</para>

<para>The base URI of the document that results from a select
expression is the base URI of the matched element or document.</para>

<para>If a document constructed by selection consists exclusively of
text nodes, then it has a content type of
<literal>text/plain</literal>, otherwise it has a content type of
<literal>application/xml</literal>. <error code="D0016">It is a
<glossterm>dynamic error</glossterm> if the select expression on a p:input or
p:with-input returns anything other than document nodes, element nodes,
processing instruction nodes, comment nodes, text nodes or an
empty sequence.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">href</tag></term>
<listitem>
<para>The <tag class="attribute">href</tag> attribute is a shortcut for
a <tag>p:document</tag> child with an <tag class="attribute">href</tag> attribute
having the same value as this <tag class="attribute">href</tag> attribute.
</para>

<para><error code="S0081">If <tag class="attribute">href</tag> is specified,
it is a <glossterm>static error</glossterm> if
any child elements other than <tag>p:documentation</tag> and
<tag>p:pipeinfo</tag> are present.</error></para>

<para><error code="S0085">It is a <glossterm>static error</glossterm> if both
a <tag class="attribute">href</tag> attribute and a
<tag class="attribute">pipe</tag> attribute are present.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">pipe</tag></term>
<listitem>
<para>The <tag class="attribute">pipe</tag> attribute is a shortcut for one or
more <tag>p:pipe</tag> children. The attribute value <rfc2119>must</rfc2119> be
whitespace-separated list of tokens or empty.
<error code="S0090">It is a <glossterm>static error</glossterm> if the value
of the <tag class="attribute">pipe</tag> attribute contains any tokens not
of the form <replaceable>port-name</replaceable>,
<replaceable>port-name@step-name</replaceable>, or <replaceable>@step-name</replaceable>.
</error>
If “<replaceable>port-name</replaceable>” is omitted,
the connection is to the primary output port of
the step named “<replaceable>step-name</replaceable>”.
If “<literal>@<replaceable>step-name</replaceable></literal>” is omitted,
the connection is to the specified port on the same step as the step associated with the
default readable port. If the value is empty, the connection is to
the default readable port.</para>
<para><error code="S0082">If <tag class="attribute">pipe</tag> is specified,
it is a <glossterm>static error</glossterm>
any child elements other than <tag>p:documentation</tag> and
<tag>p:pipeinfo</tag> are present.</error></para>
<para><error code="S0085">It is a <glossterm>static error</glossterm> if both
an <tag class="attribute">href</tag> attribute and a <tag class="attribute">pipe</tag>
attribute are present.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">exclude-inline-prefixes</tag></term>
<listitem>
<para>The <tag class="attribute">exclude-inline-prefixes</tag> allows the pipeline
author to exclude some namespace declarations in inline content, see <tag>p:inline</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>An input declaration may include a default connection. If no
connection is provided for an input port which has a default
connection, then the input is treated as if the default connection
appeared.</para>

<para>A <tag>p:with-input</tag> element with no children
(<foreignphrase>e.g.</foreignphrase>, “<code>&lt;p:with-input/&gt;</code>”)
is equivalent to an
input connection that contains only “<code>&lt;p:pipe/&gt;</code>”, which is
in turn equivalent to a binding to the default readable port.
</para>

<para>An input declaration may contain foreign element, scoped outside of XProc vocabulary
(<uri type="xmlnamespace">http://www.w3.org/ns/xproc</uri>) namespace. Each element is treated
as if wrapped with a <tag>p:inline</tag> element. For definition of this implicit behaviour
see <tag>p:inline</tag>.</para>

<para>A default connection does not satisfy the requirement that a
primary input port is automatically connected by the processor, nor is
it used when no default readable port is defined. In other words, a
<tag>p:declare-step</tag> can define
defaults for all of its inputs, whether they are primary or not, but
defining a default for a primary input usually has no effect. It's
never used by an atomic step since the step, when it's called, will
always connect the primary input port to the default readable port (or
cause a static error). The only case where it has value is on a
<tag>p:declare-step</tag> when that pipeline is invoked directly by the
processor. In that case, the processor <rfc2119>must</rfc2119> use the
default connection if no external connection is provided for the
port.</para>

</section>

<!-- ============================================================ -->

<section xml:id="p.output">
<title>p:output</title>

<para>A <tag>p:output</tag> identifies an output port, optionally
connecting an input for it, if necessary.</para>

<e:rng-pattern name="OutputDeclaration"/>

<para>The attributes that can appear on <tag>p:output</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">port</tag></term>
<listitem>
<para>The <tag class="attribute">port</tag> attribute defines the name
of the port. <error code="S0011">It is a <glossterm>static
error</glossterm> to identify two ports with the same name on the same
step.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">sequence</tag></term>
<listitem>
<para>An output declaration can indicate if a sequence of documents is
allowed to appear on the declared port. If <tag class="attribute"
>sequence</tag> is specified with the value <literal>true</literal>,
then a sequence is allowed. <error code="D0007">If <tag
class="attribute">sequence</tag> is not specified on
<tag>p:output</tag>, or has the value false, then it is a
<glossterm>dynamic error</glossterm> if the step does not produce
exactly one document on the declared port.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">primary</tag></term>
<listitem>
<para>The <tag class="attribute">primary</tag> attribute is used to
identify the primary output port. An output port is a primary output
port if <tag class="attribute">primary</tag> is specified with the
value <literal>true</literal> or if the step has only a single output
port and primary is not specified. <error code="S0014">It is a
<glossterm>static error</glossterm> to identify more than one output
port as primary.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">content-types</tag></term>
<listitem>
<para>An output declaration can indicate the content types of the
  documents appearing on that port. If <tag class="attribute">content-types</tag>
  is specified then only documents matching these content types are allowed
  to appear on that port. If the attribute is not specified,
  <literal>*/*</literal> is assumed. <error code="D0042">It is a <glossterm>dynamic error</glossterm>
  if a document arrives on an output port whose content type is not accepted
  by the output port specification.</error></para>

<note>
<para>Implementations are free to perform static checking of the
connected ports and indicate that the content types of the connected
ports will not match, however they <rfc2119>must not</rfc2119> raise an
error statically.
</para>
</note>

</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">serialization</tag></term>
<listitem>
<para>The <tag class="attribute">serialization</tag> attribute can
be used to provide <link linkend="serialization">serialization
parameters</link>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>On <glossterm baseform="compound step">compound
steps</glossterm>, the declaration <rfc2119>may</rfc2119> be
accompanied by a <glossterm>connection</glossterm> for the
output.</para>

<e:rng-pattern name="OutputConnection"/>

<para>The additional attributes that can appear on an output connection
are:</para>

<variablelist>
<varlistentry><term><tag class="attribute">href</tag></term>
<listitem>
<para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">pipe</tag></term>
<listitem>
<para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">exclude-inline-prefixes</tag></term>
<listitem>
<para>The <tag class="attribute">exclude-inline-prefixes</tag> allows the pipeline
author to exclude some namespace declarations in inline content, see <tag>p:inline</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para><error code="S0029">It is a <glossterm>static error</glossterm>
to specify a connection for a <tag>p:output</tag> inside a
<tag>p:declare-step</tag> for an atomic step.</error></para>

<para>If a connection is provided for a <tag>p:output</tag>, documents
are <emphasis>read from</emphasis> that connection and those documents
form the output that <emphasis>is written</emphasis> to the output
port. In other words, placing a <tag>p:document</tag> inside a
<tag>p:output</tag> causes the processor to <emphasis>read that
document</emphasis> and provide it on the output port. It
<emphasis>does not</emphasis> cause the processor to
<emphasis>write</emphasis> the output to that document.</para>

<section xml:id="serialization">
<title>Serialization parameters</title>

<!-- This ID exists so that old links to the p.serialization section
     will come here. Not that it will matter, but that's why.
-->
<para xml:id="p.serialization">The <tag class="attribute">serialization</tag>
attribute allows the user to request serialization parameters on an
output port. These parameters control XML serialization as defined
by <biblioref linkend="xpath-serialization"/>.
The attribute value is an XPath expression which returns
a map from strings to atomic values.</para>

<para>If the pipeline processor serializes the output on a port, it
<rfc2119 feature="ser-must-use">must</rfc2119> use the serialization
parameters specified. If the processor is not serializing (if, for
example, the pipeline has been called from another pipeline), then the
<tag class="attribute">serialization</tag>
<rfc2119 feature="ser-must-ignore">must</rfc2119> be
ignored.</para>

<para><impl>The default value of any serialization parameters not
specified on a particular output is
<glossterm>implementation-defined</glossterm>.</impl>
<error code="D0020">It is a <glossterm>dynamic error</glossterm> if
the combination of serialization options specified or defaulted is not
allowed.</error> Implementations <rfc2119>must</rfc2119> check that
all of the specified serialization options are allowed if they
serialize the specified output. If the specified output is not being
serialized implementations
<rfc2119>may</rfc2119> but are not required to check that the
specified options are allowed.</para>

<para>For XML outputs, see <xref linkend="xproc-xml-serialization"/>.
For non-XML outputs, see <xref linkend="xproc-non-xml-serialization"/>.</para>

<section xml:id="xproc-xml-serialization">
<title>XML serialization</title>

<para>The names and values of XML serialization parameters are defined
by <biblioref linkend="xml-serialization-31"/>.</para>

<para>The following parameters may be present in the serialization
map:</para>

<variablelist>
<varlistentry>
<term><option>byte-order-mark</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a boolean.
If it's not specified, the default varies by encoding: for UTF-16 it's
true, for all others, it's false.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>cdata-section-elements</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a list of
<type>EQName</type>s. They are interpreted as element names.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>doctype-public</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a string.
The public identifier of the doctype.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>doctype-system</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be an
<type>anyURI</type>. The system identifier of the doctype. It need not
be absolute, and is not resolved.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>encoding</option></term>
<listitem>
<para>A character set name. <impl>If no <option>encoding</option> is
specified, the encoding used is <glossterm>implementation-defined</glossterm>.
If the <option>method</option> is
“<literal>xml</literal>” or “<literal>xhtml</literal>”, the
implementation defined encoding <rfc2119>must</rfc2119> be either
UTF-8 or UTF-16.</impl></para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>escape-uri-attributes</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a
boolean. It is ignored unless the specified method is
“<literal>xhtml</literal>” or “<literal>html</literal>”.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>include-content-type</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a boolean.
It is ignored unless the specified method is
“<literal>xhtml</literal>” or “<literal>html</literal>”.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>indent</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a
boolean.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>media-type</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a string. It
specifies the media type (MIME content type). If not specified, the
default varies according to the <option>method</option>:</para>

<variablelist>
<varlistentry><term><literal>xml</literal></term>
<listitem><simpara><literal>application/xml</literal></simpara></listitem>
</varlistentry>
<varlistentry><term><literal>html</literal></term>
<listitem><simpara><literal>text/html</literal></simpara></listitem>
</varlistentry>
<varlistentry><term><literal>xhtml</literal></term>
<listitem><simpara><literal>application/xhtml+xml</literal></simpara></listitem>
</varlistentry>
<varlistentry><term><literal>text</literal></term>
<listitem><simpara><literal>text/plain</literal></simpara></listitem>
</varlistentry>
</variablelist>

<para><impl>For methods other than <literal>xml</literal>, <literal>html</literal>,
<literal>xhtml</literal>, and <literal>text</literal>; the
<option>media-type</option> is <glossterm>implementation-defined</glossterm>.
</impl></para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>method</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be an
<type>EQName</type>. It specifies the serialization method.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>normalization-form</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be an NMTOKEN,
one of the enumerated values <code>NFC</code>, <code>NFD</code>,
<code>NFKC</code>, <code>NFKD</code>, <code>fully-normalized</code>,
<code>none</code> or an implementation-defined value.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>omit-xml-declaration</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a
boolean.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>standalone</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be an NMTOKEN,
one of the enumerated values <code>true</code>, <code>false</code>, or
<code>omit</code>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>undeclare-prefixes</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a
boolean.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>use-character-maps</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a map
(<code>map(xs:string, xs:string)</code>). The keys are the characters
to be mapped (as <code>xs:string</code> instances). The corresponding
value for each key is the string to be substituted for that character.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>version</option></term>
<listitem>
<para>The value of this option <rfc2119>must</rfc2119> be a
string.</para>
</listitem>
</varlistentry>
</variablelist>

<para>In order to be consistent with the rest of this specification,
boolean values for the serialization parameters must use one of the
XML Schema lexical forms for boolean: "true", "false", "1", or "0".
This is different from the <biblioref linkend="xml-serialization-31"/>
specification which uses “yes” and “no”. No change in
semantics is implied by this different spelling.</para>

<para>The <option>method</option> option controls the serialization
method used by this component with standard values of 'html', 'xml',
'xhtml', and 'text' but only the 'xml' value is required to be
supported. The interpretation of the remaining options is as
specified in <biblioref linkend="xml-serialization-31"/>.</para>

<para><impl>Implementations may support other method values but their
results are <glossterm>implementation-defined</glossterm>.</impl>
</para>

<para>A minimally conforming implementation must support the
<code>xml</code> output method with the following option
values:</para>

<itemizedlist>
   <listitem><para>The <code>version</code> must support the value <code>1.0</code>.</para></listitem>
   <listitem><para>The <code>encoding</code> must support the values <code>UTF-8</code>.</para></listitem>
   <listitem><para>The <code>omit-xml-declaration</code> must be supported.  If the value is not specified or has the value <code>no</code>, an XML declaration must be produced.</para></listitem>
</itemizedlist>

<para>All other option values may be ignored for the <code>xml</code>
output method.</para>

<para>If a processor chooses to implement an option for serialization,
it must conform to the semantics defined in the <biblioref
linkend="xml-serialization-31"/> specification.</para>

</section>
<section xml:id="xproc-non-xml-serialization">
<title>Non-XML serialization</title>

<para><impl>The names and values of non-XML serialization parameters are
<glossterm>implementation-defined</glossterm>.</impl></para>
</section>

</section>
</section>

<!-- ============================================================ -->

<section xml:id="variables-options">
<title>Variables and Options</title>

<para>Variables and options provide a mechanism for pipeline authors
to construct temporary results and hold onto them for reuse.</para>

<para>Variables are created in compound steps and, like XSLT
variables, are single assignment, though they may be shadowed by
subsequent declarations of other variables with the same name.</para>

<para>Options can be declared on atomic or compound steps. The value
of an option can be specified by the caller invoking the step. Any
value specified by the caller takes precedence over the default value
of the option.</para>

<section xml:id="p.variable">
<title>p:variable</title>

<para>A <tag>p:variable</tag> declares a variable and associates a
value with it. Variable declarations may optionally specify the type
of the variable using an
<biblioref linkend="xpath31"/>
<link xlink:href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</link>.
</para>

<e:rng-pattern name="GeneralVariable"/>

<para>The attributes that can appear on <tag>p:variable</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">name</tag></term>
<listitem>
<para>The name of the variable <rfc2119>must</rfc2119> be an EQName. If
it does not contain a prefix then it is in no namespace. <error
code="S0028">It is a <glossterm>static error</glossterm> to declare an
option or variable in the XProc namespace.</error> <error code="S0087">It is
a <glossterm>static error</glossterm> if the name attribute on
<tag>p:option</tag> or <tag>p:variable</tag> has a prefix which is not
bound to a namespace.</error>
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">as</tag></term>
<listitem>
<para>The type of the value may be specified in the <tag
class="attribute">as</tag> attribute using an
<biblioref linkend="xpath31"/>
<link xlink:href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</link>.
See <xref linkend="varopt-types"/>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">static</tag></term>
<listitem>
<para>An indication of whether the variable is to be evaluated
statically or not. See <link linkend="statics"/>.
If <tag class="attribute">static</tag> is not specified, it
defaults to “<code>false</code>”.</para>
<para><error code="S0098">It is a <glossterm>static error</glossterm> 
if a variable is declared as static and the <tag>p:variable</tag> has 
a <tag class="attribute">pipe</tag> attribute or <tag>p:pipe</tag> 
children.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">select</tag></term>
<listitem>
<para>The variable's value is specified with a <tag
class="attribute">select</tag> attribute. The <tag
class="attribute">select</tag> attribute <rfc2119>must</rfc2119> be
specified. The content of the <tag class="attribute">select</tag>
attribute is an XPath expression which will be evaluated to provide
the value of the variable.
<error code="S0094">It is a <glossterm>static error</glossterm> if
a <tag>p:variable</tag> does not have a select attribute.</error>
</para>
<para>The <tag class="attribute">select</tag> expression
is evaluated as an XPath expression using the appropriate context as
described in <xref linkend="xpath-context"/>, for the enclosing
<glossterm>container</glossterm>.
<impl>The precise details about what XPath expressions are allowed
(for example, can the expression declare a function) is
<glossterm>implementation-defined</glossterm>.</impl>
</para>
<para>Since all <glossterm>in-scope bindings</glossterm> are present
in the Processor XPath Context as variable bindings, <tag
class="attribute">select</tag> expressions may refer to the value of
<glossterm>in-scope bindings</glossterm> by variable reference.
<error code="S0071">It is a <glossterm>static error</glossterm>
if the XPath expression refers to the name of a variable that is
not present in the <glossterm>in-scope bindings</glossterm>.</error>
</para>

<para>If a <tag class="attribute">select</tag> expression is given,
the <glossterm>readable ports</glossterm> available for document
connections are computed as if <tag>p:variable</tag> was an atomic step.</para>

<para>If a <tag class="attribute">select</tag> expression is given but
no document connection is provided, the implicit connection is to the
<glossterm>default readable port</glossterm> computed as if <tag>p:variable</tag>
was an atomic step. If there is no default readable port, the
connection is treated as if <tag>p:empty</tag> was specified.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">collection</tag></term>
<listitem>
<para><error code="D0008">If <tag class="attribute">collection</tag> is
unspecified or has the value <literal>false</literal>,
it is a <glossterm>dynamic error</glossterm>
if a sequence of more than one document appears on the connection for
a <tag>p:variable</tag>.</error>
</para>

<para>If <tag class="attribute">collection</tag> is <literal>true</literal>,
the context item is undefined. All of the documents that appear on the
connection for the <tag>p:variable</tag> will be available as the
default collection within <tag class="attribute">select</tag> expression.</para>

<para><error code="D0026">It is a <glossterm>dynamic error</glossterm> if
the <tag class="attribute">select</tag> expression makes reference to
the context node, size, or position when the context item is
undefined.</error></para>
</listitem>
</varlistentry>

<varlistentry><term><tag class="attribute">visibility</tag></term>
<listitem>
<para>If the <tag>p:variable</tag> is a child of a <tag>p:library</tag>,
the <tag class="attribute">visibility</tag> attribute controls whether
the variable is visible to an importing pipeline. If
<tag class="attribute">visibility</tag> is set to “<literal>private</literal>”,
the variable is visible inside the <tag>p:library</tag> but not visible to
any pipeline importing the <tag>p:library</tag>. If the visibility attribute is
missing, “<literal>public</literal>” is assumed.
<error code="S0093">It is a <glossterm>static error</glossterm> if
<tag class="attribute">visibility</tag> is specified on a <tag>p:option</tag>
or <tag>p:variable</tag> that is not a child of <tag>p:library</tag>.</error>
</para>
</listitem>
</varlistentry>

<varlistentry><term><tag class="attribute">href</tag></term>
<listitem>
<para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">pipe</tag></term>
<listitem>
  <para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">exclude-inline-prefixes</tag></term>
<listitem>
<para>The <tag class="attribute">exclude-inline-prefixes</tag> allows the pipeline
author to exclude some namespace declarations in inline content, see <tag>p:inline</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Steps are connected together by their input and output
ports. Variables are connected to steps by their input, which provides
the context node for the expression, and by the expressions that contain
references to them. Any step which contains a reference to a variable
effectively consumes the “output” of the variable.
<error code="S0076">It is a <glossterm>static error</glossterm> if
there are any loops in the connections between steps and variables:
no step can refer to a variable if there is any sequence of connections
from that step that leads back to the input that provides the context
node for the expression that defines the value of the variable.</error>
</para>
</section>

<!-- ============================================================ -->

<section xml:id="p.option">
<title>p:option</title>

<para>A <tag>p:option</tag> declares an option and associates a
default value with it. Option declarations may optionally specify the type
of the option using an
<biblioref linkend="xpath31"/>
<link xlink:href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</link>.
</para>

<e:rng-pattern name="Option"/>

<para>The attributes that can appear on <tag>p:option</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">name</tag></term>
<listitem>
<para>The name of the option <rfc2119>must</rfc2119> be an EQName. If
it does not contain a prefix then it is in no namespace.
<error code="S0028">It is a <glossterm>static error</glossterm> to declare an
option or variable in the XProc namespace.</error> <error code="S0087">It is
a <glossterm>static error</glossterm> if the name attribute on
<tag>p:option</tag> or <tag>p:variable</tag> has a prefix which is not
bound to a namespace.</error>
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">as</tag></term>
<listitem>
<para>The type of the value may be specified in the <tag
class="attribute">as</tag> attribute using an
<biblioref linkend="xpath31"/>
<link xlink:href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</link>.
See <xref linkend="varopt-types"/>
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">static</tag></term>
<listitem>
<para>An indication of whether the option is to be evaluated
statically or not. See <link linkend="statics"/>.
If <tag class="attribute">static</tag> is not specified, it
defaults to “<code>false</code>”.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">required</tag></term>
<listitem>
<para>An option may declare that it is required by specifying
the value <literal>true</literal> for the
<tag class="attribute">required</tag> attribute. <error code="S0018">If an
option is required, it is a <glossterm>static error</glossterm> to
invoke the step without specifying a value for that
option.</error> If <tag class="attribute">required</tag> is not specified,
it defaults to “<code>false</code>”.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">select</tag></term>
<listitem>
<para>If an option is not required, its default value may be specified with a
<tag class="attribute">select</tag> attribute.
If no default value is specified, the default value is the empty sequence.
</para>

<para>If specified, the content of the
<tag class="attribute">select</tag> attribute is an XPath expression
which will be evaluated to provide the default value for the option.
</para>

<para>The default value of an option is specified with an XPath
expression on the <tag>p:declare-step</tag> that defines the step
signature. It must be a statically valid expression at that point.
Consequently, if it contains variable references, they can only be
references to preceding options on the step.
<error code="S0071">It is a <glossterm>static error</glossterm>
if the XPath expression refers to the name of a variable that is
not present in the <glossterm>in-scope bindings</glossterm>.</error>
<error code="D0026">It is a <glossterm>dynamic error</glossterm> if
the <tag class="attribute">select</tag> expression makes reference to
the context node, size, or position.</error></para>

<para><impl>The precise details about what XPath expressions are allowed
(for example, can the expression declare a function) is
<glossterm>implementation-defined</glossterm>.</impl>
</para>
</listitem>
</varlistentry>

<varlistentry><term><tag class="attribute">visibility</tag></term>
<listitem>
<para>If the <tag>p:option</tag> is a child of a <tag>p:library</tag>,
the <tag class="attribute">visibility</tag> attribute controls whether
the option is visible to an importing pipeline. If
<tag class="attribute">visibility</tag> is set to “<literal>private</literal>”,
the option is visible inside the <tag>p:library</tag> but not visible to
any pipeline importing the <tag>p:library</tag>. If the visibility attribute is
missing, “<literal>public</literal>” is assumed.
<error code="S0093">It is a <glossterm>static error</glossterm> if
<tag class="attribute">visibility</tag> is specified on a <tag>p:option</tag>
or <tag>p:variable</tag> that is not a child of <tag>p:library</tag>.</error>
</para>
</listitem>
</varlistentry>
</variablelist>

<para><error code="S0004">It is a <glossterm>static error</glossterm>
to declare two or more options on the same step with the same
name.</error></para>

<para>The following errors apply to options:</para>

<itemizedlist>
<listitem>
<para><error code="S0017">It is a <glossterm>static error</glossterm>
to specify that an option is both <tag class="attribute">required</tag>
<emphasis>and</emphasis> has a default value.</error></para>
</listitem>
<listitem>
<para><error code="S0095">It is a <glossterm>static error</glossterm>
to specify that an option is both <tag class="attribute">required</tag>
<emphasis>and</emphasis> static.</error></para>
</listitem>
</itemizedlist>

<para>The pipeline author may use <tag>p:with-option</tag> on a step
when it is invoked. Values specified with <tag>p:with-option</tag>
override any default values specified.</para>
</section>

<!-- ============================================================ -->

<section xml:id="p.with-option">
<title>p:with-option</title>

<para>A <tag>p:with-option</tag> provides an actual value for an
option when a step is invoked.</para>

<e:rng-pattern name="WithOption"/>

<para>The attributes that can appear on <tag>p:with-option</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">name</tag></term>
<listitem>
<para>The name of the option <rfc2119>must</rfc2119> be a EQName. If it
does not contain a prefix then it is in no namespace.
<error code="S0031">It is a <glossterm>static error</glossterm> to use an
option name in <tag>p:with-option</tag> if the step type being invoked
has not declared an option with that name.</error>
(This error does not apply for steps in the XProc namespace when the processor
is operating in
<link linkend="vers-forwcomp">forwards-compatible mode</link>.)</para>

<para><error code="S0080">It is a <glossterm>static error</glossterm>
to include more than one <tag>p:with-option</tag> with the same option
name as part of the same step invocation.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">as</tag></term>
<listitem>
<para>The type of the value may be specified in the <tag
class="attribute">as</tag> attribute using an
<biblioref linkend="xpath31"/>
<link xlink:href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</link>.
See <xref linkend="varopt-types"/>
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">select</tag></term>
<listitem>
<para>The actual value is specified with a <tag
class="attribute">select</tag> attribute. The <tag
class="attribute">select</tag> attribute <rfc2119>must</rfc2119> be
specified. The value of the <tag class="attribute">select</tag>
attribute is an XPath expression which will be evaluated to provide
the value of the variable.</para>

<para>All <glossterm>in-scope bindings</glossterm> for the step
instance itself are present in the Processor XPath Context as variable
bindings, so <tag class="attribute">select</tag> expressions may refer
to any option or variable bound in those <glossterm>in-scope
bindings</glossterm> by variable reference. If a variable reference
uses a QName that is not the name of an <glossterm
baseform="in-scope-bindings">in-scope binding</glossterm> or preceding
sibling option, an XPath evaluation error will occur.</para>

<para>If a <tag class="attribute">select</tag> expression is used but
no document connection is provided, the implicit connection is to the
<glossterm>default readable port</glossterm>. If there is no default
readable port, the connection is treated as if <tag>p:empty</tag> was
specified.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">collection</tag></term>
<listitem>
<para><error code="D0008">If <tag class="attribute">collection</tag> is
unspecified or has the value <literal>false</literal>,
it is a <glossterm>dynamic error</glossterm>
if a sequence of more than one document appears on the connection for
the <tag>p:with-option</tag>.</error>
</para>

<para>If <tag class="attribute">collection</tag> is <literal>true</literal>,
the context item is undefined. All of the documents that appear on the
connection for the <tag>p:with-option</tag> will be available as the
default collection within <tag class="attribute">select</tag> expression.</para>

<para><error code="D0026">It is a <glossterm>dynamic error</glossterm> if
the <tag class="attribute">select</tag> expression makes reference to
the context node, size, or position when the context item is
undefined.</error></para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">href</tag></term>
<listitem>
<para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">pipe</tag></term>
<listitem>
  <para>As described in <tag>p:with-input</tag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">exclude-inline-prefixes</tag></term>
<listitem>
<para>The <tag class="attribute">exclude-inline-prefixes</tag> allows the pipeline
author to exclude some namespace declarations in inline content, see <tag>p:inline</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para><error code="S0092">It is a <glossterm>static
error</glossterm> if a <tag>p:with-option</tag> attempts to change
the value of an option that is declared static.</error>
See <xref linkend="statics"/>.</para>
</section>

<section xml:id="statics">
<title>Static Options and Variables</title>

<para>A <tag>p:option</tag> or <tag>p:variable</tag> that is a
<emphasis>direct child</emphasis> of <tag>p:declare-step</tag> may be
declared “static”. Options and variables that are the direct
children of <tag>p:library</tag> <rfc2119>must</rfc2119> be declared
static.</para>

<para>The values of static options and variables are computed during
<link linkend="initiating">static analysis</link>.</para>
</section>

<section xml:id="varopt-types">
<title>Variable and option types</title>

<para>Variables and options may declare that they have a sequence type.
<error code="S0096">It is a <glossterm>static error</glossterm> if
the sequence type is not syntactically valid.</error></para>

<para>If a variable or option declares a type, the value provided for the
variable or option will be atomized according to the standard XPath rules.
<error code="D0036">It is a <glossterm>dynamic error</glossterm> if
the computed value does not match the specified sequence
type.</error></para>

<para>If the sequence type is a map with <type>xs:QName</type> keys
(<type>map(xs:QName, ...)</type>), the
<function>p:force-qname-keys</function> function is automatically applied to
the value. This makes it possible to pass in maps using (easier to
write) <type>xs:string</type> type keys that are converted
automatically into the required <type>xs:QName</type> keys.</para>
</section>

<!-- ============================================================ -->

<section xml:id="opt-bindings"><title>Namespaces on variables and options</title>

<para>Variable and option values carry with them not only
their literal or computed string value but also a set of namespaces.
To see why this is necessary, consider the following
step:</para><programlisting language="xml"><xi:include
href="../../../build/examples/opns-1.txt" parse="text"/></programlisting><para>The
<tag>p:delete</tag> step will delete elements that match the
expression “<literal>html:div</literal>”, but that expression can only
be correctly interpreted if there's a namespace binding for the prefix
“<literal>html</literal>” so that binding has to travel with the
option.</para>

<para>The default namespace bindings associated with a variable or
option value are computed as follows:</para><orderedlist>

<listitem>
<para>If the <tag class="attribute">select</tag> attribute was used to
specify the value and it consisted of a single
<literal>VariableReference</literal> (per <biblioref
linkend="xpath31"/>), then the namespace bindings from the referenced
option or variable are used.</para>
</listitem>
          <listitem>
            <para>If the <tag class="attribute">select</tag> attribute was used to specify the value
              and it evaluated to a node-set, then the in-scope namespaces from the first node in
              the selected node-set (or, if it's not an element, its parent) are used.</para>
            <para>The expression is evaluated in the appropriate context, See <xref
                linkend="xpath-context"/>.</para>
          </listitem>
          <listitem>
            <para>Otherwise, the in-scope namespaces from the element providing the value are used.
              (For options specified using <link linkend="option-shortcut">syntactic
                shortcuts</link>, the step element itself is providing the value.)</para>
          </listitem>
        </orderedlist><para>The default namespace is never included in the namespace bindings for a
          variable or option value. Unqualified names are always in
          no-namespace.</para>
<para>Unfortunately, in more complex situations, there may be no
          single variable or option that can reliably be expected to have the correct set
          of namespace bindings. Consider this
          pipeline:</para><programlisting language="xml"><xi:include href="../../../build/examples/opns-2.txt" parse="text"/></programlisting><para>It
          defines an atomic step (“<literal>ex:delete-in-div</literal>”) that deletes elements that
          occur inside of XHTML div elements. It might be used as
          follows:</para>

<programlisting language="xml"><xi:include href="../../../build/examples/opns-3.txt" parse="text"/></programlisting>

<para>In this case, the <varname>match</varname> option passed to the
<tag>p:delete</tag> step needs <emphasis>both</emphasis> the namespace
binding of “<literal>h</literal>” specified in the
<tag>ex:delete-in-div</tag> pipeline definition
<emphasis>and</emphasis> the namespace binding of
“<literal>html</literal>” specified in the <varname>divchild</varname>
option on the call of that pipeline. It's not sufficient to provide
just one of the sets of bindings.</para>

<para>If pipeline authors cannot arrange for all of the necessary namespace
bindings to be in scope, then EQNames can be used to remove the dependency
on namespace bindings:</para>

<programlisting language="xml"><xi:include href="../../../build/examples/opns-4.txt" parse="text"/></programlisting>

<para>In this example, the expression will match “<literal>p</literal>”
elements in the XHTML namespace irrespective of any bindings that may or may
not be in scope.</para>

</section>
    </section>
    <!-- ============================================================ -->

<section xml:id="p.declare-step">
<title>p:declare-step</title>

<para>A <tag>p:declare-step</tag> provides the type and
<glossterm>signature</glossterm> of an <glossterm>atomic
step</glossterm> or pipeline. It declares the inputs, outputs, and
options for all steps of that type.</para>

<e:rng-pattern name="DeclareStep"/>

<para>The attributes that can appear on <tag>p:declare-step</tag> are
<link linkend="common-attr">the common attributes</link> and:</para>

<variablelist>
<varlistentry><term><tag class="attribute">name</tag></term>
<listitem>
<para>The <tag class="attribute">name</tag> attribute provides a
name for the step. This name can be used within the subpipeline to
refer back to the declaration, for example, to read from its inputs.
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">type</tag></term>
<listitem>
<para>The <tag class="attribute">type</tag> attribute provides
a type for the step. 
The value of the <tag class="attribute">type</tag> can be from
any namespace provided that the expanded-QName of the value has a
non-null namespace URI. <error code="S0025">It is a <glossterm>static
error</glossterm> if the expanded-QName value of the <tag
class="attribute">type</tag> attribute is in no namespace or in the
XProc namespace.</error> Except as described in <xref
linkend="versioning-considerations"/>, the XProc namespace
<rfc2119>must not</rfc2119> be used in the type of steps. Neither
users nor implementers may define additional steps in the XProc
namespace.
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">psvi-required</tag></term>
<listitem>
<para>The <tag class="attribute">psvi-required</tag> attribute allows
the author to declare that a step relies on the processor's ability to
pass PSVI annotations between steps,
see <xref linkend="psvi-support"/>.
If the attribute is not specified, the value
“<literal>false</literal>” is assumed. </para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">xpath-version</tag></term>
<listitem>
<para>The requested <tag class="attribute">xpath-version</tag>
<rfc2119>must</rfc2119> be used to evaluate XPath expressions subject
to the constraints outlined in <xref linkend="xpath-context"/>. If the
attribute is not specified, the value “<literal>3.1</literal>” is
assumed.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">exclude-inline-prefixes</tag></term>
<listitem>
<para>The a description of <tag class="attribute">exclude-inline-prefixes</tag>,
see <tag>p:inline</tag>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">version</tag></term>
<listitem>
<para>The <tag class="attribute">version</tag> attribute identifies
the version of XProc for which this step declaration was authored. If
the <tag>p:declare-step</tag> has no ancestors in the XProc namespace,
then it <rfc2119>must</rfc2119> have a
<tag class="attribute">version</tag> attribute.
<error code="S0062">It is a <glossterm>static error</glossterm> if
a required version attribute is not present.</error>
See <xref linkend="versioning-considerations"/>.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">visibility</tag></term>
<listitem>

<para>If the <tag>p:declare-step</tag> is a child of a <tag>p:library</tag>
the <tag class="attribute">visibility</tag> attribute controls whether
the step is visible to an importing pipeline.
If <tag class="attribute">visibility</tag> is set to
<literal>private</literal>, the step type is only visible inside the
<tag>p:library</tag> and is not visible to any pipeline importing the
<tag>p:library</tag>. If the <tag class="attribute">visibility</tag>
attribute is missing, <literal>public</literal> is assumed. If the
<tag>p:declare-step</tag> is not a child of a <tag>p:library</tag> the
attribute has no effect and is ignored.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>A <tag>p:declare-step</tag> declares either an atomic step
or a pipeline. Atomic steps have an implementation defined elsewhere
in some implementation-defined way. Pipelines contain a subpipeline
which defines what they do.</para>

<para><impl>When a declared step is evaluated directly by the XProc
processor (as opposed to occurring as an atomic step in some
<glossterm>container</glossterm>), how the input and output ports are
connected to documents is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para>A step declaration is not a
<link linkend="step-concept">step</link> in its own right. Sibling
steps cannot refer to the inputs or outputs of a
<tag>p:declare-step</tag> using <tag>p:pipe</tag>; only instances of
the type can be referenced.</para>

<section xml:id="declare-atomic-steps">
<title>Declaring atomic steps</title>

<para>The distinction between an atomic step declaration and a
pipeline declaration hinges on the presence or absense of a
subpipeline. An atomic step declaration does not have a subpipeline.
</para>

<para>Atomic step declarations may not import other pipelines or
functions, may not declare static variables, and may not declare
additional steps. In other words, the content of an atomic step
declaration consists exclusively of <tag>p:input</tag>,
<tag>p:output</tag>, and <tag>p:option</tag> elements.</para>

<para><impl>Implementations may use
<glossterm baseform="extension attribute">extension
attributes</glossterm> to provide
<glossterm>implementation-dependent</glossterm> information about a
declared step.</impl> For example, such an attribute might identify
the code which implements steps of this type.</para>

<para>It is not an error for a pipeline to include declarations for
steps that a particular processor does not know how to implement. It
is, of course, an error to attempt to evaluate such steps.</para>

<note>
<para>Atomic step declarations are relatively uncommon and are usually
provided by the implementor of a pipelne processor. In ordinary usage,
pipeline declarations are much more common.</para>
</note>

</section>
<section xml:id="declare-pipelines">
<title>Declaring pipelines</title>

<para>When a <tag>p:declare-step</tag> declares a pipeline, that
pipeline encapsulates the behavior of the specified
<glossterm>subpipeline</glossterm>. Its children declare inputs,
outputs, and options that the pipeline exposes and identify the steps
in its subpipeline. </para>

<para>Informally, the content of a step declaration can be divided
into three sections: imports, a prologue, and a subpipeline. The
<tag>p:import</tag> and <tag>p:import-functions</tag> elements, if
they appear, must come first. After that, the prologue consists of
<tag>p:input</tag>, <tag>p:output</tag>, <tag>p:option</tag>, and
<tag>p:variable</tag> elements. Any variables declared in the prologue
must be static.</para>

<para>Neither options nor variables in the prologue may shadow
each other. <error code="S0091">It is a <glossterm>static
error</glossterm> if a <tag>p:option</tag> or <tag>p:variable</tag>
declared before the subpipeline begins shadows another option or
variable declared within the same <tag>p:declare-step</tag>.</error>
(Within the subpipeline, variables may shadow options and lexically
preceding variables, including those in the prologue.)
</para>

<para>The prologue ends with additional <tag>p:declare-step</tag>
elements, if any, and is followed by the subpipeline. Any step
imported or declared in the prologue of a pipeline may be invoked as a
step within the subpipeline of that pipeline.</para>

<para>The environment inherited by the
<glossterm>subpipeline</glossterm> is the <glossterm>empty
environment</glossterm> with these modifications:</para>

<itemizedlist>
<listitem>
<para>All of the declared inputs are added to the <glossterm>readable
ports</glossterm> in the environment.</para>
</listitem>
<listitem>
<para>If a <glossterm>primary input port</glossterm> is declared, that
port is the <glossterm>default readable port</glossterm>, otherwise
the default readable port is undefined.</para>
</listitem>
<listitem>
<para>The <glossterm>in-scope bindings</glossterm> at the beginning of
a <tag>p:declare-step</tag> are limited to the lexically preceding,
statically declared options and variables.</para>
</listitem>
</itemizedlist>

<para>If a <glossterm>primary output port</glossterm> is declared and
that port has no <glossterm>connection</glossterm>, then it is
connected to the <glossterm>primary output port</glossterm> of the
<glossterm>last step</glossterm> in the
<glossterm>subpipeline</glossterm>. <error code="S0006">It is a
<glossterm>static error</glossterm> if the primary output port is
unconnected and the <glossterm>last step</glossterm> in the
subpipeline does not have a primary output port.</error></para>

</section>
</section>

<!-- ============================================================ -->

<section xml:id="p.library">
<title>p:library</title>

<para>A <tag>p:library</tag> is a collection of static variables, static options,
and step declarations.</para>

<e:rng-pattern name="Library"/>

<para>The <tag class="attribute">version</tag> attribute identifies the version
of XProc for which this library was authored. If the
<tag>p:library</tag>
has no ancestors in the XProc namespace, then it <rfc2119>must</rfc2119>
have a <tag class="attribute">version</tag> attribute.
See <xref linkend="versioning-considerations"/>.</para>

<para>The requested <tag class="attribute">xpath-version</tag>
          <rfc2119>must</rfc2119> be used to evaluate XPath expressions subject to the constraints
          outlined in <xref linkend="xpath-context"/>. If the attribute is not specified, the value
          “<literal>3.1</literal>” is assumed. </para>
        <para>The <tag class="attribute">psvi-required</tag> attribute allows the author to declare
          that a step relies on the processor's ability to pass PSVI annotations between steps, see
            <xref linkend="psvi-support"/>. If the attribute is not specified, the value
            “<literal>false</literal>” is assumed. </para>
      <para>For a description of <tag class="attribute">psvi-required</tag>, see <xref
          linkend="psvi-support"/>; for <tag class="attribute">xpath-version</tag>, see <xref
          linkend="xpath-context"/>; for <tag class="attribute">exclude-inline-prefixes</tag>, see
          <tag>p:inline</tag>.</para>

<note xml:id="note-step-decl">
        <para>The steps declared in a pipeline library are referred to by their type. It is not an
          error to put a <tag>p:declare-step</tag> without a <tag
            class="attribute">type</tag> in a <tag>p:library</tag>, but there is no standard
          mechanism for instantiating it or referring to it. It is effectively invisible.</para>
      </note><para>Libraries can import pipelines and/or other libraries.
See also <xref linkend="handling-imports"
      />.</para></section>

<!-- ============================================================ -->

<section xml:id="p.import"><title>p:import</title><para>An <tag>p:import</tag> loads a pipeline
        or pipeline library, making it available in the pipeline or library which contains the
          <tag>p:import</tag>.</para>
      <e:rng-pattern name="Import"/>
      <para>An import statement loads the specified IRI and makes any pipelines declared within it
        available to the current pipeline. </para>
<para><error code="S0052">It is a
            <glossterm>static error</glossterm> if the URI of a <tag>p:import</tag> cannot be
          retrieved or if, once retrieved, it does not point to a <tag>p:library</tag> or
            <tag>p:declare-step</tag>.</error>
        <error code="S0053">It is a <glossterm>static error</glossterm> to import a single pipeline
          if that pipeline does not have a <tag class="attribute">type</tag>.</error>
      </para>
<para>Attempts to retrieve the library identified by the URI value may be redirected at
        the parser level (for example, in an entity resolver) or below (at the protocol level, for
        example, via an HTTP Location: header). In the absence of additional information outside the
        scope of this specification within the resource, the base URI of the library is always the
        URI of the actual resource returned. In other words, it is the URI of the resource retrieved
        after all redirection has occurred.</para>
<para>As imports are processed, a processor may
        encounter new <tag>p:import</tag> elements whose library URI is the same as one it has
        already processed in some other context. This may happen as a consequence of resolving the
        URI. If the actual base URI is the same as one that has already been processed, the
        implementation must recognize it as the same library and should not need to process the
        resource. Also, a duplicate, circular chain of imports, or a re-entrant import is not an
        error and implementations must take the necessary steps to avoid infinite loops and/or
        incorrect notification of duplicate step definitions. It is not an error for a library to
        import itself. An example of such steps is listed in <xref linkend="handling-imports"
        />.</para>
<para>A library is considered the same library if the URI of the resource
        retrieved is the same. If a pipeline or library author uses two different URI values that
        resolve to the same resource, they must not be considered the same imported
        library.</para>

</section>

<section xml:id="p.import-functions"><title>p:import-functions</title>

<para>FIXME: T.B.D.</para>

<e:rng-pattern name="ImportFunctions"/>
</section>

<!-- ============================================================ -->
<section xml:id="p.pipe">
<title>p:pipe</title>

<para>A <tag>p:pipe</tag> connects an input to a port on another
step.</para>

<e:rng-pattern name="Pipe"/>

<para>The <tag>p:pipe</tag> element connects to a readable port of
another step. It identifies the readable port to which it connects
with the name of the step in the <tag class="attribute">step</tag>
attribute and the name of the port on that step in the
<tag class="attribute">port</tag> attribute.</para>

<para>If the <tag class="attribute">step</tag> attribute is not specified,
it defaults to the step which provides the default readable port.
If the <tag class="attribute">port</tag> attribute is not specified,
it defaults to the primary output port of the step identified (explicitly
or implicitly).</para>

<para>
<error code="S0067">It is a <glossterm>static error</glossterm> if the
<tag class="attribute">step</tag> attribute is not specified, and there
is no default readable port.
<error code="S0068">It is a <glossterm>static error</glossterm> if the
<tag class="attribute">port</tag> attribute is not specified, and the
step identified has no primary output port.</error>
</error></para>

<para><error code="S0022">In all cases except when the
<tag>p:pipe</tag> is within an <tag>p:output</tag> of a
<glossterm>compound step</glossterm>, it is a <glossterm>static
error</glossterm> if the port identified by the <tag>p:pipe</tag> is not
in the <glossterm>readable ports</glossterm> of the step that contains
the <tag>p:pipe</tag>.</error></para>

<para>A <tag>p:pipe</tag> that is a <glossterm>connection</glossterm>
for an <tag>p:output</tag> of a <glossterm>compound step</glossterm>
may connect to one of the readable ports of the compound step or to an
output port on one of the compound step's <glossterm>contained
steps</glossterm>. In other words, the output of a compound step can
simply be a copy of one of the available inputs or it can be the
output of one of its children.</para>

<para><error code="S0078">When the <tag>p:pipe</tag> is within an
<tag>p:output</tag> of a <glossterm>compound step</glossterm>, it is a
<glossterm>static error</glossterm> if the port identified by the
<tag>p:pipe</tag> is not in the <glossterm>readable ports</glossterm>
of the compound step and is not a readable port of a contained
step.</error>
</para>

</section>

<section xml:id="p.inline">
<title>p:inline</title>

<para>A <tag>p:inline</tag> provides a document inline.</para>

<e:rng-pattern name="Inline"/>

<para>The <tag class="attribute">content-type</tag> attribute can be used
to set the content type of the provided document;
the <tag class="attribute">document-properties</tag> attribute
can be used to set the <glossterm>document properties</glossterm> of
the provided document.</para>

<para>The document's content type is determined statically.
If a <tag class="attribute">content-type</tag> is specified, that is the
content type. Otherwise, the content type is
“<literal>application/xml</literal>”.
</para>

<para><error code="D0062">It is a <glossterm>dynamic error</glossterm> if
the <tag class="attribute">document-properties</tag> map contains a
<literal>content-type</literal> key and that key has a value that differs
from the statically determined content type.</error></para>

<para>The base URI of the document is the base URI of the
<tag>p:inline</tag> element.</para>

<para>How the content of a <tag>p:inline</tag>
element is interpreted depends on the document's content type and the
<tag class="attribute">encoding</tag> attribute.
</para>

<para><error code="D0054">It is a
<glossterm>dynamic error</glossterm> if an encoding is specified
and the content type is an <glossterm>XML media type</glossterm>.</error>
</para>

<para><error code="D0055">It is a <glossterm>dynamic error</glossterm>
if the content type value specifies a character set and the <tag
class="attribute">encoding</tag> attribute is absent.</error>
</para>

<para><error code="D0039">It is a <glossterm>dynamic error</glossterm>
if the <tag class="attribute">encoding</tag> attribute is present and
content type value specifies a character set that is not supported by
the implementation.</error>
</para>

<para><error code="D0056">It is a <glossterm>dynamic error</glossterm>
if an encoding is specified and the content of the <tag>p:inline</tag>
contains any XML markup.</error>
<error code="D0063">It is a <glossterm>dynamic error</glossterm>
if the <tag>p:inline</tag> contains any XML markup and has a
content type that is not an <glossterm>XML media type</glossterm>.</error>
In other words, in these cases, the entire content
must be a single text node. CDATA sections and character references do
not count as markup for this purpose because they will already have
been replaced by the XML parser that read the pipeline.</para>

<para>If the <tag class="attribute">encoding</tag> attribute is
present, the content must be decoded. The encoding value
“<literal>base64</literal>” <rfc2119>must</rfc2119> be supported and
identifies the content as being base64-encoded.
<impl>An implementation may
support encodings other than <literal>base64</literal>, but these
encodings and their names are
<glossterm>implementation-defined</glossterm>.</impl>
<error code="S0069">It is a <glossterm>static error</glossterm> if the
encoding specified is not supported by the implementation.</error>
<error code="D0040">It is a <glossterm>dynamic error</glossterm> if
the body is not correctly encoded per the value of the <tag
class="attribute">encoding</tag> attribute.</error>
</para>

<para><error code="S0088">It is a <glossterm>static error</glossterm>
if a text node designated as a <link linkend="text-value-templates">text
value template</link> appears in a <tag>p:inline</tag> where an
<tag class="attribute">encoding</tag> is specified.</error></para>

<para>The interpretation of the (possibily decoded) content
depends on the document's content type.
</para>

<section xml:id="inline-non-xml">
<title>Inline non-XML content</title>

<para>If the document's content type is not an <glossterm>XML media
type</glossterm>, then the content is non-XML.</para>

<para><impl>The representation of non-XML content is
<glossterm>implementation-dependent</glossterm></impl>.</para>

<note>
<para>In the presence of <glossterm baseform="text value
template">text value templates</glossterm>, it is not possible to
interpret the non-XML characters until the templates have been
expanded.</para>
</note>

</section>

<section xml:id="inline-xml-content">
<title>Inline XML content</title>

<para>If the <tag class="attribute">document-properties</tag> is not
specified or the map does not contain a key "content-type" or specifies
an <glossterm>XML media type</glossterm>, then
the content is XML. A new XML document is created by wrapping a document node
around the nodes which appear as children of <tag>p:inline</tag>. Any preceding or
following whitespace-only text nodes will be discarded.</para>

<para>The in-scope namespaces of the inline document differ from the
in-scope namespace of the content of the <tag>p:inline</tag> element
in that bindings for all its <emphasis>excluded namespaces</emphasis>,
as defined below, are removed:</para>

<itemizedlist>
                  <listitem>
                      <para>The XProc namespace itself (<uri>http://www.w3.org/ns/xproc</uri>) is
                          excluded.</para>
                  </listitem>
                  <listitem>
                      <para>A namespace URI designated by using an <tag class="attribute"
                          >exclude-inline-prefixes</tag> attribute on the enclosing <tag>p:inline</tag> is
                          excluded.</para>
                  </listitem>
                  <listitem>
                      <para>A namespace URI designated by using an <tag class="attribute"
                          >exclude-inline-prefixes</tag> attribute on any ancestor <tag>p:declare-step</tag> or <tag>p:library</tag> is also excluded. (In other words, the
                          effect of several <tag class="attribute">exclude-inline-prefixes</tag> attributes among
                          the ancestors of <tag>p:inline</tag> is cumulative.)</para>
                  </listitem>
              </itemizedlist>

          <para>The value of each prefix in the <tag
              class="attribute">exclude-inline-prefixes</tag> attribute is
              interpreted as follows:</para>

          <itemizedlist>
              <listitem>
                  <para>The value of the attribute is either <literal>#all</literal>, or
                      a whitespace-separated list of tokens, each of which is either a
                      namespace prefix or <literal>#default</literal>. The namespace bound
                      to each of the prefixes is designated as an excluded namespace. <error
                          code="S0057">It is a <glossterm>static error</glossterm> if the <tag
                              class="attribute" >exclude-inline-prefixes</tag> attribute does not
                          contain a list of tokens or if any of those tokens (except
                          <literal>#all</literal> or <literal>#default</literal>) is not a
                          prefix bound to a namespace in the in-scope namespaces of the element
                          on which it occurs.</error></para>
              </listitem>
              <listitem>
                  <para>The default namespace of the element on which <tag
                      class="attribute">exclude-inline-prefixes</tag> occurs may be
                      designated as an excluded namespace by including
                      <literal>#default</literal> in the list of namespace prefixes. <error
                          code="S0058">It is a <glossterm>static error</glossterm> if the value
                          <literal>#default</literal> is used within the <tag class="attribute"
                              >exclude-inline-prefixes</tag> attribute and there is no default
                          namespace in scope.</error>
                  </para>
              </listitem>
              <listitem>
                  <para>The value <literal>#all</literal> indicates that all namespaces
                      that are in scope for the element on which <tag
                          class="attribute">exclude-inline-prefixes</tag> occurs are designated
                      as excluded namespaces.</para>
              </listitem>
          </itemizedlist>

          <para>The XProc processor <rfc2119>must</rfc2119> include all in-scope
              prefixes that are not explicitly excluded. If the namespace associated with
              an excluded prefix is used in the expanded-QName of a descendant
              element or attribute,
              the processor <rfc2119>may</rfc2119> include that prefix anyway, or it may
              generate a new prefix.</para>

          <para>Consider this example:</para>

          <programlisting language="xml"><xi:include href="../../../build/examples/exclude-pfx.txt" parse="text"/></programlisting>

          <para>which might produce a result like this:</para>

          <programlisting language="xml"><![CDATA[<doc xmlns:c="http://example.com/c">
   <b:part xmlns:b="http://example.com/b"/>
 </doc>]]></programlisting>

          <para>The declaration for “<literal>c</literal>” must
              be present because it was not excluded. The “<literal>part</literal>” element
              uses the namespace bound to “<literal>b</literal>”, so <emphasis>some</emphasis>
              binding must be present. In this example, the original
              prefix has been preserved, but it would be equally correct if a different
              prefix had been used.</para>

<para>The text-node descendants of a <tag>p:inline</tag> may be
<link linkend="text-value-templates">text value templates</link>.</para>
</section>

<section xml:id="implicit-inlines">
<title>Implicit inlines</title>

<para>As an authoring convenience, if one or more element nodes,
optionally preceded and/or followed by whitespace, in any namespace
other than the XProc namespace, occurs where a <tag>p:inline</tag> is
allowed, each is treated as if it was enclosed within a
<tag>p:inline</tag> element (with no attributes). Any preceding or
following whitespace is discarded. Elements in the XProc namespace are
forbidden except for <tag>p:documentation</tag>
and <tag>p:pipeinfo</tag> which are ignored.</para>

<para>The following example demonstrates this implicit behaviour:</para>

<programlisting language="xml"><![CDATA[<p:identity name="identity" code="my:implicitinline1">
    <p:with-input port="source">
        <para xmlns="http://docbook.org/ns/docbook">Some text</para>
        <para xmlns="http://docbook.org/ns/docbook">Some other text</para>
    </p:with-input>
</p:identity>]]></programlisting>

<para>Is interpreted as follows:</para>

<programlisting language="xml"><![CDATA[<p:identity name="identity" code="my:implicitinline2">
    <p:with-input port="source">
        <p:inline><para xmlns="http://docbook.org/ns/docbook">Some text</para></p:inline>
        <p:inline><para xmlns="http://docbook.org/ns/docbook">Some other text</para></p:inline>
    </p:with-input>
</p:identity>]]></programlisting>

<para>An explicit <tag>p:inline</tag> is required if the author
wants to include top level comments, processing instructions, or whitespace,
or if the document element is in the XProc namespace.</para>

<para><error code="S0079">It is a <glossterm>static error</glossterm>
if comments, non-whitespace text nodes, or processing instructions occur as siblings of an element node
that would be treated as an implicit inline.</error>
</para>
</section>
</section>

<section xml:id="p.document">
<title>p:document</title>

<para>A <tag>p:document</tag> reads a document from a URI.</para>

<e:rng-pattern name="Document"/>

<para>The value of the <tag class="attribute">href</tag> attribute,
after expanding any
<glossterm baseform="attribute value template">attribute value templates</glossterm>,
is a URI.
<error code="D0064">It is a <glossterm>dynamic error</glossterm>
if the URI is not a valid <type>xs:anyURI</type>.</error>
The URI is interpreted
as an IRI reference. If it is relative, it is made absolute against
the base URI of the <tag>p:document</tag> element.
</para>

<para>The document's content type is determined statically. If a
content-type is specified, that is the content type. Otherwise, the
content type is “application/xml”.</para>

<para>The semantics of <tag>p:document</tag> are the same as a the
semantics of <tag>p:load</tag> where the <option>href</option> option
is the URI, the
<option>content-type</option> option comes from
<tag class="attribute">content-type</tag> attribute, the
<option>document-properties</option> option comes from the
<tag class="attribute">document-properties</tag> attribute, and the
<option>parameters</option> option comes from the
<tag class="attribute">parameters</tag> attribute.
</para>

<para><error code="D0011">It is a <glossterm>dynamic error</glossterm>
if the resource referenced by a <tag>p:document</tag> element does not
exist, cannot be accessed, or has an XML content type and is not a
well-formed XML document.</error> <error code="D0023">It is a
<glossterm>dynamic error</glossterm> if a DTD validation is performed
and the document is not valid.</error>
</para>

<note xml:id="note-document"><para>A <tag>p:document</tag> always <emphasis>reads</emphasis> from
the specified IRI. In the context of a <tag>p:input</tag> or <tag>p:with-input</tag>,
this seems
perfectly natural. In the context of a <tag>p:output</tag>, this may
seem a little asymmetrical. Putting a <tag>p:document</tag> in a
<tag>p:output</tag> causes the pipeline to <emphasis>read</emphasis>
from the specified IRI and provide that document <emphasis>as an
output</emphasis> on that port. </para><para>Use <tag>p:store</tag> to store the results that appear on a
<tag>p:output</tag>.</para></note>
</section>

<section xml:id="p.empty">
<title>p:empty</title>
<para>A <tag>p:empty</tag> connects to an <glossterm>empty
sequence</glossterm> of documents.</para>

<e:rng-pattern name="Empty"/>

<para>If an empty binding is used, it must be the only binding for the
port. <error code="S0089">It is a <glossterm>static error</glossterm>
if the <tag>p:empty</tag> binding appears as a sibling of any other binding,
including itself.</error></para>
</section>

    <section xml:id="p.documentation"><title>p:documentation</title><para>A
          <tag>p:documentation</tag> contains human-readable documentation.</para>
      <e:rng-pattern name="Documentation"/>
      <para>There are no constraints on the content of the <tag>p:documentation</tag> element.
        Documentation is ignored by pipeline processors. See <xref linkend="documentation"/>.
      </para></section>

    <section xml:id="p.pipeinfo"><title>p:pipeinfo</title><para>A <tag>p:pipeinfo</tag> contains
        ancillary information for steps in the pipeline.</para>
      <e:rng-pattern name="PipeInfo"/>
      <para>There are no constraints on the content of the <tag>p:pipeinfo</tag> element, see <link
          linkend="annotations"/>.</para></section>
    </section>
  <section xml:id="errors">
    <title>Errors</title>
    <para>Errors in a pipeline can be divided into two classes: static errors and dynamic
      errors.</para>
    <section xml:id="static-errors">
      <title>Static Errors</title>
      <para><termdef xml:id="dt-static-error">A <firstterm>static error</firstterm> is one which can
          be detected before pipeline evaluation is even attempted.</termdef> Examples of static
        errors include cycles in the pipeline graph
        and incorrect specification of inputs and outputs. </para>
      <para>Static errors are fatal and must be detected before any steps are evaluated.</para>
      <para>For a complete list of static errors, see <xref linkend="app.static-errors"/>.</para>
    </section>
    <section xml:id="dynamic-errors">
      <title>Dynamic Errors</title>

      <para><termdef xml:id="dt-dynamic-error">A <firstterm>dynamic
      error</firstterm> is one which occurs while a pipeline is being
      evaluated (and cannot be detected before evaluation begins).</termdef>
      Examples of dynamic errors include
      references to URIs that cannot be resolved, steps which fail,
      and pipelines that exhaust the capacity of an implementation
      (such as memory or disk space).</para>

<para>Implementations are required to evaluate the pipeline graph
according to the rules of this specification, but they may choose to
optimize pipeline execution in different ways. This may cause steps to
be evaluated in different orders which consequently has an impact on
error detection.
<impl>The detection of dynamic errors is somewhat
<glossterm>implementation-dependent</glossterm> because the order of
step execution may vary.</impl> In cases where an implementation
is able to run a pipeline without evaluating a particular expression,
or running a particular step, the implementation is never
required evaluate the expression or run the step solely in order to determine
whether doing so causes a dynamic error. For example, if a variable is
declared but never referenced, an implementation may choose whether or
not to evaluate the expression which initializes the variable, which means that if
evaluating the variable’s initializer causes a dynamic error, some
implementations will signal this error and others will not.</para>

<para>There are some cases where this specification requires that
steps must not be executed: for example, the content of a <tag>p:when</tag>
<rfc2119>must not</rfc2119> be executed if the <tag class="attribute">test</tag>
condition is false. This
means that an implementation <rfc2119>must not</rfc2119> signal any dynamic errors that
would arise if the contents of the <tag>p:when</tag> were executed.</para>

<para>An implementation may signal a dynamic error before any source
document is available, but only if it can determine that the error
would be signaled for every possible source document and every
possible set of parameter values.</para>

      <para>If a step fails due to a dynamic error, failure propagates
      upwards until either a <tag>p:try</tag> is encountered or the
      entire pipeline fails. In other words, outside of a
      <tag>p:try</tag>, step failure causes the entire pipeline to
      fail.</para>

      <para>For a complete list of dynamic errors, see <xref
      linkend="app.dynamic-errors"/>.</para>
    </section>
    <section xml:id="step-errors">
      <title>Step Errors</title>
      <para>Several of the steps in the standard and option step library can generate dynamic
        errors.</para>
      <para>For a complete list of the dynamic errors raised by builtin pipeline steps, see <xref
          linkend="app.step-errors"/>.</para>
    </section>
  </section>

<xi:include href="conformance.xml"/>
<xi:include href="references.xml"/>
<xi:include href="../../../build/glossary.xml">
  <xi:fallback>
    <glossary xml:id="glossary">
      <title>Glossary</title>
      <para>Glossary needs to be generated</para>
    </glossary>
  </xi:fallback>
</xi:include>
<xi:include href="language-summary.xml"/>
<xi:include href="error-codes.xml"/>
<xi:include href="namespace-fixup.xml"/>
<xi:include href="handle-imports.xml"/>
<xi:include href="parallel.xml"/>
<xi:include href="mediatype.xml"/>
<xi:include href="ancillary.xml"/>

<appendix xml:id="changelog">
<title>Change Log</title>
<para>This appendix summarizes significant changes in this
draft.</para>

<para>This First Public Working Draft contains a number of significant
changes to the XProc pipeline language. Future drafts will attempt to address
<link xlink:href="https://github.com/xproc/specification/issues?q=is%3Aopen+is%3Aissue">the remaining issues</link>.</para>

<para>In this draft:</para>

<itemizedlist>
<listitem>
<para>An attempt has been made to simplify how parameters are handled.
There are no more parameter input ports. Instead, parameters are handled
with a map and an otherwise ordinary option named “<code>parameters</code>”.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/28">#28</link>)
</para>
</listitem>
<listitem>
<para>Documents have accessible, arbitrary metadata (key/value pairs).
(See issue <link xlink:href="https://github.com/xproc/specification/issues/46">#46</link>)
</para>
</listitem>
<listitem>
<para>Non-XML documents can flow between steps.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/29">#29</link>)
</para>
</listitem>
<listitem>
<para>Option shortcut attributes can contain
<link linkend="attribute-value-templates">attribute value templates</link> and
inline XML can contain
<link linkend="text-value-templates">text value templates</link>.
(See issues <link xlink:href="https://github.com/xproc/specification/issues/33">#33</link>
and <link xlink:href="https://github.com/xproc/specification/issues/39">#39</link>)
</para>
</listitem>
<listitem>
<para>The <tag>p:variable</tag> and <tag>p:option</tag> elements may
specify a value type.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/62">#62</link>)
</para>
</listitem>
<listitem>
<para>The <tag>p:inline</tag> can be omitted when the result is
unambiguous.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/38">#38</link>)
</para>
</listitem>
<listitem>
<para>The <tag>p:try</tag> step has been enhanced.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/50">#50</link>)
</para>
</listitem>

<listitem>
<para>All steps have a primary output port.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/41">#41</link>)
</para>
</listitem>
<listitem>
<para>The specification has been split into a language specification
and standard step library specification.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/53">#53</link>)
</para>
</listitem>
<listitem>
<para>A version option has been added to <tag>p:validate-with-xml-schema</tag>.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/83">#83</link>)
</para>
</listitem>
<listitem>
<para>A version option has been added to <tag>p:xquery</tag>
(See issue <link xlink:href="https://github.com/xproc/specification/issues/84">#84</link>)
</para>
</listitem>
<listitem>
<para>Support for XPath 1.0 has been removed.
(See issue <link xlink:href="https://github.com/xproc/specification/issues/52">#52</link>)
</para>
</listitem>
</itemizedlist>
</appendix>

</specification>
