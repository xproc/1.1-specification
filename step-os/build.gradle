configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    fileTree(dir: '../tools/lib').include("*.jar")
  )
}

defaultTasks 'specification'

apply plugin: 'com.xmlcalabash.task'

import com.xmlcalabash.XMLCalabashTask
import com.nwalsh.tasks.StripAmblesTask

task xinclude(dependsOn: [ ":spec_schemas" ], type: XMLCalabashTask) {
  inputs.files fileTree(dir: "src/main/xml/")
  input("source", "src/main/xml/specification.xml")
  output("result", "build/xinclude.xml")
  pipeline "../tools/xpl/validate.xpl"
}
xinclude.doFirst {
  mkdir("build")
}

task source(dependsOn: ["xinclude", "glossary"], type: XMLCalabashTask) {
  inputs.files fileTree(dir: "src/main/xml/")
  inputs.file "../tools/xsl/masterbib.xsl"
  inputs.file "../src/main/xml/bibliography.xml"
  inputs.file "src/main/xml/specification.xml"
  inputs.file "build/glossary.xml"
  outputs.file "build/source.xml"
  input("source", "src/main/xml/specification.xml")
  output("result", "build/source.xml")
  pipeline "../tools/xpl/validate.xpl"
}

task glossary(dependsOn: ["xinclude"], type: XMLCalabashTask) {
  inputs.files fileTree(dir: "src/main/xml/")
  inputs.file "../src/main/xml/bibliography.xml"
  inputs.file "../tools/xpl/makeglossary.xpl"
  inputs.file "../tools/xsl/makeglossary.xsl"
  outputs.file "build/glossary.xml"
  input("source", "build/xinclude.xml")
  output("result", "build/glossary.xml")
  pipeline "../tools/xpl/makeglossary.xpl"
}

task library(dependsOn: ["source"], type: XMLCalabashTask) {
  inputs.file "build/source.xml"
  inputs.file "../tools/xpl/typed-pipeline-library.xpl"
  inputs.file "../tools/xsl/typed-pipeline-library.xsl"
  outputs.file "build/library.xml"
  input("source", "build/source.xml")
  output("result", "build/library.xml")
  pipeline "../tools/xpl/typed-pipeline-library.xpl"
}

task rnc(dependsOn: ["library"], type: XMLCalabashTask) {
  inputs.file "build/library.xml"
  inputs.file "../tools/xpl/library-to-rnc.xpl"
  inputs.file "../tools/xsl/library-to-rnc.xsl"
  outputs.file "build/steps.rnc"
  input("source", "build/library.xml")
  output("result", "build/steps.rnc")
  pipeline "../tools/xpl/library-to-rnc.xpl"
}

task rng(dependsOn: ["rnc"], type: JavaExec) {
  inputs.file "build/steps.rnc"
  outputs.file "build/steps.rng"
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/steps.rnc", "build/steps.rng"]
}

task specification(dependsOn: [ "source", "library", "rng" ]) {
  // nop
}

// ================================================================================
// Process the examples

def copyFiles = [ ]

copyFiles.each { String name ->
  String newname = name.substring(0, name.lastIndexOf(".")) + ".txt"

  task "copy_$name"(type: Copy) {
    from "src/main/examples/$name"
    into "$buildDir/examples"
    rename (name, newname)
  }
  xinclude.dependsOn "copy_$name"
}

task clean() {
  doFirst {
    delete("build")
  }
}
