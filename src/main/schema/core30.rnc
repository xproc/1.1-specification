default namespace p = "http://www.w3.org/ns/xproc"
namespace c = "http://www.w3.org/ns/xproc-step"
namespace s = "http://www.ascc.net/xml/schematron"
namespace local = ""
namespace sa = "http://xproc.org/ns/syntax-annotations"
namespace xs = "http://www.w3.org/2001/XMLSchema"

# This schema neither supports nor requires the use of RELAX NG DTD Compatibility

[
   sa:model = "XPathExpression"
]
XPathExpression = text

[
   sa:model = "XSLTMatchPattern"
]
XSLTMatchPattern = text

[
   sa:model = "XPathSequenceType"
]
XPathSequenceType = text

[
   sa:model = "ContentType"
]
ContentType = text

[
   sa:model = "ContentTypes"
]
ContentTypes = text

[
   sa:model = "map(xs:QName,item())"
]
PropertyMap = text

[
   sa:model = "map(xs:QName,xs:anyAtomicValue)"
]
SerializationMap = text

[
   sa:model = "EQName*"
]
ListOfEQName = text

[
   sa:model = "char"
]
Char = text

name.ncname.attr = attribute name { xsd:NCName }
name.qname.attr = attribute name { xsd:QName }
as.attr = attribute as { XPathSequenceType }
port.attr = attribute port { xsd:NCName }
required.attr = attribute required { xsd:boolean }
sequence.attr = attribute sequence { xsd:boolean }
primary.attr = attribute primary { xsd:boolean }
select.attr = attribute select { XPathExpression }
xpath-version.attr = attribute xpath-version { "3.1" }
psvi-required.attr = attribute psvi-required { xsd:boolean }
document-properties.attr = attribute document-properties { PropertyMap }
serialization.attr = attribute serialization { SerializationMap }
content-type.attr = attribute content-type { ContentType }
content-types.attr = attribute content-types { ContentTypes }
collection.attr = attribute collection { xsd:boolean }
pipe.attr = attribute pipe { text }
expand-text.attr= attribute expand-text { xsd:boolean }

exclude-inline-prefixes.attr =
   attribute exclude-inline-prefixes { ExcludeInlinePrefixes }

# Bah, humbug. The ExcludeInlinePrefixes pattern should 
# really be ("#all" | (PrefixList & "#default"?)) or
# maybe ("#all" | (PrefixList | "#default")+), but neither
# one of those is allowed by RELAX NG.
[
   sa:model = "ExcludeInlinePrefixes"
]
ExcludeInlinePrefixes = text

[
   sa:model = "PrefixList"
]
PrefixList = xsd:NMTOKENS

[
   sa:model = "QNameList"
]
QNameList = xsd:NMTOKENS

[
   sa:ignore = "yes"
]
xmlid.attr = attribute xml:id { xsd:ID }

[
   sa:ignore = "yes"
]
xmlbase.attr = attribute xml:base { xsd:anyURI }
href.attr = attribute href { xsd:anyURI }

[
   sa:ignore = "yes"
]
use-when.attr = attribute use-when { XPathExpression }

[
   sa:ignore = "yes"
]
p_use-when.attr = attribute p:use-when { XPathExpression }

version.attr = attribute version { "3.0" }

common.attributes = xmlid.attr?, xmlbase.attr?, extension.attr*

inline.attributes = exclude-inline-prefixes.attr?

decl.attributes = psvi-required.attr?,
   xpath-version.attr?,
   exclude-inline-prefixes.attr?,
   version.attr?,
   expand-text.attr?

# ============================================================

start = Library | DeclareStep
 | VocabParam | VocabParamSet | VocabResult | VocabHttpRequest
 | VocabHeader | VocabMultipart | VocabBody | VocabHttpResponse | VocabQuery
 | VocabLine | VocabData | VocabDirectory | Errors | StandardStep | ExtraStep

# StandardStep is explicitly unspecified because this is not a complete schema
ExtraStep = notAllowed

# ============================================================

[
   sa:class = "language-construct"
]
Library =
   element library {
      decl.attributes,
      common.attributes,
      use-when.attr?,
      (Import|DeclareStep|Documentation|PipeInfo)*
   }

[
   sa:class = "language-construct"
]
Import =
   element import {
      common.attributes,
      use-when.attr?,
      href.attr,
      (Documentation|PipeInfo)*
   }

[
   sa:model = "subpipeline"
]
Subpipeline = (Variable|ForEach|Viewport|Choose|If|Group|Try|OtherStep|Documentation|PipeInfo)+

# ============================================================

[
   sa:class = "language-construct"
   sa:element = "input"
]
Input =
   element input {
      port.attr,
      sequence.attr?,
      primary.attr?,
      select.attr?,
      content-types.attr?,
      [ sa:avt = "true" ]
         href.attr?,
      common.attributes,
      expand-text.attr?,
      inline.attributes,
      use-when.attr?,
      ( ( (\Empty | (Document|Inline)*) & (Documentation|PipeInfo)* ) | AnyElement* )
   }

[
   sa:class = "language-construct"
   sa:element = "with-input"
]
WithInput =
   element with-input {
      port.attr?,
      select.attr?,
      [ sa:avt = "true" ]
         href.attr?,
         pipe.attr?,
      common.attributes,
      expand-text.attr?,
      inline.attributes,
      use-when.attr?,
      ( ( (\Empty | (Document|Pipe|Inline)*) & (Documentation|PipeInfo)* ) | AnyElement* )
   }

# ============================================================

[
   sa:class = "language-construct"
]
OutputDeclaration =
   element output {
      port.attr?,
      sequence.attr?,
      primary.attr?,
      content-types.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      serialization.attr?,
      (Documentation|PipeInfo)*
   }

[
   sa:class = "language-construct"
]
OutputConnection =
   element output {
      port.attr?,
      sequence.attr?,
      primary.attr?,
      content-types.attr?,
      serialization.attr?,
      [ sa:avt = "true" ]
         href.attr?,
      pipe.attr?,
      common.attributes,
      expand-text.attr?,
      inline.attributes,
      use-when.attr?,
      ( ( (\Empty | (Document|Pipe|Inline)*) & (Documentation|PipeInfo)* ) | AnyElement* )
   }

[
   sa:element = "output"
]
Output = OutputDeclaration | OutputConnection

[
   sa:class = "language-construct"
]
Pipe =
   element pipe {
      attribute step { xsd:NCName }?,
      port.attr?,
      common.attributes,
      use-when.attr?,
      (Documentation|PipeInfo)*
   }

[
   sa:class = "language-construct"
]
Document =
   element document {
      [ sa:avt = "true" ]
         href.attr,
      document-properties.attr?,
      attribute parameters { PropertyMap }?,
      common.attributes,
      use-when.attr?,
      (Documentation|PipeInfo)*
   }

[
   sa:class = "language-construct"
]
Inline =
   element inline {
      common.attributes,
      inline.attributes,
      document-properties.attr?,
      attribute encoding { text }?,
      use-when.attr?,
      expand-text.attr?,
      Any*
   }

[
   sa:class = "language-construct"
]
\Empty =
   element empty {
      (Documentation|PipeInfo)*
   }

# ============================================================

[
   sa:class = "language-construct"
]
OptionDeclaration =
   element option {
      name.qname.attr,
      as.attr?,
      required.attr?,
      common.attributes,
      use-when.attr?,
      (Documentation|PipeInfo)*
   }

[
   sa:class = "language-construct"
]
OptionSelect =
   element option {
      name.qname.attr,
      as.attr?,
      required.attr?,
      select.attr,
      common.attributes,
      use-when.attr?,
      (Documentation|PipeInfo)*
   }

[
   sa:element = "option"
]
Option = OptionDeclaration | OptionSelect

# ============================================================

[
   sa:class = "language-construct"
]
WithOptionSelect =
   element with-option {
      name.qname.attr,
      as.attr?,
      select.attr,
      [ sa:avt = "true" ]
        collection.attr?,
      [ sa:avt = "true" ]
         href.attr?,
         pipe.attr?,
      common.attributes,
      expand-text.attr?,
      inline.attributes,
      use-when.attr?,
      ( ( (\Empty | (Document|Pipe|Inline)*) & (Documentation|PipeInfo)* ) | AnyElement* )
   }

[
   sa:element = "with-option"
]
WithOption = WithOptionSelect

# ============================================================

[
   sa:class = "language-construct"
]
VariableSelect =
   element variable {
      name.qname.attr,
      as.attr?,
      select.attr,
      [ sa:avt = "true" ]
         collection.attr?,
      [ sa:avt = "true" ]
         href.attr?,
         pipe.attr?,
      common.attributes,
      expand-text.attr?,
      inline.attributes,
      use-when.attr?,
      ( ( (\Empty | (Document|Pipe|Inline)*) & (Documentation|PipeInfo)* ) | AnyElement* )
   }

[
   sa:element = "variable"
]
Variable = VariableSelect

# ============================================================

[
   sa:class = "language-construct"
]
DeclareStep =
   element declare-step {
      name.ncname.attr?,
      attribute type { xsd:QName }?,
      decl.attributes,
      attribute visibility { "private" | "public"  }?,
      common.attributes,
      use-when.attr?,
      (Input|Output|Option|Documentation|PipeInfo)*,
      ((DeclareStep|Import|Documentation|PipeInfo)*,Subpipeline)?
   }

# ============================================================

[
   sa:class = "language-construct"
]
ForEach =
   element for-each {
      name.ncname.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((WithInput? & (Output|Documentation|PipeInfo)*), Subpipeline)
   }

# ============================================================

[
   sa:class = "language-construct"
]
Viewport =
   element viewport {
      name.ncname.attr?,
      [ sa:avt = "true" ]
         attribute match { XSLTMatchPattern },
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((WithInput? & Output? & Documentation* & PipeInfo*), Subpipeline)
   }

# ============================================================

[
   sa:class = "language-construct"
]
Choose =
   element choose {
      name.ncname.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Documentation|PipeInfo)*,
       WithInput?,

       ((((Documentation|PipeInfo)*, When)+,
         ((Documentation|PipeInfo)*, Otherwise)?)
       | (((Documentation|PipeInfo)*, When)*,
         ((Documentation|PipeInfo)*, Otherwise))),

       (Documentation|PipeInfo)*)
   }

[
   sa:class = "language-construct"
]
When =
   element when {
      attribute test { XPathExpression },
      [ sa:avt = "true" ]
         collection.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Documentation|PipeInfo)*,
         WithInput?,
         (Output|Documentation|PipeInfo)*,
         Subpipeline)
   }

[
   sa:class = "language-construct"
]
Otherwise =
   element otherwise {
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Output|Documentation|PipeInfo)*, Subpipeline)
   }

# ============================================================

[
   sa:class = "language-construct"
]
If =
   element if {
      attribute test { XPathExpression },
      [ sa:avt = "true" ]
         collection.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Documentation|PipeInfo)*,
         WithInput?,
         (Output|Documentation|PipeInfo)*,
         Subpipeline)
   }

# ============================================================

[
   sa:class = "language-construct"
]
Group =
   element group {
      name.ncname.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Output|Documentation|PipeInfo)*, Subpipeline)
   }

# ============================================================

[
   sa:class = "language-construct"
]
Try =
   element try {
      name.ncname.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((TryGroup, ((Catch+, Finally?)|(Catch*, Finally))) & (Documentation|PipeInfo)*)
   }

[
   sa:class = "language-construct"
]
TryGroup =
   element group {
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Output|Documentation|PipeInfo)*, Subpipeline)
   }

[
   sa:class = "language-construct"
]
Catch =
   element catch {
      name.ncname.attr?,
      attribute code { QNameList }?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Output|Documentation|PipeInfo)*, Subpipeline)
   }

[
   sa:class = "language-construct"
]
Finally =
   element finally {
      name.ncname.attr?,
      common.attributes,
      expand-text.attr?,
      use-when.attr?,
      ((Documentation|PipeInfo)*, Subpipeline)
   }

# ============================================================

[
   sa:class = "language-construct"
]
OtherAtomicStep =
   element * - (p:*) {
      name.ncname.attr?,
      option.attr*,
      common.attributes,
      expand-text.attr?,
      p_use-when.attr?,
      (WithInput|WithOption|Documentation|PipeInfo)*
   }

[
   sa:class = "language-construct"
]
OtherCompoundStep =
   element * - (p:*) {
      name.ncname.attr?,
      common.attributes,
      expand-text.attr?,
      p_use-when.attr?,
      ((Output|Documentation|PipeInfo)*, Subpipeline)
   }

OtherStep = StandardStep | OtherAtomicStep | OtherCompoundStep

# ============================================================
[
   sa:ignore = "yes"
   sa:class = "language-construct"
]
Documentation =
   element documentation {
      common.attributes,
      use-when.attr?,
      DocContent*
   }

[
   sa:model = "any-well-formed-content"
]
DocContent = Any

# ============================================================
[
   sa:ignore = "yes"
   sa:class = "language-construct"
]
PipeInfo =
   element pipeinfo {
      common.attributes,
      use-when.attr?,
      DocContent*
   }

# ============================================================

_any.attr =
   attribute * { text }

option.attr =
   attribute (local:* - (local:name | local:expand-text)) { text }

extension.attr =
   attribute (* - (local:*|xml:*|p:*)) { text }

[
   sa:model = "anyElement"
]
AnyElement =
   element * {
      (_any.attr | text | AnyElement)*
   }

[
   sa:model = "anyNode"
]
Any =
   (element * {
       (_any.attr | Any)*
    }
   | text)

# ============================================================

[
   sa:class = "step-vocabulary"
]
VocabParam =
   element c:param {
      name.qname.attr,
      attribute namespace { xsd:anyURI }?,
      attribute value { text },
      empty
   }

[
   sa:class = "step-vocabulary"
]
VocabParamSet =
   element c:param-set {
      VocabParam*
   }

[
   sa:class = "step-vocabulary"
]
VocabDirectory =
   element c:directory {
      attribute name { text },
      ((VocabFile|VocabDirectory|VocabOther)*)
   }
[
   sa:class = "step-vocabulary"
]
VocabFile =
   element c:file {
      attribute name { text },
      content-types.attr?,
      empty
   }
[
   sa:class = "step-vocabulary"
]
VocabOther =
   element c:other {
      attribute name { text },
      empty
   }
[
   sa:class = "step-vocabulary"
]
VocabResult =
   element c:result {
      text
   }
[
   sa:class = "step-vocabulary"
]
VocabHttpRequest =
   element c:request {
      attribute method { xsd:NCName },
      attribute href { xsd:anyURI }?,
      attribute detailed { xsd:boolean }?,
      attribute status-only { xsd:boolean }?,
      attribute username { text }?,
      attribute password { text }?,
      attribute auth-method { text }?,
      attribute send-authorization { xsd:boolean }?,
      attribute override-content-type { ContentType }?,
      attribute timeout {xsd:positiveInteger}?,
      attribute fail-on-timeout {xsd:boolean}?, 
      (VocabHeader*,(VocabMultipart|VocabBody)?)
   }

[
   sa:class = "step-vocabulary"
]
VocabHeader =
   element c:header {
      attribute name { text },
      attribute value { text },
      empty
   }

[
   sa:class = "step-vocabulary"
]
VocabMultipart =
   element c:multipart {
      content-type.attr,
      attribute boundary { text },
      (VocabBody)+
   }

[
   sa:class = "step-vocabulary"
]
VocabBody =
   element c:body {
      content-type.attr,
      attribute encoding { text }?,
      attribute id { text }?,
      attribute description { text }?,
      attribute disposition { text }?,
      Any*
   }

[
   sa:class = "step-vocabulary"
]
VocabHttpResponse =
   element c:response {
      attribute status { xsd:integer }?,
      (VocabHeader*,(VocabMultipart|VocabBody)?)
   }

[
   sa:class = "step-vocabulary"
]
VocabQuery =
   element c:query {
      text
   }

[
   sa:class = "step-vocabulary"
]
VocabLine =
   element c:line {
      text
   }

[
   sa:class = "step-vocabulary"
]
VocabData =
   element c:data {
      content-type.attr,
      attribute charset { text }?,
      attribute encoding { text }?,
      text
   }

# ============================================================

[
   sa:class = "error-vocabulary"
]
Errors =
   element c:errors {
      Error*
   }

[
   sa:class = "error-vocabulary"
]
Error =
   element c:error {
      name.ncname.attr?,
      attribute type { xsd:QName }?,
      attribute code { xsd:QName }?,
      attribute href { xsd:anyURI }?,
      attribute line { xsd:integer }?,
      attribute column { xsd:integer }?,
      attribute offset { xsd:integer }?,
      Any*
   }

Charset = text
Encoding = text
MIMEContentType = text
MIMEMediaType = text
RegularExpression = text
NormalizationForm = 'NFC'|'NFD'|'NFKC'|'NFKD'|'fully-normalized'|'none'|xsd:NMTOKEN
ListOfQNames = text
