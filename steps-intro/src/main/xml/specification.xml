<?xml version="1.0" encoding="UTF-8"?>
<specification xmlns="http://docbook.org/ns/docbook"
               xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#"
               xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"
               xmlns:p="http://www.w3.org/ns/xproc"
               xmlns:xi="http://www.w3.org/2001/XInclude"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xml:id='steps-intro'
               class="ed"
               version="5.0-extension w3c-xproc">
<info>
<title>XProc 3.0 Steps: An Introduction</title>
<!-- defaults to date formatted <pubdate>2014-12-18</pubdate> -->
<copyright><year>2018</year><holder>@@FIXME:</holder></copyright>

<bibliorelation type="isformatof" xlink:href="specification.xml">XML</bibliorelation>
<authorgroup>
  <author>
    <personname>Achim Berndzen</personname>
  </author>
  <author>
    <personname>Gerrit Imsieke</personname>
  </author>
  <author>
    <personname>Erik Siegel</personname>
  </author>
  <author>
    <personname>Norman Walsh</personname>
  </author>
</authorgroup>

<abstract>
  <para>This specification describes general features of the step vocabulary of
  <citetitle>XProc 3.0: An XML Pipeline Language</citetitle>.</para>
</abstract>

<legalnotice role="status">

<para><emphasis>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document.</emphasis></para>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C.
See also
<xref linkend="credits"/>.</para>
</legalnotice>
</info>

<section xml:id="introduction">
<title>Introduction</title>

<para>Many atomic steps are available for <biblioref linkend="xproc30"/>.
They are described in several specifications.
A conformant processor <rfc2119>must</rfc2119> implement all of the steps
in <biblioref linkend="steps30"/>. Additional steps may also be implemented.
</para>

<para>This specification describes the general background common to all
steps.</para>

<para>The types given for options should be understood as follows:</para>
<itemizedlist>
  <listitem>
    <para>Types in the XML Schema namespace, identified as QNames with the
    <code>xs:</code> prefix, as per the XML Schema specification with one
    exception. Anywhere an <code>xs:QName</code> is specified,
    an
    <link xlink:href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</link>
    is allowed.</para>
  </listitem>
  <listitem>
    <para><type>XPathExpression</type>:
    As a string per <biblioref linkend="xmlschema-2"/>, including
    whitespace normalization, and the further requirement to be a
    conformant Expression per <biblioref linkend="xpath31"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>XSLTSelectionPattern</type>: An XSLT pattern.
    </para>
  </listitem>
  <listitem>
    <para><type>XPathSequenceType</type>: An XPath
    <link xlink:href="https://www.w3.org/TR/xpath-31/#id-types">sequence type</link>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentType</type>: A media type as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentTypes</type>:
    As a whitespace separated list of media types as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
</itemizedlist>

<para>Option values are often expressed using the shortcut syntax. In
these cases, the option shortcuts are generally treated as value
templates. However, for options of type <code>map()</code> or
<code>array()</code>, an expression is <emphasis>required</emphasis>
(there is no non-expression string which can ever be a legal value for
a map or array). Given that every value entered this way will have to
be a value template, and consequently every curly brace contained
within the expression will have to be escaped, values of type map or
array are defined to be expressions directly.</para>

<para>Some aspects of documents are generally unchanged by steps:</para>

<itemizedlist>
<listitem>
<para>When a step in this library produces an output document,
the base URI of the output is the base URI of the step's primary
input document unless the step's process explicitly sets an
<tag class="attribute">xml:base</tag> attribute or the step's
description explicitly states how the base URI is constructed.</para>
</listitem>
<listitem>
<para>Each step describes how it modifies the document properties of
the documents that flow through it.</para>
<para>A great many steps indicate that they preserve some or all of
the properties of the input document. It should be noted that in some
cases the transformation performed by the step will violate the
condition associated with some property. In general, the steps cannot
know this and the pipeline author is responsible for managing the
properties with greater care in this case.
</para>
</listitem>
</itemizedlist>

<para xml:id="cv.result">Also, in this specification, several steps use this
element for result information:</para>

<e:rng-pattern name="VocabResult"/>

<para>When a step uses an XPath to compute an option value, the XPath
context is as defined in <biblioref linkend="xproc30"/>.</para>

<para>When a step specifies a particular version of a technology,
implementations <rfc2119>must</rfc2119> implement that
version or a subsequent version that is backwards compatible with that
version. At user-option, they may implement other non-backwards
compatible versions.</para>
  
<para>In this specification the words <rfc2119>must</rfc2119>, <rfc2119>must not</rfc2119>,
        <rfc2119>should</rfc2119>, <rfc2119>should not</rfc2119>, <rfc2119>may</rfc2119> and
        <rfc2119>recommended</rfc2119> are to be interpreted as described in <biblioref
linkend="rfc2119"/>.</para>
  
<section xml:id="common-options">
<title>Common options</title>
  
  <note>
    <title>Note</title>
    <para>Note that these options are always in the XProc namespace. This limits the extent to which the
      option restricts the space of available option names for steps.
      (If the option name wasn’t in a namespace, then no step could have an option with the same name as the common
      option, for instance “<literal>timeout</literal>”, which seems unreasonable.)
    </para>
  </note>
  
      <section>
        <title>p:timeout</title>
        <para>All XProc steps <rfc2119>must</rfc2119> accept the option <option>p:timeout</option>. As a debugging tool
          this option can be used to tell the XProc processor that a step with such an option should be terminated if
          its execution does take more time than expected. The value of the <option>p:timeout</option> option must be a
            constant <type>xs:positiveInteger</type> (not an AVT). It is interpreted as the maximal number of seconds the step is expected to
          run. The measurement of time starts after all bindings for input ports and all options are evaluated. If the
          XProc processor realizes a longer runtime, it should terminate the execution of the step as soon as possible,
          do cleanup to ensure proper execution of other steps in the pipeline and then raise a dynamic error.</para>

        <para><error code="D0053">It is a <glossterm>dynamic error</glossterm> if a step runs longer than its timeout
            value.</error>
          <impl>It is <glossterm>implementation-defined</glossterm> whether a processor supports timeouts, and if it
            does, how precisely and precisely how the execution time of a step is measured.</impl>
        </para>

        <note>
          <title>Note</title>
          <para>Since the exact time a step takes to perform its task depends on the used computer, the XProc
            processor's execution strategy, the system load etc., this feature can not be used as an exact timing tool
            in XProc. Execution times may vary on different executions of the same pipeline on the same computer and the
            same XProc processor due to execution contingencies. Developers are advised to calculate the value for
            p:timeout generously, so the dynamic error is raised only in extreme cases.</para>
        </note>
      </section>
  
      <section>
        <title>p:message</title>
        <para>All XProc steps <rfc2119>must</rfc2119> accept the option <option>p:message</option>. Its value is an AVT.
          The resulting attribute's value can be made available by the processor for debugging purposes, for instance
          written to the standard output or to a log file.</para>
        <para>It is <glossterm>implementation-defined</glossterm> whether a processor supports messages, and if it does,
          under which conditions and how the message is made available.</para>
      </section>
  
</section>

<section xmlns="http://docbook.org/ns/docbook" xml:id="errors">
<title>Step Errors</title>

<para>Several of the steps in the standard step library can generate
<glossterm baseform="dynamic-error">dynamic errors</glossterm>.</para>

<para>A <termdef xml:id="dt-dynamic-error">A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</termdef> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space).</para>

<para>If a step fails due to a dynamic error, failure propagates
upwards until either a <tag>p:try</tag> is encountered or the entire
pipeline fails. In other words, outside of a <tag>p:try</tag>, step
failure causes the entire pipeline to fail.</para>

<para>The following errors can be raised by steps in this
specification:</para>

<?step-error-list level="none"?>

</section>

<xi:include href="conformance.xml"/>

<appendix xml:id="references">
<title>References</title>

<bibliolist>
  <bibliomixed xml:id="rfc2119"/>
  <bibliomixed xml:id="xproc30"/>
  <bibliomixed xml:id="steps30"/>
  <bibliomixed xml:id="xmlschema-2"/>
  <bibliomixed xml:id="xpath31"/>
  <bibliomixed xml:id="rfc2046"/>
</bibliolist>
</appendix>

<xi:include href="../../../build/glossary.xml">
  <xi:fallback>
    <glossary xml:id="glossary">
      <title>Glossary</title>
      <para>Glossary needs to be generated</para>
    </glossary>
  </xi:fallback>
</xi:include>

<appendix xml:id="credits">
<title>Credits</title>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C. It was developed
by the <citetitle>XML Processing Model Working Group</citetitle> and edited by
Norman Walsh, Alex Miłowski, and Henry Thompson.</para>

<para>The editors of this specification extend their gratitude to everyone
who contributed to this document and all of the versions that came before it.</para>
</appendix>

</specification>
